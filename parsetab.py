
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ANDOP ASSIGNOP BOXPLOT COMMA CTF CTI CTSTRING DIFFERENTOP DIVOP DO ELSE EQUALOP FILE FLOAT FROM FUNC GREATERTHANOP HISTOGRAM ID IF INT LEFTBRACKET LEFTCURLY LEFTPAR LESSTHANOP MAINSTART MEAN MEDIAN MODE MULOP OROP PROGRAM READ RETURN RIGHTBRACKET RIGHTCURLY RIGHTPAR SEMICOLON STDDEV SUBOP SUMOP TO VAR VARIANCE VOID WRITEprogram : PROGRAM programNP1 ID programNP2 SEMICOLON programA programB mainprogramNP1 :programNP2 :programA : vars\n                    | emptyprogramB : funcion programB\n                    | emptyvars : VAR varsAvarsA : varsB SEMICOLON varsFvarsB : FILE varsNP2 ID varsNP3 varsNP6 varsE\n                | tipoSimple varsNP2 ID varsNP3 varsC varsNP6varsNP2 :varsNP6 :varsC : LEFTBRACKET varIsArray CTI varsNP4 RIGHTBRACKET varsD\n                | emptyvarIsArray :varsNP4 :varsD : LEFTBRACKET varIsMatrix CTI varsNP5 RIGHTBRACKET\n                | emptyvarIsMatrix :varsNP5 :varsE : COMMA ID varsNP3 varsNP6 varsE\n                | emptyvarsNP3 :varsF : varsA\n                | emptyfuncion : FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqsquadStart :genMemReqs :funcionNP1 :funcionNP2 :funcionA : tipoSimple funcionANP1\n                    | VOID funcionANP1funcionANP1 :funcionB : params\n                    | emptyfuncionC : vars\n                    | emptymain : MAINSTART mainNP1 bloque getGlobalMemReqsgetGlobalMemReqs :mainNP1 :tipoSimple : INT tipoSimpleNP1\n                    | FLOAT tipoSimpleNP1tipoSimpleNP1 :params : tipoSimple paramsNP1 ID paramsNP2 paramsAparamsA : COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA\n                | emptyparamsNP1 :paramsNP2 :bloque : LEFTCURLY bloqueA RIGHTCURLYbloqueA : estatuto bloqueA\n                | emptyestatuto : estatutoNP1 estatutoAestatutoA : asignacion \n                | llamada checkIfVoid\n                | read\n                | escritura\n                | return\n                | condicion\n                | ciclo\n                | specialGraphcheckIfVoid :estatutoNP1 : asignacion : variable ASSIGNOP asignacionNP1 exp asignacionNP2asignacionNP1 : asignacionNP2 : llamada : ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3primerparam : exp loeNP1\n                    | emptyllamadaA : COMMA exp loeNP1 llamadaA\n                | emptyllamadaNP1 :llamadaNP3 :read : READ ID readNP1readNP1 :escritura : WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3escrituraNP1 :escrituraNP3 :loeNP2 :escrituraA : exp loeNP1\n                    | CTSTRING escrituraNP2loeNP1 :escrituraNP2 :escrituraB : COMMA escrituraA escrituraB\n                    | emptyreturn : RETURN exp returnNP1returnNP1 :condicion : IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2condicionNP1 :condicionA : ELSE condicionANP1 bloque\n                    | emptycondicionANP1 :condicionANP2 :ciclo : FROM exp TO exp DO cicloNP1 bloque cicloNP2cicloNP1 :cicloNP2 :variable : ID variableNP1 variableAvariableNP1 :variableA : LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB\n                    | emptycheck_if_non_atomic :verify :variableB : LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET\n                    | empty on_matrix_checkcheck_if_matrix :verify_matrix :on_matrix_check :exp : exp1 expAexpNP1 :expA : OROP operNP1 exp1 expNP1 expA\n                | emptyexp1 : exp2 exp1Aexp1NP1 :exp1A : ANDOP operNP1 exp2 exp1NP1 exp1A\n                | emptyexp2 : exp3 exp2Aexp2A : exp2B operNP1 exp3 exp2ANP1\n                | emptyexp2ANP1 :exp2B : LESSTHANOP\n                | GREATERTHANOP\n                | DIFFERENTOP\n                | EQUALOPexp3 : termino exp3Aexp3NP1 :exp3A : exp3B operNP1 termino exp3NP1 exp3A\n                | emptyexp3B : SUMOP\n                | SUBOPtermino : terminoC terminoAterminoA : terminoB operNP1 terminoC terminoANP1 terminoA\n                    | emptyterminoANP1 :terminoB : MULOP\n                    | DIVOPterminoC : factor\n                    | llamada checkIfNotVoidcheckIfNotVoid :factor : LEFTPAR operNP1 exp RIGHTPAR factorNP1\n                | CTI factorNP2\n                | CTF factorNP3\n                | negative_int factorNP2\n                | negative_float factorNP3\n                | variable\n                | specialnegative_int : SUBOP CTInegative_float : SUBOP CTFoperNP1 :factorNP1 :factorNP2 :factorNP3 :special : specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialspecialFunc : MEAN\n                    | MEDIAN\n                    | MODE\n                    | VARIANCE\n                    | STDDEVspecialGraph : specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraphspecialGraphFunc : HISTOGRAM\n                    | BOXPLOTaddSpecialToStack :check_if_is_matrix :process_special :process_specialGraph :empty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,21,41,46,56,],[0,-1,-40,-39,-50,]),'ID':([2,3,17,18,19,20,24,25,26,28,29,30,31,33,34,35,42,48,50,56,58,59,60,61,62,63,64,65,66,68,69,71,73,79,83,84,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,162,164,167,168,169,170,171,172,173,174,175,177,185,193,194,195,196,197,198,212,217,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,252,254,256,257,258,259,261,262,264,265,267,270,271,272,273,280,],[-2,4,-12,-12,-44,-44,-30,-34,-34,39,40,-42,-43,43,-32,-33,-63,-63,68,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,87,68,68,118,-55,-65,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-148,-150,-151,-150,-151,-144,-145,68,-48,68,-79,-97,-101,-100,-74,-79,-86,-108,-148,-111,-112,-148,-115,-116,-148,-118,-120,-121,-122,-123,-124,-148,-127,-128,-129,-130,-148,-132,-134,-135,-137,68,-140,-141,-142,-143,-146,-147,68,180,182,-66,68,68,68,68,68,68,68,68,199,-64,-109,-113,-119,-125,-133,-149,68,68,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-48,-67,-105,-99,-107,-76,-163,-88,-94,-158,274,68,-104,-152,-90,-103,]),'SEMICOLON':([4,5,16,39,40,44,45,52,53,55,78,80,81,118,163,165,183,184,207,209,210,275,],[-3,6,27,-24,-24,-13,-165,-165,-13,-15,-10,-23,-11,-24,181,-13,-165,-165,-22,-14,-19,-18,]),'VAR':([6,181,],[10,10,]),'FUNC':([6,7,8,9,12,15,27,36,37,38,56,251,266,],[-165,14,-4,-5,14,-8,-165,-9,-25,-26,-50,-29,-27,]),'MAINSTART':([6,7,8,9,11,12,13,15,23,27,36,37,38,56,251,266,],[-165,-165,-4,-5,22,-165,-7,-8,-6,-165,-9,-25,-26,-50,-29,-27,]),'FILE':([10,27,],[17,17,]),'INT':([10,14,27,77,233,],[19,19,19,19,19,]),'FLOAT':([10,14,27,77,233,],[20,20,20,20,20,]),'VOID':([14,],[26,]),'LEFTCURLY':([15,22,27,32,36,37,38,181,200,201,203,204,205,229,231,247,263,],[-8,-41,-165,42,-9,-25,-26,-165,42,-95,-28,-37,-38,42,42,-92,42,]),'COMMA':([39,44,52,68,86,90,91,92,93,94,95,96,98,99,100,101,102,103,118,121,122,124,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,165,168,182,183,186,187,188,190,191,192,193,194,195,196,197,198,206,214,219,220,221,222,223,224,225,226,236,237,238,240,241,242,243,244,254,255,257,258,261,271,272,274,277,280,],[-24,-13,79,-98,-165,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-24,-79,-97,-100,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-13,-165,-49,79,212,-82,-69,217,-82,-83,-109,-113,-119,-125,-133,-149,233,-68,-80,-81,-165,-165,-117,-165,-165,-139,-73,-82,-165,217,-110,-114,-126,-131,-67,212,-99,-107,-163,-104,-152,-49,233,-103,]),'LEFTBRACKET':([40,45,68,86,184,238,],[-24,54,-98,123,208,256,]),'RIGHTCURLY':([42,47,48,49,56,57,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-165,56,-165,-52,-50,-51,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'READ':([42,48,50,56,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-63,-63,69,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'WRITE':([42,48,50,56,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-63,-63,70,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'RETURN':([42,48,50,56,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-63,-63,71,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'IF':([42,48,50,56,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-63,-63,72,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'FROM':([42,48,50,56,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-63,-63,73,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'HISTOGRAM':([42,48,50,56,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-63,-63,75,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'BOXPLOT':([42,48,50,56,58,59,60,61,62,63,64,65,66,68,83,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,125,127,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,167,185,193,194,195,196,197,198,221,222,223,224,225,226,228,236,238,239,241,242,243,244,246,248,249,250,254,257,258,259,261,262,264,265,271,272,273,280,],[-63,-63,76,-50,-53,-54,-62,-56,-57,-58,-59,-60,-61,-98,-55,-165,-75,-87,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-74,-86,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-66,-64,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-165,-73,-165,-78,-110,-114,-126,-131,-93,-91,-96,-164,-67,-99,-107,-76,-163,-88,-94,-158,-104,-152,-90,-103,]),'LEFTPAR':([43,51,68,70,71,72,73,74,75,76,84,85,88,97,105,106,107,108,109,110,111,113,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,159,161,168,169,170,171,172,173,174,175,212,217,256,270,],[-31,77,-72,-77,97,111,97,-161,-159,-160,-65,121,126,-148,-161,-153,-154,-155,-156,-157,97,162,97,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,97,177,97,97,97,97,97,97,97,97,97,97,97,-105,97,]),'CTI':([54,71,73,82,84,97,104,111,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,161,168,169,170,171,172,173,174,175,208,212,217,235,256,270,],[-16,98,98,119,-65,-148,157,98,98,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,98,98,98,98,98,98,98,98,98,98,-20,98,98,253,-105,98,]),'ELSE':([56,228,],[-50,247,]),'ASSIGNOP':([67,68,86,122,124,238,257,258,271,280,],[84,-98,-165,-97,-100,-165,-99,-107,-104,-103,]),'MULOP':([68,86,94,95,96,98,99,100,101,102,103,122,124,151,153,154,155,156,157,158,197,198,225,226,236,238,254,257,258,261,271,272,280,],[-98,-165,149,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-137,-140,-141,-142,-143,-146,-147,-133,-149,149,-139,-73,-165,-67,-99,-107,-163,-104,-152,-103,]),'DIVOP':([68,86,94,95,96,98,99,100,101,102,103,122,124,151,153,154,155,156,157,158,197,198,225,226,236,238,254,257,258,261,271,272,280,],[-98,-165,150,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-137,-140,-141,-142,-143,-146,-147,-133,-149,150,-139,-73,-165,-67,-99,-107,-163,-104,-152,-103,]),'SUMOP':([68,86,93,94,95,96,98,99,100,101,102,103,122,124,146,148,151,153,154,155,156,157,158,196,197,198,224,225,226,236,238,244,254,257,258,261,271,272,280,],[-98,-165,144,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-130,-132,-137,-140,-141,-142,-143,-146,-147,-125,-133,-149,144,-165,-139,-73,-165,-131,-67,-99,-107,-163,-104,-152,-103,]),'SUBOP':([68,71,73,84,86,93,94,95,96,97,98,99,100,101,102,103,111,120,121,122,123,124,126,129,132,135,137,138,139,140,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,168,169,170,171,172,173,174,175,196,197,198,212,217,224,225,226,236,238,244,254,256,257,258,261,270,271,272,280,],[-98,104,104,-65,-165,145,-165,-136,-138,-148,-150,-151,-150,-151,-144,-145,104,104,-79,-97,-101,-100,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-130,-148,-132,-134,-135,-137,104,-140,-141,-142,-143,-146,-147,104,104,104,104,104,104,104,104,104,-125,-133,-149,104,104,145,-165,-139,-73,-165,-131,-67,-105,-99,-107,-163,104,-104,-152,-103,]),'LESSTHANOP':([68,86,92,93,94,95,96,98,99,100,101,102,103,122,124,141,143,146,148,151,153,154,155,156,157,158,196,197,198,224,225,226,236,238,243,244,254,257,258,261,271,272,280,],[-98,-165,137,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-125,-133,-149,-165,-165,-139,-73,-165,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'GREATERTHANOP':([68,86,92,93,94,95,96,98,99,100,101,102,103,122,124,141,143,146,148,151,153,154,155,156,157,158,196,197,198,224,225,226,236,238,243,244,254,257,258,261,271,272,280,],[-98,-165,138,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-125,-133,-149,-165,-165,-139,-73,-165,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'DIFFERENTOP':([68,86,92,93,94,95,96,98,99,100,101,102,103,122,124,141,143,146,148,151,153,154,155,156,157,158,196,197,198,224,225,226,236,238,243,244,254,257,258,261,271,272,280,],[-98,-165,139,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-125,-133,-149,-165,-165,-139,-73,-165,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'EQUALOP':([68,86,92,93,94,95,96,98,99,100,101,102,103,122,124,141,143,146,148,151,153,154,155,156,157,158,196,197,198,224,225,226,236,238,243,244,254,257,258,261,271,272,280,],[-98,-165,140,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-125,-133,-149,-165,-165,-139,-73,-165,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'ANDOP':([68,86,91,92,93,94,95,96,98,99,100,101,102,103,122,124,134,136,141,143,146,148,151,153,154,155,156,157,158,194,195,196,197,198,222,223,224,225,226,236,238,243,244,254,257,258,261,271,272,280,],[-98,-165,132,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-113,-119,-125,-133,-149,132,-117,-165,-165,-139,-73,-165,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'OROP':([68,86,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,193,194,195,196,197,198,221,222,223,224,225,226,236,238,242,243,244,254,257,258,261,271,272,280,],[-98,-165,129,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-109,-113,-119,-125,-133,-149,129,-165,-117,-165,-165,-139,-73,-165,-114,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'TO':([68,86,90,91,92,93,94,95,96,98,99,100,101,102,103,112,122,124,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,193,194,195,196,197,198,221,222,223,224,225,226,236,238,241,242,243,244,254,257,258,261,271,272,280,],[-98,-165,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,161,-97,-100,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-73,-165,-110,-114,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'RIGHTPAR':([68,77,86,90,91,92,93,94,95,96,98,99,100,101,102,103,114,115,116,121,122,124,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,160,168,176,178,180,182,186,187,188,190,191,192,193,194,195,196,197,198,199,202,206,211,213,214,216,218,219,220,221,222,223,224,225,226,227,230,232,234,236,237,238,240,241,242,243,244,245,254,255,257,258,260,261,269,271,272,274,277,279,280,],[-98,-165,-165,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,163,-35,-36,-79,-97,-100,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,-89,-165,198,200,-98,-49,-165,-82,-69,-165,-82,-83,-109,-113,-119,-125,-133,-149,-98,-162,-165,236,-71,-68,239,-85,-80,-81,-165,-165,-117,-165,-165,-139,-162,250,-45,-47,-73,-82,-165,-165,-110,-114,-126,-131,261,-67,-165,-99,-107,-84,-163,-70,-104,-152,-49,-165,-46,-103,]),'DO':([68,86,90,91,92,93,94,95,96,98,99,100,101,102,103,122,124,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,179,193,194,195,196,197,198,221,222,223,224,225,226,236,238,241,242,243,244,254,257,258,261,271,272,280,],[-98,-165,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-97,-100,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,201,-109,-113,-119,-125,-133,-149,-165,-165,-117,-165,-165,-139,-73,-165,-110,-114,-126,-131,-67,-99,-107,-163,-104,-152,-103,]),'RIGHTBRACKET':([68,86,90,91,92,93,94,95,96,98,99,100,101,102,103,119,122,124,128,130,131,133,134,136,141,143,146,148,151,153,154,155,156,157,158,166,189,193,194,195,196,197,198,215,221,222,223,224,225,226,236,238,241,242,243,244,253,254,257,258,261,268,271,272,276,278,280,],[-98,-165,-165,-165,-165,-165,-165,-136,-138,-150,-151,-150,-151,-144,-145,-17,-97,-100,-108,-111,-112,-115,-116,-118,-124,-127,-130,-132,-137,-140,-141,-142,-143,-146,-147,184,-102,-109,-113,-119,-125,-133,-149,238,-165,-165,-117,-165,-165,-139,-73,-165,-110,-114,-126,-131,-21,-67,-99,-107,-163,275,-104,-152,-106,280,-103,]),'CTF':([71,73,84,97,104,111,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,161,168,169,170,171,172,173,174,175,212,217,256,270,],[99,99,-65,-148,158,99,99,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,99,99,99,99,99,99,99,99,99,99,99,99,-105,99,]),'MEAN':([71,73,84,97,111,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,161,168,169,170,171,172,173,174,175,212,217,256,270,],[106,106,-65,-148,106,106,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,106,106,106,106,106,106,106,106,106,106,106,106,-105,106,]),'MEDIAN':([71,73,84,97,111,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,161,168,169,170,171,172,173,174,175,212,217,256,270,],[107,107,-65,-148,107,107,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,107,107,107,107,107,107,107,107,107,107,107,107,-105,107,]),'MODE':([71,73,84,97,111,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,161,168,169,170,171,172,173,174,175,212,217,256,270,],[108,108,-65,-148,108,108,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,108,108,108,108,108,108,108,108,108,108,108,108,-105,108,]),'VARIANCE':([71,73,84,97,111,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,161,168,169,170,171,172,173,174,175,212,217,256,270,],[109,109,-65,-148,109,109,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,109,109,109,109,109,109,109,109,109,109,109,109,-105,109,]),'STDDEV':([71,73,84,97,111,120,121,123,126,129,132,135,137,138,139,140,142,144,145,147,149,150,152,161,168,169,170,171,172,173,174,175,212,217,256,270,],[110,110,-65,-148,110,110,-79,-101,-79,-148,-148,-148,-120,-121,-122,-123,-148,-128,-129,-148,-134,-135,110,110,110,110,110,110,110,110,110,110,110,110,-105,110,]),'CTSTRING':([126,170,217,],[-79,192,192,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programNP1':([2,],[3,]),'programNP2':([4,],[5,]),'programA':([6,],[7,]),'vars':([6,181,],[8,204,]),'empty':([6,7,12,27,42,45,48,52,77,86,90,91,92,93,94,168,181,183,184,186,190,206,221,222,224,225,228,238,240,255,277,],[9,13,13,38,49,55,49,80,116,124,130,133,136,143,148,188,205,80,210,213,218,234,130,133,143,148,248,258,218,213,234,]),'programB':([7,12,],[11,23,]),'funcion':([7,12,],[12,12,]),'varsA':([10,27,],[15,37,]),'varsB':([10,27,],[16,16,]),'tipoSimple':([10,14,27,77,233,],[18,25,18,117,252,]),'main':([11,],[21,]),'funcionA':([14,],[24,]),'varsNP2':([17,18,],[28,29,]),'tipoSimpleNP1':([19,20,],[30,31,]),'mainNP1':([22,],[32,]),'funcionNP1':([24,],[33,]),'funcionANP1':([25,26,],[34,35,]),'varsF':([27,],[36,]),'bloque':([32,200,229,231,263,],[41,228,249,251,273,]),'varsNP3':([39,40,118,],[44,45,165,]),'getGlobalMemReqs':([41,],[46,]),'bloqueA':([42,48,],[47,57,]),'estatuto':([42,48,],[48,48,]),'estatutoNP1':([42,48,],[50,50,]),'funcionNP2':([43,],[51,]),'varsNP6':([44,53,165,],[52,81,183,]),'varsC':([45,],[53,]),'estatutoA':([50,],[58,]),'asignacion':([50,],[59,]),'llamada':([50,71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[60,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'read':([50,],[61,]),'escritura':([50,],[62,]),'return':([50,],[63,]),'condicion':([50,],[64,]),'ciclo':([50,],[65,]),'specialGraph':([50,],[66,]),'variable':([50,71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[67,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'specialGraphFunc':([50,],[74,]),'varsE':([52,183,],[78,207,]),'varIsArray':([54,],[82,]),'checkIfVoid':([60,],[83,]),'llamadaNP1':([68,],[85,]),'variableNP1':([68,180,199,],[86,202,227,]),'escrituraNP1':([70,],[88,]),'exp':([71,73,111,120,152,161,168,169,170,212,217,270,],[89,112,160,167,176,179,187,189,191,237,191,276,]),'exp1':([71,73,111,120,152,161,168,169,170,171,212,217,270,],[90,90,90,90,90,90,90,90,90,193,90,90,90,]),'exp2':([71,73,111,120,152,161,168,169,170,171,172,212,217,270,],[91,91,91,91,91,91,91,91,91,91,194,91,91,91,]),'exp3':([71,73,111,120,152,161,168,169,170,171,172,173,212,217,270,],[92,92,92,92,92,92,92,92,92,92,92,195,92,92,92,]),'termino':([71,73,111,120,152,161,168,169,170,171,172,173,174,212,217,270,],[93,93,93,93,93,93,93,93,93,93,93,93,196,93,93,93,]),'terminoC':([71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[94,94,94,94,94,94,94,94,94,94,94,94,94,197,94,94,94,]),'factor':([71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'negative_int':([71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'negative_float':([71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'special':([71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'specialFunc':([71,73,111,120,152,161,168,169,170,171,172,173,174,175,212,217,270,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'addSpecialToStack':([74,105,],[113,159,]),'funcionB':([77,],[114,]),'params':([77,],[115,]),'asignacionNP1':([84,],[120,]),'variableA':([86,],[122,]),'readNP1':([87,],[125,]),'returnNP1':([89,],[127,]),'expA':([90,221,],[128,241,]),'exp1A':([91,222,],[131,242,]),'exp2A':([92,],[134,]),'exp2B':([92,],[135,]),'exp3A':([93,224,],[141,243,]),'exp3B':([93,224,],[142,142,]),'terminoA':([94,225,],[146,244,]),'terminoB':([94,225,],[147,147,]),'checkIfNotVoid':([96,],[151,]),'operNP1':([97,129,132,135,142,147,],[152,171,172,173,174,175,]),'factorNP2':([98,100,],[153,155,]),'factorNP3':([99,101,],[154,156,]),'paramsNP1':([117,252,],[164,267,]),'varsNP4':([119,],[166,]),'loeNP2':([121,126,],[168,170,]),'check_if_non_atomic':([123,],[169,]),'condicionNP1':([160,],[178,]),'asignacionNP2':([167,],[185,]),'primerparam':([168,],[186,]),'escrituraA':([170,217,],[190,240,]),'funcionC':([181,],[203,]),'paramsNP2':([182,274,],[206,277,]),'varsD':([184,],[209,]),'llamadaA':([186,255,],[211,269,]),'loeNP1':([187,191,237,],[214,219,255,]),'verify':([189,],[215,]),'escrituraB':([190,240,],[216,260,]),'escrituraNP2':([192,],[220,]),'expNP1':([193,],[221,]),'exp1NP1':([194,],[222,]),'exp2ANP1':([195,],[223,]),'exp3NP1':([196,],[224,]),'terminoANP1':([197,],[225,]),'factorNP1':([198,],[226,]),'cicloNP1':([201,],[229,]),'check_if_is_matrix':([202,227,],[230,245,]),'quadStart':([203,],[231,]),'paramsA':([206,277,],[232,279,]),'varIsMatrix':([208,],[235,]),'condicionA':([228,],[246,]),'llamadaNP3':([236,],[254,]),'variableB':([238,],[257,]),'escrituraNP3':([239,],[259,]),'condicionANP2':([246,],[262,]),'condicionANP1':([247,],[263,]),'cicloNP2':([249,],[264,]),'process_specialGraph':([250,],[265,]),'genMemReqs':([251,],[266,]),'varsNP5':([253,],[268,]),'check_if_matrix':([256,],[270,]),'on_matrix_check':([258,],[271,]),'process_special':([261,],[272,]),'verify_matrix':([276,],[278,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main','program',8,'p_program','sintaxis.py',353),
  ('programNP1 -> <empty>','programNP1',0,'p_programNP1','sintaxis.py',357),
  ('programNP2 -> <empty>','programNP2',0,'p_programNP2','sintaxis.py',384),
  ('programA -> vars','programA',1,'p_programA','sintaxis.py',393),
  ('programA -> empty','programA',1,'p_programA','sintaxis.py',394),
  ('programB -> funcion programB','programB',2,'p_programB','sintaxis.py',397),
  ('programB -> empty','programB',1,'p_programB','sintaxis.py',398),
  ('vars -> VAR varsA','vars',2,'p_vars','sintaxis.py',401),
  ('varsA -> varsB SEMICOLON varsF','varsA',3,'p_varsA','sintaxis.py',404),
  ('varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE','varsB',6,'p_varsB','sintaxis.py',407),
  ('varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6','varsB',6,'p_varsB','sintaxis.py',408),
  ('varsNP2 -> <empty>','varsNP2',0,'p_varsNP2','sintaxis.py',412),
  ('varsNP6 -> <empty>','varsNP6',0,'p_varsNP6','sintaxis.py',424),
  ('varsC -> LEFTBRACKET varIsArray CTI varsNP4 RIGHTBRACKET varsD','varsC',6,'p_varsC','sintaxis.py',447),
  ('varsC -> empty','varsC',1,'p_varsC','sintaxis.py',448),
  ('varIsArray -> <empty>','varIsArray',0,'p_varIsArray','sintaxis.py',451),
  ('varsNP4 -> <empty>','varsNP4',0,'p_varsNP4','sintaxis.py',459),
  ('varsD -> LEFTBRACKET varIsMatrix CTI varsNP5 RIGHTBRACKET','varsD',5,'p_varsD','sintaxis.py',471),
  ('varsD -> empty','varsD',1,'p_varsD','sintaxis.py',472),
  ('varIsMatrix -> <empty>','varIsMatrix',0,'p_varIsMatrix','sintaxis.py',475),
  ('varsNP5 -> <empty>','varsNP5',0,'p_varsNP5','sintaxis.py',485),
  ('varsE -> COMMA ID varsNP3 varsNP6 varsE','varsE',5,'p_varsE','sintaxis.py',497),
  ('varsE -> empty','varsE',1,'p_varsE','sintaxis.py',498),
  ('varsNP3 -> <empty>','varsNP3',0,'p_varsNP3','sintaxis.py',502),
  ('varsF -> varsA','varsF',1,'p_varsF','sintaxis.py',507),
  ('varsF -> empty','varsF',1,'p_varsF','sintaxis.py',508),
  ('funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs','funcion',13,'p_funcion','sintaxis.py',511),
  ('quadStart -> <empty>','quadStart',0,'p_quadStart','sintaxis.py',514),
  ('genMemReqs -> <empty>','genMemReqs',0,'p_genMemReqs','sintaxis.py',518),
  ('funcionNP1 -> <empty>','funcionNP1',0,'p_funcionNP1','sintaxis.py',529),
  ('funcionNP2 -> <empty>','funcionNP2',0,'p_funcionNP2','sintaxis.py',543),
  ('funcionA -> tipoSimple funcionANP1','funcionA',2,'p_funcionA','sintaxis.py',562),
  ('funcionA -> VOID funcionANP1','funcionA',2,'p_funcionA','sintaxis.py',563),
  ('funcionANP1 -> <empty>','funcionANP1',0,'p_funcionANP1','sintaxis.py',567),
  ('funcionB -> params','funcionB',1,'p_funcionB','sintaxis.py',572),
  ('funcionB -> empty','funcionB',1,'p_funcionB','sintaxis.py',573),
  ('funcionC -> vars','funcionC',1,'p_funcionC','sintaxis.py',576),
  ('funcionC -> empty','funcionC',1,'p_funcionC','sintaxis.py',577),
  ('main -> MAINSTART mainNP1 bloque getGlobalMemReqs','main',4,'p_main','sintaxis.py',580),
  ('getGlobalMemReqs -> <empty>','getGlobalMemReqs',0,'p_getGlobalMemReqs','sintaxis.py',583),
  ('mainNP1 -> <empty>','mainNP1',0,'p_mainNP1','sintaxis.py',590),
  ('tipoSimple -> INT tipoSimpleNP1','tipoSimple',2,'p_tipoSimple','sintaxis.py',602),
  ('tipoSimple -> FLOAT tipoSimpleNP1','tipoSimple',2,'p_tipoSimple','sintaxis.py',603),
  ('tipoSimpleNP1 -> <empty>','tipoSimpleNP1',0,'p_tipoSimpleNP1','sintaxis.py',607),
  ('params -> tipoSimple paramsNP1 ID paramsNP2 paramsA','params',5,'p_params','sintaxis.py',612),
  ('paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA','paramsA',6,'p_paramsA','sintaxis.py',615),
  ('paramsA -> empty','paramsA',1,'p_paramsA','sintaxis.py',616),
  ('paramsNP1 -> <empty>','paramsNP1',0,'p_paramsNP1','sintaxis.py',621),
  ('paramsNP2 -> <empty>','paramsNP2',0,'p_paramsNP2','sintaxis.py',627),
  ('bloque -> LEFTCURLY bloqueA RIGHTCURLY','bloque',3,'p_bloque','sintaxis.py',639),
  ('bloqueA -> estatuto bloqueA','bloqueA',2,'p_bloqueA','sintaxis.py',642),
  ('bloqueA -> empty','bloqueA',1,'p_bloqueA','sintaxis.py',643),
  ('estatuto -> estatutoNP1 estatutoA','estatuto',2,'p_estatuto','sintaxis.py',646),
  ('estatutoA -> asignacion','estatutoA',1,'p_estatutoA','sintaxis.py',652),
  ('estatutoA -> llamada checkIfVoid','estatutoA',2,'p_estatutoA','sintaxis.py',653),
  ('estatutoA -> read','estatutoA',1,'p_estatutoA','sintaxis.py',654),
  ('estatutoA -> escritura','estatutoA',1,'p_estatutoA','sintaxis.py',655),
  ('estatutoA -> return','estatutoA',1,'p_estatutoA','sintaxis.py',656),
  ('estatutoA -> condicion','estatutoA',1,'p_estatutoA','sintaxis.py',657),
  ('estatutoA -> ciclo','estatutoA',1,'p_estatutoA','sintaxis.py',658),
  ('estatutoA -> specialGraph','estatutoA',1,'p_estatutoA','sintaxis.py',659),
  ('checkIfVoid -> <empty>','checkIfVoid',0,'p_checkIfVoid','sintaxis.py',662),
  ('estatutoNP1 -> <empty>','estatutoNP1',0,'p_estatutoNP1','sintaxis.py',668),
  ('asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2','asignacion',5,'p_asignacion','sintaxis.py',677),
  ('asignacionNP1 -> <empty>','asignacionNP1',0,'p_asignacionNP1','sintaxis.py',681),
  ('asignacionNP2 -> <empty>','asignacionNP2',0,'p_asignacionNP2','sintaxis.py',686),
  ('llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3','llamada',8,'p_llamada','sintaxis.py',690),
  ('primerparam -> exp loeNP1','primerparam',2,'p_primerparam','sintaxis.py',696),
  ('primerparam -> empty','primerparam',1,'p_primerparam','sintaxis.py',697),
  ('llamadaA -> COMMA exp loeNP1 llamadaA','llamadaA',4,'p_llamadaA','sintaxis.py',700),
  ('llamadaA -> empty','llamadaA',1,'p_llamadaA','sintaxis.py',701),
  ('llamadaNP1 -> <empty>','llamadaNP1',0,'p_llamadaNP1','sintaxis.py',711),
  ('llamadaNP3 -> <empty>','llamadaNP3',0,'p_llamadaNP3','sintaxis.py',732),
  ('read -> READ ID readNP1','read',3,'p_read','sintaxis.py',743),
  ('readNP1 -> <empty>','readNP1',0,'p_readNP1','sintaxis.py',746),
  ('escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3','escritura',8,'p_escritura','sintaxis.py',761),
  ('escrituraNP1 -> <empty>','escrituraNP1',0,'p_escrituraNP1','sintaxis.py',766),
  ('escrituraNP3 -> <empty>','escrituraNP3',0,'p_escrituraNP3','sintaxis.py',770),
  ('loeNP2 -> <empty>','loeNP2',0,'p_loeNP2','sintaxis.py',779),
  ('escrituraA -> exp loeNP1','escrituraA',2,'p_escrituraA','sintaxis.py',788),
  ('escrituraA -> CTSTRING escrituraNP2','escrituraA',2,'p_escrituraA','sintaxis.py',789),
  ('loeNP1 -> <empty>','loeNP1',0,'p_loeNP1','sintaxis.py',796),
  ('escrituraNP2 -> <empty>','escrituraNP2',0,'p_escrituraNP2','sintaxis.py',813),
  ('escrituraB -> COMMA escrituraA escrituraB','escrituraB',3,'p_escrituraB','sintaxis.py',827),
  ('escrituraB -> empty','escrituraB',1,'p_escrituraB','sintaxis.py',828),
  ('return -> RETURN exp returnNP1','return',3,'p_return','sintaxis.py',831),
  ('returnNP1 -> <empty>','returnNP1',0,'p_returnNP1','sintaxis.py',834),
  ('condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2','condicion',8,'p_condicion','sintaxis.py',852),
  ('condicionNP1 -> <empty>','condicionNP1',0,'p_condicionNP1','sintaxis.py',855),
  ('condicionA -> ELSE condicionANP1 bloque','condicionA',3,'p_condicionA','sintaxis.py',861),
  ('condicionA -> empty','condicionA',1,'p_condicionA','sintaxis.py',862),
  ('condicionANP1 -> <empty>','condicionANP1',0,'p_condicionANP1','sintaxis.py',865),
  ('condicionANP2 -> <empty>','condicionANP2',0,'p_condicionANP2','sintaxis.py',875),
  ('ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2','ciclo',8,'p_ciclo','sintaxis.py',886),
  ('cicloNP1 -> <empty>','cicloNP1',0,'p_cicloNP1','sintaxis.py',889),
  ('cicloNP2 -> <empty>','cicloNP2',0,'p_cicloNP2','sintaxis.py',918),
  ('variable -> ID variableNP1 variableA','variable',3,'p_variable','sintaxis.py',944),
  ('variableNP1 -> <empty>','variableNP1',0,'p_variableNP1','sintaxis.py',951),
  ('variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB','variableA',6,'p_variableA','sintaxis.py',966),
  ('variableA -> empty','variableA',1,'p_variableA','sintaxis.py',967),
  ('check_if_non_atomic -> <empty>','check_if_non_atomic',0,'p_check_if_non_atomic','sintaxis.py',970),
  ('verify -> <empty>','verify',0,'p_verify','sintaxis.py',992),
  ('variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET','variableB',5,'p_variableB','sintaxis.py',1018),
  ('variableB -> empty on_matrix_check','variableB',2,'p_variableB','sintaxis.py',1019),
  ('check_if_matrix -> <empty>','check_if_matrix',0,'p_check_if_matrix','sintaxis.py',1022),
  ('verify_matrix -> <empty>','verify_matrix',0,'p_verify_matrix','sintaxis.py',1035),
  ('on_matrix_check -> <empty>','on_matrix_check',0,'p_on_matrix_check','sintaxis.py',1057),
  ('exp -> exp1 expA','exp',2,'p_exp','sintaxis.py',1063),
  ('expNP1 -> <empty>','expNP1',0,'p_expNP1','sintaxis.py',1066),
  ('expA -> OROP operNP1 exp1 expNP1 expA','expA',5,'p_expA','sintaxis.py',1071),
  ('expA -> empty','expA',1,'p_expA','sintaxis.py',1072),
  ('exp1 -> exp2 exp1A','exp1',2,'p_exp1','sintaxis.py',1075),
  ('exp1NP1 -> <empty>','exp1NP1',0,'p_exp1NP1','sintaxis.py',1078),
  ('exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A','exp1A',5,'p_exp1A','sintaxis.py',1083),
  ('exp1A -> empty','exp1A',1,'p_exp1A','sintaxis.py',1084),
  ('exp2 -> exp3 exp2A','exp2',2,'p_exp2','sintaxis.py',1087),
  ('exp2A -> exp2B operNP1 exp3 exp2ANP1','exp2A',4,'p_exp2A','sintaxis.py',1090),
  ('exp2A -> empty','exp2A',1,'p_exp2A','sintaxis.py',1091),
  ('exp2ANP1 -> <empty>','exp2ANP1',0,'p_exp2ANP1','sintaxis.py',1094),
  ('exp2B -> LESSTHANOP','exp2B',1,'p_exp2B','sintaxis.py',1098),
  ('exp2B -> GREATERTHANOP','exp2B',1,'p_exp2B','sintaxis.py',1099),
  ('exp2B -> DIFFERENTOP','exp2B',1,'p_exp2B','sintaxis.py',1100),
  ('exp2B -> EQUALOP','exp2B',1,'p_exp2B','sintaxis.py',1101),
  ('exp3 -> termino exp3A','exp3',2,'p_exp3','sintaxis.py',1105),
  ('exp3NP1 -> <empty>','exp3NP1',0,'p_exp3NP1','sintaxis.py',1108),
  ('exp3A -> exp3B operNP1 termino exp3NP1 exp3A','exp3A',5,'p_exp3A','sintaxis.py',1113),
  ('exp3A -> empty','exp3A',1,'p_exp3A','sintaxis.py',1114),
  ('exp3B -> SUMOP','exp3B',1,'p_exp3B','sintaxis.py',1117),
  ('exp3B -> SUBOP','exp3B',1,'p_exp3B','sintaxis.py',1118),
  ('termino -> terminoC terminoA','termino',2,'p_termino','sintaxis.py',1122),
  ('terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA','terminoA',5,'p_terminoA','sintaxis.py',1125),
  ('terminoA -> empty','terminoA',1,'p_terminoA','sintaxis.py',1126),
  ('terminoANP1 -> <empty>','terminoANP1',0,'p_terminoANP1','sintaxis.py',1129),
  ('terminoB -> MULOP','terminoB',1,'p_terminoB','sintaxis.py',1134),
  ('terminoB -> DIVOP','terminoB',1,'p_terminoB','sintaxis.py',1135),
  ('terminoC -> factor','terminoC',1,'p_terminoC','sintaxis.py',1139),
  ('terminoC -> llamada checkIfNotVoid','terminoC',2,'p_terminoC','sintaxis.py',1140),
  ('checkIfNotVoid -> <empty>','checkIfNotVoid',0,'p_checkIfNotVoid','sintaxis.py',1143),
  ('factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1','factor',5,'p_factor','sintaxis.py',1148),
  ('factor -> CTI factorNP2','factor',2,'p_factor','sintaxis.py',1149),
  ('factor -> CTF factorNP3','factor',2,'p_factor','sintaxis.py',1150),
  ('factor -> negative_int factorNP2','factor',2,'p_factor','sintaxis.py',1151),
  ('factor -> negative_float factorNP3','factor',2,'p_factor','sintaxis.py',1152),
  ('factor -> variable','factor',1,'p_factor','sintaxis.py',1153),
  ('factor -> special','factor',1,'p_factor','sintaxis.py',1154),
  ('negative_int -> SUBOP CTI','negative_int',2,'p_negative_int','sintaxis.py',1157),
  ('negative_float -> SUBOP CTF','negative_float',2,'p_negative_float','sintaxis.py',1162),
  ('operNP1 -> <empty>','operNP1',0,'p_operNP1','sintaxis.py',1168),
  ('factorNP1 -> <empty>','factorNP1',0,'p_factorNP1','sintaxis.py',1174),
  ('factorNP2 -> <empty>','factorNP2',0,'p_factorNP2','sintaxis.py',1178),
  ('factorNP3 -> <empty>','factorNP3',0,'p_factorNP3','sintaxis.py',1188),
  ('special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special','special',8,'p_special','sintaxis.py',1198),
  ('specialFunc -> MEAN','specialFunc',1,'p_specialFunc','sintaxis.py',1201),
  ('specialFunc -> MEDIAN','specialFunc',1,'p_specialFunc','sintaxis.py',1202),
  ('specialFunc -> MODE','specialFunc',1,'p_specialFunc','sintaxis.py',1203),
  ('specialFunc -> VARIANCE','specialFunc',1,'p_specialFunc','sintaxis.py',1204),
  ('specialFunc -> STDDEV','specialFunc',1,'p_specialFunc','sintaxis.py',1205),
  ('specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph','specialGraph',8,'p_specialGraph','sintaxis.py',1209),
  ('specialGraphFunc -> HISTOGRAM','specialGraphFunc',1,'p_specialGraphFunc','sintaxis.py',1212),
  ('specialGraphFunc -> BOXPLOT','specialGraphFunc',1,'p_specialGraphFunc','sintaxis.py',1213),
  ('addSpecialToStack -> <empty>','addSpecialToStack',0,'p_addSpecialToStack','sintaxis.py',1217),
  ('check_if_is_matrix -> <empty>','check_if_is_matrix',0,'p_check_if_is_matrix','sintaxis.py',1221),
  ('process_special -> <empty>','process_special',0,'p_process_special','sintaxis.py',1240),
  ('process_specialGraph -> <empty>','process_specialGraph',0,'p_process_specialGraph','sintaxis.py',1244),
  ('empty -> <empty>','empty',0,'p_empty','sintaxis.py',1249),
]
