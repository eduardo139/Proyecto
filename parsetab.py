
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ANDOP ASSIGNOP COMMA CTF CTI CTSTRING DIFFERENTOP DIVOP DO ELSE EQUALOP FILE FLOAT FROM FUNC GREATERTHANOP ID IF INT LEFTBRACKET LEFTCURLY LEFTPAR LESSTHANOP MAINSTART MULOP OROP PROGRAM READ RIGHTBRACKET RIGHTCURLY RIGHTPAR SEMICOLON SUBOP SUMOP TO VAR VOID WRITEprogram : PROGRAM programNP1 ID programNP2 SEMICOLON programA programB mainprogramNP1 :programNP2 :programA : vars\n                    | emptyprogramB : funcion programB\n                    | emptyvars : varsNP1 VAR varsA varsNP7varsNP7 :varsNP1 :varsA : varsB SEMICOLON varsFvarsB : FILE varsNP2 ID varsNP3 varsNP6 varsE\n                | tipoSimple varsNP2 ID varsNP3 varsC varsNP6varsNP2 :varsNP6 :varsC : LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD\n                | emptyvarsNP4 :varsD : LEFTBRACKET CTI varsNP5 RIGHTBRACKET\n                | emptyvarsNP5 :varsE : COMMA ID varsNP3 varsNP6 varsE\n                | emptyvarsNP3 :varsF : varsA\n                | emptyfuncion : FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloquefuncionNP1 :funcionNP2 :funcionA : tipoSimple funcionANP1\n                    | VOID funcionANP1funcionANP1 :funcionB : params\n                    | emptyfuncionC : vars\n                    | emptymain : MAINSTART mainNP1 bloquemainNP1 :tipoSimple : INT tipoSimpleNP1\n                    | FLOAT tipoSimpleNP1tipoSimpleNP1 :params : tipoSimple paramsNP1 ID paramsAparamsA : COMMA tipoSimple paramsNP1 ID paramsA\n                | emptyparamsNP1 :bloque : LEFTCURLY bloqueA RIGHTCURLYbloqueA : estatuto bloqueA\n                | emptyestatuto : estatutoNP1 estatutoAestatutoA : asignacion \n                | llamada\n                | read\n                | escritura\n                | condicion\n                | cicloestatutoNP1 : asignacion : variable ASSIGNOP asignacionNP1 exp asignacionNP2asignacionNP1 : asignacionNP2 : llamada : ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3primerparam : exp loeNP1\n                    | emptyllamadaA : COMMA exp loeNP1 llamadaA\n                | emptyllamadaNP1 :llamadaNP3 :read : READ ID readNP1readNP1 :escritura : WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3escrituraNP1 :escrituraNP3 :loeNP2 :escrituraA : exp loeNP1\n                    | CTSTRING escrituraNP2loeNP1 :escrituraNP2 :escrituraB : COMMA escrituraA escrituraB\n                    | emptycondicion : IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionAcondicionNP1 :condicionA : ELSE condicionANP1 bloque condicionANP2\n                    | emptycondicionANP1 :condicionANP2 :ciclo : FROM exp TO exp DO bloquevariable : ID variableNP1 variableAvariableNP1 :variableA : LEFTBRACKET exp RIGHTBRACKET variableB\n                    | emptyvariableB : LEFTBRACKET exp RIGHTBRACKET\n                    | emptyexp : exp1 expAexpNP1 :expA : OROP operNP1 exp1 expNP1 expA\n                | emptyexp1 : exp2 exp1Aexp1NP1 :exp1A : ANDOP operNP1 exp2 exp1NP1 exp1A\n                | emptyexp2 : exp3 exp2Aexp2A : exp2B operNP1 exp3 exp2ANP1\n                | emptyexp2ANP1 :exp2B : LESSTHANOP\n                | GREATERTHANOP\n                | DIFFERENTOP\n                | EQUALOPexp3 : termino exp3Aexp3NP1 :exp3A : exp3B operNP1 termino exp3NP1 exp3A\n                | emptyexp3B : SUMOP\n                | SUBOPtermino : terminoC terminoAterminoA : terminoB operNP1 terminoC terminoANP1 terminoA\n                    | emptyterminoANP1 :terminoB : MULOP\n                    | DIVOPterminoC : factor\n                    | llamadafactor : LEFTPAR operNP1 exp RIGHTPAR factorNP1\n                | CTI factorNP2\n                | CTF factorNP3\n                | variableoperNP1 :factorNP1 :factorNP2 :factorNP3 :empty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,16,38,53,],[0,-1,-37,-46,]),'ID':([2,3,19,20,21,22,23,26,27,29,30,31,32,33,36,37,39,47,49,53,55,56,57,58,59,60,61,63,64,67,73,75,76,78,80,81,82,83,84,85,86,87,88,89,90,94,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,139,140,142,145,146,147,148,149,155,159,165,166,167,168,169,170,182,185,186,187,189,193,194,195,196,197,198,199,200,202,205,208,210,212,213,214,215,216,217,219,221,222,228,230,],[-2,4,-28,-32,-32,-41,-41,-14,-14,40,-30,-31,-39,-40,44,45,-56,-56,63,-46,-49,-50,-51,-52,-53,-54,-55,-87,76,63,-58,-130,-68,63,-130,-130,-130,-130,-130,-120,-121,-126,-128,-129,-125,-45,137,63,-72,-86,63,-89,-67,-72,63,-92,-126,-95,-96,-126,-99,-100,-126,-102,-104,-105,-106,-107,-108,-126,-111,-112,-113,-114,-126,-116,-118,-119,63,-123,-124,152,-59,63,63,63,63,63,63,63,-57,-130,-93,-97,-103,-109,-117,-127,63,63,-88,-91,63,-130,-85,-130,-130,-101,-130,-130,-122,-45,-66,-71,-79,-82,-94,-98,-110,-115,225,-60,-90,-69,-84,-81,]),'SEMICOLON':([4,5,25,44,45,51,52,69,70,72,95,97,98,135,137,153,154,177,179,180,203,226,],[-3,6,35,-24,-24,-15,-130,-130,-15,-17,-12,-23,-13,151,-24,-15,-130,-130,-16,-20,-22,-19,]),'FUNC':([6,7,8,9,12,24,34,35,41,42,43,53,201,],[-130,14,-4,-5,14,-9,-8,-130,-11,-25,-26,-46,-27,]),'MAINSTART':([6,7,8,9,11,12,13,18,24,34,35,41,42,43,53,201,],[-130,-130,-4,-5,17,-130,-7,-6,-9,-8,-130,-11,-25,-26,-46,-27,]),'VAR':([6,10,151,],[-10,15,-10,]),'VOID':([14,],[21,]),'INT':([14,15,35,68,175,],[22,22,22,22,22,]),'FLOAT':([14,15,35,68,175,],[23,23,23,23,23,]),'FILE':([15,35,],[26,26,]),'LEFTCURLY':([17,24,28,34,35,41,42,43,151,163,164,171,172,173,211,224,],[-38,-9,39,-8,-130,-11,-25,-26,-130,39,39,39,-35,-36,-83,39,]),'RIGHTCURLY':([39,46,47,48,53,54,55,56,57,58,59,60,61,63,75,76,80,81,82,83,84,85,86,88,89,90,102,104,105,109,111,112,114,115,117,122,124,127,129,133,134,139,155,159,165,166,167,168,169,170,186,187,193,194,195,196,197,198,199,200,205,208,210,212,213,214,215,216,219,221,222,228,230,],[-130,53,-130,-48,-46,-47,-49,-50,-51,-52,-53,-54,-55,-87,-130,-68,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-67,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-59,-57,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-85,-130,-130,-101,-130,-130,-122,-66,-71,-79,-82,-94,-98,-110,-115,-60,-90,-69,-84,-81,]),'READ':([39,47,49,53,55,56,57,58,59,60,61,63,75,76,80,81,82,83,84,85,86,88,89,90,102,104,105,109,111,112,114,115,117,122,124,127,129,133,134,139,155,159,165,166,167,168,169,170,186,187,193,194,195,196,197,198,199,200,205,208,210,212,213,214,215,216,219,221,222,228,230,],[-56,-56,64,-46,-49,-50,-51,-52,-53,-54,-55,-87,-130,-68,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-67,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-59,-57,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-85,-130,-130,-101,-130,-130,-122,-66,-71,-79,-82,-94,-98,-110,-115,-60,-90,-69,-84,-81,]),'WRITE':([39,47,49,53,55,56,57,58,59,60,61,63,75,76,80,81,82,83,84,85,86,88,89,90,102,104,105,109,111,112,114,115,117,122,124,127,129,133,134,139,155,159,165,166,167,168,169,170,186,187,193,194,195,196,197,198,199,200,205,208,210,212,213,214,215,216,219,221,222,228,230,],[-56,-56,65,-46,-49,-50,-51,-52,-53,-54,-55,-87,-130,-68,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-67,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-59,-57,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-85,-130,-130,-101,-130,-130,-122,-66,-71,-79,-82,-94,-98,-110,-115,-60,-90,-69,-84,-81,]),'IF':([39,47,49,53,55,56,57,58,59,60,61,63,75,76,80,81,82,83,84,85,86,88,89,90,102,104,105,109,111,112,114,115,117,122,124,127,129,133,134,139,155,159,165,166,167,168,169,170,186,187,193,194,195,196,197,198,199,200,205,208,210,212,213,214,215,216,219,221,222,228,230,],[-56,-56,66,-46,-49,-50,-51,-52,-53,-54,-55,-87,-130,-68,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-67,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-59,-57,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-85,-130,-130,-101,-130,-130,-122,-66,-71,-79,-82,-94,-98,-110,-115,-60,-90,-69,-84,-81,]),'FROM':([39,47,49,53,55,56,57,58,59,60,61,63,75,76,80,81,82,83,84,85,86,88,89,90,102,104,105,109,111,112,114,115,117,122,124,127,129,133,134,139,155,159,165,166,167,168,169,170,186,187,193,194,195,196,197,198,199,200,205,208,210,212,213,214,215,216,219,221,222,228,230,],[-56,-56,67,-46,-49,-50,-51,-52,-53,-54,-55,-87,-130,-68,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-67,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-59,-57,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-85,-130,-130,-101,-130,-130,-122,-66,-71,-79,-82,-94,-98,-110,-115,-60,-90,-69,-84,-81,]),'LEFTPAR':([40,50,63,65,66,67,73,74,77,78,87,100,101,103,106,108,110,113,116,118,119,120,121,123,125,126,128,130,131,132,140,142,145,146,147,148,149,182,185,189,],[-29,68,-65,-70,78,87,-58,101,106,87,-126,87,-72,87,-72,87,-126,-126,-126,-104,-105,-106,-107,-126,-112,-113,-126,-118,-119,87,87,87,87,87,87,87,87,87,87,87,]),'COMMA':([44,51,63,69,75,80,81,82,83,84,85,86,88,89,90,101,102,104,109,111,112,114,115,117,122,124,127,129,133,134,137,140,152,153,156,157,158,159,160,161,162,165,166,167,168,169,170,177,184,186,187,191,192,195,196,197,198,199,200,205,206,209,213,214,215,216,219,220,221,225,],[-24,-15,-87,96,-130,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-72,-86,-89,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-24,-130,175,-15,182,-75,-62,-130,189,-75,-76,-93,-97,-103,-109,-117,-127,96,-61,-88,-91,-73,-74,-130,-130,-101,-130,-130,-122,-66,-75,189,-94,-98,-110,-115,-60,182,-90,175,]),'LEFTBRACKET':([45,52,63,75,154,159,],[-24,71,-87,103,178,185,]),'ELSE':([53,193,],[-46,211,]),'ASSIGNOP':([62,63,75,102,104,159,186,187,221,],[73,-87,-130,-86,-89,-130,-88,-91,-90,]),'MULOP':([63,75,84,85,86,88,89,90,102,104,133,134,159,169,170,186,187,199,200,205,219,221,],[-87,-130,130,-120,-121,-128,-129,-125,-86,-89,-123,-124,-130,-117,-127,-88,-91,130,-122,-66,-60,-90,]),'DIVOP':([63,75,84,85,86,88,89,90,102,104,133,134,159,169,170,186,187,199,200,205,219,221,],[-87,-130,131,-120,-121,-128,-129,-125,-86,-89,-123,-124,-130,-117,-127,-88,-91,131,-122,-66,-60,-90,]),'SUMOP':([63,75,83,84,85,86,88,89,90,102,104,127,129,133,134,159,168,169,170,186,187,198,199,200,205,216,219,221,],[-87,-130,125,-130,-120,-121,-128,-129,-125,-86,-89,-114,-116,-123,-124,-130,-109,-117,-127,-88,-91,125,-130,-122,-66,-115,-60,-90,]),'SUBOP':([63,75,83,84,85,86,88,89,90,102,104,127,129,133,134,159,168,169,170,186,187,198,199,200,205,216,219,221,],[-87,-130,126,-130,-120,-121,-128,-129,-125,-86,-89,-114,-116,-123,-124,-130,-109,-117,-127,-88,-91,126,-130,-122,-66,-115,-60,-90,]),'LESSTHANOP':([63,75,82,83,84,85,86,88,89,90,102,104,122,124,127,129,133,134,159,168,169,170,186,187,198,199,200,205,215,216,219,221,],[-87,-130,118,-130,-130,-120,-121,-128,-129,-125,-86,-89,-108,-111,-114,-116,-123,-124,-130,-109,-117,-127,-88,-91,-130,-130,-122,-66,-110,-115,-60,-90,]),'GREATERTHANOP':([63,75,82,83,84,85,86,88,89,90,102,104,122,124,127,129,133,134,159,168,169,170,186,187,198,199,200,205,215,216,219,221,],[-87,-130,119,-130,-130,-120,-121,-128,-129,-125,-86,-89,-108,-111,-114,-116,-123,-124,-130,-109,-117,-127,-88,-91,-130,-130,-122,-66,-110,-115,-60,-90,]),'DIFFERENTOP':([63,75,82,83,84,85,86,88,89,90,102,104,122,124,127,129,133,134,159,168,169,170,186,187,198,199,200,205,215,216,219,221,],[-87,-130,120,-130,-130,-120,-121,-128,-129,-125,-86,-89,-108,-111,-114,-116,-123,-124,-130,-109,-117,-127,-88,-91,-130,-130,-122,-66,-110,-115,-60,-90,]),'EQUALOP':([63,75,82,83,84,85,86,88,89,90,102,104,122,124,127,129,133,134,159,168,169,170,186,187,198,199,200,205,215,216,219,221,],[-87,-130,121,-130,-130,-120,-121,-128,-129,-125,-86,-89,-108,-111,-114,-116,-123,-124,-130,-109,-117,-127,-88,-91,-130,-130,-122,-66,-110,-115,-60,-90,]),'ANDOP':([63,75,81,82,83,84,85,86,88,89,90,102,104,115,117,122,124,127,129,133,134,159,166,167,168,169,170,186,187,196,197,198,199,200,205,215,216,219,221,],[-87,-130,113,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-100,-102,-108,-111,-114,-116,-123,-124,-130,-97,-103,-109,-117,-127,-88,-91,113,-101,-130,-130,-122,-66,-110,-115,-60,-90,]),'OROP':([63,75,80,81,82,83,84,85,86,88,89,90,102,104,112,114,115,117,122,124,127,129,133,134,159,165,166,167,168,169,170,186,187,195,196,197,198,199,200,205,214,215,216,219,221,],[-87,-130,110,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-130,-93,-97,-103,-109,-117,-127,-88,-91,110,-130,-101,-130,-130,-122,-66,-98,-110,-115,-60,-90,]),'TO':([63,75,79,80,81,82,83,84,85,86,88,89,90,102,104,109,111,112,114,115,117,122,124,127,129,133,134,159,165,166,167,168,169,170,186,187,195,196,197,198,199,200,205,213,214,215,216,219,221,],[-87,-130,108,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-130,-101,-130,-130,-122,-66,-94,-98,-110,-115,-60,-90,]),'RIGHTPAR':([63,68,75,80,81,82,83,84,85,86,88,89,90,91,92,93,101,102,104,107,109,111,112,114,115,117,122,124,127,129,133,134,140,143,150,152,156,157,158,159,160,161,162,165,166,167,168,169,170,174,176,181,183,184,186,187,188,190,191,192,195,196,197,198,199,200,205,206,209,213,214,215,216,219,220,221,223,225,227,229,],[-87,-130,-130,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,135,-33,-34,-72,-86,-89,-80,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,-130,163,170,-130,-130,-75,-62,-130,-130,-75,-76,-93,-97,-103,-109,-117,-127,-42,-44,205,-64,-61,-88,-91,208,-78,-73,-74,-130,-130,-101,-130,-130,-122,-66,-75,-130,-94,-98,-110,-115,-60,-130,-90,-77,-130,-63,-43,]),'RIGHTBRACKET':([63,75,80,81,82,83,84,85,86,88,89,90,99,102,104,109,111,112,114,115,117,122,124,127,129,133,134,138,141,159,165,166,167,168,169,170,186,187,195,196,197,198,199,200,204,205,207,213,214,215,216,218,219,221,],[-87,-130,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-18,-86,-89,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,154,159,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-130,-101,-130,-130,-122,-21,-66,221,-94,-98,-110,-115,226,-60,-90,]),'DO':([63,75,80,81,82,83,84,85,86,88,89,90,102,104,109,111,112,114,115,117,122,124,127,129,133,134,144,159,165,166,167,168,169,170,186,187,195,196,197,198,199,200,205,213,214,215,216,219,221,],[-87,-130,-130,-130,-130,-130,-130,-120,-121,-128,-129,-125,-86,-89,-92,-95,-96,-99,-100,-102,-108,-111,-114,-116,-123,-124,164,-130,-93,-97,-103,-109,-117,-127,-88,-91,-130,-130,-101,-130,-130,-122,-66,-94,-98,-110,-115,-60,-90,]),'CTI':([67,71,73,78,87,100,101,103,106,108,110,113,116,118,119,120,121,123,125,126,128,130,131,132,140,142,145,146,147,148,149,178,182,185,189,],[88,99,-58,88,-126,88,-72,88,-72,88,-126,-126,-126,-104,-105,-106,-107,-126,-112,-113,-126,-118,-119,88,88,88,88,88,88,88,88,204,88,88,88,]),'CTF':([67,73,78,87,100,101,103,106,108,110,113,116,118,119,120,121,123,125,126,128,130,131,132,140,142,145,146,147,148,149,182,185,189,],[89,-58,89,-126,89,-72,89,-72,89,-126,-126,-126,-104,-105,-106,-107,-126,-112,-113,-126,-118,-119,89,89,89,89,89,89,89,89,89,89,89,]),'CTSTRING':([106,142,189,],[-72,162,162,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programNP1':([2,],[3,]),'programNP2':([4,],[5,]),'programA':([6,],[7,]),'vars':([6,151,],[8,172,]),'empty':([6,7,12,35,39,47,52,68,69,75,80,81,82,83,84,140,151,152,154,156,159,160,177,193,195,196,198,199,209,220,225,],[9,13,13,43,48,48,72,93,97,104,111,114,117,124,129,158,173,176,180,183,187,190,97,212,111,114,124,129,190,183,176,]),'varsNP1':([6,151,],[10,10,]),'programB':([7,12,],[11,18,]),'funcion':([7,12,],[12,12,]),'main':([11,],[16,]),'funcionA':([14,],[19,]),'tipoSimple':([14,15,35,68,175,],[20,27,27,94,202,]),'varsA':([15,35,],[24,42,]),'varsB':([15,35,],[25,25,]),'mainNP1':([17,],[28,]),'funcionNP1':([19,],[29,]),'funcionANP1':([20,21,],[30,31,]),'tipoSimpleNP1':([22,23,],[32,33,]),'varsNP7':([24,],[34,]),'varsNP2':([26,27,],[36,37,]),'bloque':([28,163,164,171,224,],[38,193,194,201,228,]),'varsF':([35,],[41,]),'bloqueA':([39,47,],[46,54,]),'estatuto':([39,47,],[47,47,]),'estatutoNP1':([39,47,],[49,49,]),'funcionNP2':([40,],[50,]),'varsNP3':([44,45,137,],[51,52,153,]),'estatutoA':([49,],[55,]),'asignacion':([49,],[56,]),'llamada':([49,67,78,100,103,108,132,140,142,145,146,147,148,149,182,185,189,],[57,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'read':([49,],[58,]),'escritura':([49,],[59,]),'condicion':([49,],[60,]),'ciclo':([49,],[61,]),'variable':([49,67,78,100,103,108,132,140,142,145,146,147,148,149,182,185,189,],[62,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'varsNP6':([51,70,153,],[69,98,177,]),'varsC':([52,],[70,]),'llamadaNP1':([63,],[74,]),'variableNP1':([63,],[75,]),'escrituraNP1':([65,],[77,]),'exp':([67,78,100,103,108,132,140,142,182,185,189,],[79,107,139,141,144,150,157,161,206,207,161,]),'exp1':([67,78,100,103,108,132,140,142,145,182,185,189,],[80,80,80,80,80,80,80,80,165,80,80,80,]),'exp2':([67,78,100,103,108,132,140,142,145,146,182,185,189,],[81,81,81,81,81,81,81,81,81,166,81,81,81,]),'exp3':([67,78,100,103,108,132,140,142,145,146,147,182,185,189,],[82,82,82,82,82,82,82,82,82,82,167,82,82,82,]),'termino':([67,78,100,103,108,132,140,142,145,146,147,148,182,185,189,],[83,83,83,83,83,83,83,83,83,83,83,168,83,83,83,]),'terminoC':([67,78,100,103,108,132,140,142,145,146,147,148,149,182,185,189,],[84,84,84,84,84,84,84,84,84,84,84,84,169,84,84,84,]),'factor':([67,78,100,103,108,132,140,142,145,146,147,148,149,182,185,189,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'funcionB':([68,],[91,]),'params':([68,],[92,]),'varsE':([69,177,],[95,203,]),'asignacionNP1':([73,],[100,]),'variableA':([75,],[102,]),'readNP1':([76,],[105,]),'expA':([80,195,],[109,213,]),'exp1A':([81,196,],[112,214,]),'exp2A':([82,],[115,]),'exp2B':([82,],[116,]),'exp3A':([83,198,],[122,215,]),'exp3B':([83,198,],[123,123,]),'terminoA':([84,199,],[127,216,]),'terminoB':([84,199,],[128,128,]),'operNP1':([87,110,113,116,123,128,],[132,145,146,147,148,149,]),'factorNP2':([88,],[133,]),'factorNP3':([89,],[134,]),'paramsNP1':([94,202,],[136,217,]),'varsNP4':([99,],[138,]),'loeNP2':([101,106,],[140,142,]),'condicionNP1':([107,],[143,]),'asignacionNP2':([139,],[155,]),'primerparam':([140,],[156,]),'escrituraA':([142,189,],[160,209,]),'funcionC':([151,],[171,]),'paramsA':([152,225,],[174,229,]),'varsD':([154,],[179,]),'llamadaA':([156,220,],[181,227,]),'loeNP1':([157,161,206,],[184,191,220,]),'variableB':([159,],[186,]),'escrituraB':([160,209,],[188,223,]),'escrituraNP2':([162,],[192,]),'expNP1':([165,],[195,]),'exp1NP1':([166,],[196,]),'exp2ANP1':([167,],[197,]),'exp3NP1':([168,],[198,]),'terminoANP1':([169,],[199,]),'factorNP1':([170,],[200,]),'condicionA':([193,],[210,]),'varsNP5':([204,],[218,]),'llamadaNP3':([205,],[219,]),'escrituraNP3':([208,],[222,]),'condicionANP1':([211,],[224,]),'condicionANP2':([228,],[230,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main','program',8,'p_program','sintaxis.py',180),
  ('programNP1 -> <empty>','programNP1',0,'p_programNP1','sintaxis.py',185),
  ('programNP2 -> <empty>','programNP2',0,'p_programNP2','sintaxis.py',199),
  ('programA -> vars','programA',1,'p_programA','sintaxis.py',208),
  ('programA -> empty','programA',1,'p_programA','sintaxis.py',209),
  ('programB -> funcion programB','programB',2,'p_programB','sintaxis.py',212),
  ('programB -> empty','programB',1,'p_programB','sintaxis.py',213),
  ('vars -> varsNP1 VAR varsA varsNP7','vars',4,'p_vars','sintaxis.py',216),
  ('varsNP7 -> <empty>','varsNP7',0,'p_varsNP7','sintaxis.py',220),
  ('varsNP1 -> <empty>','varsNP1',0,'p_varsNP1','sintaxis.py',227),
  ('varsA -> varsB SEMICOLON varsF','varsA',3,'p_varsA','sintaxis.py',232),
  ('varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE','varsB',6,'p_varsB','sintaxis.py',235),
  ('varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6','varsB',6,'p_varsB','sintaxis.py',236),
  ('varsNP2 -> <empty>','varsNP2',0,'p_varsNP2','sintaxis.py',240),
  ('varsNP6 -> <empty>','varsNP6',0,'p_varsNP6','sintaxis.py',247),
  ('varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD','varsC',5,'p_varsC','sintaxis.py',257),
  ('varsC -> empty','varsC',1,'p_varsC','sintaxis.py',258),
  ('varsNP4 -> <empty>','varsNP4',0,'p_varsNP4','sintaxis.py',263),
  ('varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET','varsD',4,'p_varsD','sintaxis.py',272),
  ('varsD -> empty','varsD',1,'p_varsD','sintaxis.py',273),
  ('varsNP5 -> <empty>','varsNP5',0,'p_varsNP5','sintaxis.py',278),
  ('varsE -> COMMA ID varsNP3 varsNP6 varsE','varsE',5,'p_varsE','sintaxis.py',287),
  ('varsE -> empty','varsE',1,'p_varsE','sintaxis.py',288),
  ('varsNP3 -> <empty>','varsNP3',0,'p_varsNP3','sintaxis.py',292),
  ('varsF -> varsA','varsF',1,'p_varsF','sintaxis.py',297),
  ('varsF -> empty','varsF',1,'p_varsF','sintaxis.py',298),
  ('funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque','funcion',11,'p_funcion','sintaxis.py',301),
  ('funcionNP1 -> <empty>','funcionNP1',0,'p_funcionNP1','sintaxis.py',305),
  ('funcionNP2 -> <empty>','funcionNP2',0,'p_funcionNP2','sintaxis.py',316),
  ('funcionA -> tipoSimple funcionANP1','funcionA',2,'p_funcionA','sintaxis.py',327),
  ('funcionA -> VOID funcionANP1','funcionA',2,'p_funcionA','sintaxis.py',328),
  ('funcionANP1 -> <empty>','funcionANP1',0,'p_funcionANP1','sintaxis.py',332),
  ('funcionB -> params','funcionB',1,'p_funcionB','sintaxis.py',337),
  ('funcionB -> empty','funcionB',1,'p_funcionB','sintaxis.py',338),
  ('funcionC -> vars','funcionC',1,'p_funcionC','sintaxis.py',341),
  ('funcionC -> empty','funcionC',1,'p_funcionC','sintaxis.py',342),
  ('main -> MAINSTART mainNP1 bloque','main',3,'p_main','sintaxis.py',345),
  ('mainNP1 -> <empty>','mainNP1',0,'p_mainNP1','sintaxis.py',350),
  ('tipoSimple -> INT tipoSimpleNP1','tipoSimple',2,'p_tipoSimple','sintaxis.py',356),
  ('tipoSimple -> FLOAT tipoSimpleNP1','tipoSimple',2,'p_tipoSimple','sintaxis.py',357),
  ('tipoSimpleNP1 -> <empty>','tipoSimpleNP1',0,'p_tipoSimpleNP1','sintaxis.py',361),
  ('params -> tipoSimple paramsNP1 ID paramsA','params',4,'p_params','sintaxis.py',366),
  ('paramsA -> COMMA tipoSimple paramsNP1 ID paramsA','paramsA',5,'p_paramsA','sintaxis.py',369),
  ('paramsA -> empty','paramsA',1,'p_paramsA','sintaxis.py',370),
  ('paramsNP1 -> <empty>','paramsNP1',0,'p_paramsNP1','sintaxis.py',375),
  ('bloque -> LEFTCURLY bloqueA RIGHTCURLY','bloque',3,'p_bloque','sintaxis.py',379),
  ('bloqueA -> estatuto bloqueA','bloqueA',2,'p_bloqueA','sintaxis.py',382),
  ('bloqueA -> empty','bloqueA',1,'p_bloqueA','sintaxis.py',383),
  ('estatuto -> estatutoNP1 estatutoA','estatuto',2,'p_estatuto','sintaxis.py',386),
  ('estatutoA -> asignacion','estatutoA',1,'p_estatutoA','sintaxis.py',392),
  ('estatutoA -> llamada','estatutoA',1,'p_estatutoA','sintaxis.py',393),
  ('estatutoA -> read','estatutoA',1,'p_estatutoA','sintaxis.py',394),
  ('estatutoA -> escritura','estatutoA',1,'p_estatutoA','sintaxis.py',395),
  ('estatutoA -> condicion','estatutoA',1,'p_estatutoA','sintaxis.py',396),
  ('estatutoA -> ciclo','estatutoA',1,'p_estatutoA','sintaxis.py',397),
  ('estatutoNP1 -> <empty>','estatutoNP1',0,'p_estatutoNP1','sintaxis.py',401),
  ('asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2','asignacion',5,'p_asignacion','sintaxis.py',410),
  ('asignacionNP1 -> <empty>','asignacionNP1',0,'p_asignacionNP1','sintaxis.py',414),
  ('asignacionNP2 -> <empty>','asignacionNP2',0,'p_asignacionNP2','sintaxis.py',419),
  ('llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3','llamada',8,'p_llamada','sintaxis.py',423),
  ('primerparam -> exp loeNP1','primerparam',2,'p_primerparam','sintaxis.py',428),
  ('primerparam -> empty','primerparam',1,'p_primerparam','sintaxis.py',429),
  ('llamadaA -> COMMA exp loeNP1 llamadaA','llamadaA',4,'p_llamadaA','sintaxis.py',432),
  ('llamadaA -> empty','llamadaA',1,'p_llamadaA','sintaxis.py',433),
  ('llamadaNP1 -> <empty>','llamadaNP1',0,'p_llamadaNP1','sintaxis.py',442),
  ('llamadaNP3 -> <empty>','llamadaNP3',0,'p_llamadaNP3','sintaxis.py',460),
  ('read -> READ ID readNP1','read',3,'p_read','sintaxis.py',471),
  ('readNP1 -> <empty>','readNP1',0,'p_readNP1','sintaxis.py',474),
  ('escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3','escritura',8,'p_escritura','sintaxis.py',489),
  ('escrituraNP1 -> <empty>','escrituraNP1',0,'p_escrituraNP1','sintaxis.py',494),
  ('escrituraNP3 -> <empty>','escrituraNP3',0,'p_escrituraNP3','sintaxis.py',498),
  ('loeNP2 -> <empty>','loeNP2',0,'p_loeNP2','sintaxis.py',507),
  ('escrituraA -> exp loeNP1','escrituraA',2,'p_escrituraA','sintaxis.py',516),
  ('escrituraA -> CTSTRING escrituraNP2','escrituraA',2,'p_escrituraA','sintaxis.py',517),
  ('loeNP1 -> <empty>','loeNP1',0,'p_loeNP1','sintaxis.py',524),
  ('escrituraNP2 -> <empty>','escrituraNP2',0,'p_escrituraNP2','sintaxis.py',540),
  ('escrituraB -> COMMA escrituraA escrituraB','escrituraB',3,'p_escrituraB','sintaxis.py',549),
  ('escrituraB -> empty','escrituraB',1,'p_escrituraB','sintaxis.py',550),
  ('condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA','condicion',7,'p_condicion','sintaxis.py',553),
  ('condicionNP1 -> <empty>','condicionNP1',0,'p_condicionNP1','sintaxis.py',556),
  ('condicionA -> ELSE condicionANP1 bloque condicionANP2','condicionA',4,'p_condicionA','sintaxis.py',562),
  ('condicionA -> empty','condicionA',1,'p_condicionA','sintaxis.py',563),
  ('condicionANP1 -> <empty>','condicionANP1',0,'p_condicionANP1','sintaxis.py',566),
  ('condicionANP2 -> <empty>','condicionANP2',0,'p_condicionANP2','sintaxis.py',577),
  ('ciclo -> FROM exp TO exp DO bloque','ciclo',6,'p_ciclo','sintaxis.py',586),
  ('variable -> ID variableNP1 variableA','variable',3,'p_variable','sintaxis.py',589),
  ('variableNP1 -> <empty>','variableNP1',0,'p_variableNP1','sintaxis.py',596),
  ('variableA -> LEFTBRACKET exp RIGHTBRACKET variableB','variableA',4,'p_variableA','sintaxis.py',609),
  ('variableA -> empty','variableA',1,'p_variableA','sintaxis.py',610),
  ('variableB -> LEFTBRACKET exp RIGHTBRACKET','variableB',3,'p_variableB','sintaxis.py',613),
  ('variableB -> empty','variableB',1,'p_variableB','sintaxis.py',614),
  ('exp -> exp1 expA','exp',2,'p_exp','sintaxis.py',617),
  ('expNP1 -> <empty>','expNP1',0,'p_expNP1','sintaxis.py',620),
  ('expA -> OROP operNP1 exp1 expNP1 expA','expA',5,'p_expA','sintaxis.py',625),
  ('expA -> empty','expA',1,'p_expA','sintaxis.py',626),
  ('exp1 -> exp2 exp1A','exp1',2,'p_exp1','sintaxis.py',629),
  ('exp1NP1 -> <empty>','exp1NP1',0,'p_exp1NP1','sintaxis.py',632),
  ('exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A','exp1A',5,'p_exp1A','sintaxis.py',637),
  ('exp1A -> empty','exp1A',1,'p_exp1A','sintaxis.py',638),
  ('exp2 -> exp3 exp2A','exp2',2,'p_exp2','sintaxis.py',641),
  ('exp2A -> exp2B operNP1 exp3 exp2ANP1','exp2A',4,'p_exp2A','sintaxis.py',644),
  ('exp2A -> empty','exp2A',1,'p_exp2A','sintaxis.py',645),
  ('exp2ANP1 -> <empty>','exp2ANP1',0,'p_exp2ANP1','sintaxis.py',648),
  ('exp2B -> LESSTHANOP','exp2B',1,'p_exp2B','sintaxis.py',652),
  ('exp2B -> GREATERTHANOP','exp2B',1,'p_exp2B','sintaxis.py',653),
  ('exp2B -> DIFFERENTOP','exp2B',1,'p_exp2B','sintaxis.py',654),
  ('exp2B -> EQUALOP','exp2B',1,'p_exp2B','sintaxis.py',655),
  ('exp3 -> termino exp3A','exp3',2,'p_exp3','sintaxis.py',659),
  ('exp3NP1 -> <empty>','exp3NP1',0,'p_exp3NP1','sintaxis.py',662),
  ('exp3A -> exp3B operNP1 termino exp3NP1 exp3A','exp3A',5,'p_exp3A','sintaxis.py',667),
  ('exp3A -> empty','exp3A',1,'p_exp3A','sintaxis.py',668),
  ('exp3B -> SUMOP','exp3B',1,'p_exp3B','sintaxis.py',671),
  ('exp3B -> SUBOP','exp3B',1,'p_exp3B','sintaxis.py',672),
  ('termino -> terminoC terminoA','termino',2,'p_termino','sintaxis.py',676),
  ('terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA','terminoA',5,'p_terminoA','sintaxis.py',679),
  ('terminoA -> empty','terminoA',1,'p_terminoA','sintaxis.py',680),
  ('terminoANP1 -> <empty>','terminoANP1',0,'p_terminoANP1','sintaxis.py',683),
  ('terminoB -> MULOP','terminoB',1,'p_terminoB','sintaxis.py',688),
  ('terminoB -> DIVOP','terminoB',1,'p_terminoB','sintaxis.py',689),
  ('terminoC -> factor','terminoC',1,'p_terminoC','sintaxis.py',693),
  ('terminoC -> llamada','terminoC',1,'p_terminoC','sintaxis.py',694),
  ('factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1','factor',5,'p_factor','sintaxis.py',697),
  ('factor -> CTI factorNP2','factor',2,'p_factor','sintaxis.py',698),
  ('factor -> CTF factorNP3','factor',2,'p_factor','sintaxis.py',699),
  ('factor -> variable','factor',1,'p_factor','sintaxis.py',700),
  ('operNP1 -> <empty>','operNP1',0,'p_operNP1','sintaxis.py',704),
  ('factorNP1 -> <empty>','factorNP1',0,'p_factorNP1','sintaxis.py',710),
  ('factorNP2 -> <empty>','factorNP2',0,'p_factorNP2','sintaxis.py',714),
  ('factorNP3 -> <empty>','factorNP3',0,'p_factorNP3','sintaxis.py',719),
  ('empty -> <empty>','empty',0,'p_empty','sintaxis.py',725),
]
