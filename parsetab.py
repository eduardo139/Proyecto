
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ANDOP ASSIGNOP COMMA CTF CTI CTSTRING DIFFERENTOP DIVOP DO ELSE EQUALOP FILE FLOAT FROM FUNC GREATERTHANOP ID IF INT LEFTBRACKET LEFTCURLY LEFTPAR LESSTHANOP MAINSTART MULOP OROP PROGRAM READ RIGHTBRACKET RIGHTCURLY RIGHTPAR SEMICOLON SUBOP SUMOP TO VAR VOID WRITEprogram : PROGRAM programNP1 ID programNP2 SEMICOLON programA programB mainprogramNP1 :programNP2 :programA : vars\n                    | emptyprogramB : funcion programB\n                    | emptyvars : varsNP1 VAR varsA varsNP7varsNP7 :varsNP1 :varsA : varsB SEMICOLON varsFvarsB : FILE varsNP2 ID varsNP3 varsNP6 varsE\n                | tipoSimple varsNP2 ID varsNP3 varsC varsNP6varsNP2 :varsNP6 :varsC : LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD\n                | emptyvarsNP4 :varsD : LEFTBRACKET CTI varsNP5 RIGHTBRACKET\n                | emptyvarsNP5 :varsE : COMMA ID varsNP3 varsE\n                | emptyvarsNP3 :varsF : varsA\n                | emptyfuncion : FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloquefuncionNP1 :funcionNP2 :funcionA : tipoSimple \n                    | VOIDfuncionB : params\n                    | emptyfuncionC : vars\n                    | emptymain : MAINSTART mainNP1 bloquemainNP1 :tipoSimple : INT\n                    | FLOATparams : tipoSimple ID paramsAparamsA : COMMA tipoSimple ID paramsA\n                | emptybloque : LEFTCURLY bloqueA RIGHTCURLYbloqueA : estatuto bloqueA\n                | emptyestatuto : asignacion\n                | llamada\n                | read\n                | escritura\n                | condicion\n                | cicloasignacion : variable ASSIGNOP expllamada : ID LEFTPAR exp llamadaA RIGHTPARllamadaA : COMMA exp llamadaA\n                | emptyread : READ IDescritura : WRITE LEFTPAR escrituraA escrituraB RIGHTPARescrituraA : exp\n                    | CTSTRINGescrituraB : COMMA escrituraA escrituraB\n                    | emptycondicion : IF LEFTPAR exp RIGHTPAR bloque condicionAcondicionA : ELSE bloque\n                    | emptyciclo : FROM exp TO exp DO bloquevariable : ID variableAvariableA : LEFTBRACKET exp RIGHTBRACKET variableB\n                    | emptyvariableB : LEFTBRACKET exp RIGHTBRACKET\n                    | emptyexp : exp1 expAexpA : OROP exp1 expA\n                | emptyexp1 : exp2 exp1Aexp1A : ANDOP exp2 exp1A\n                | emptyexp2 : exp3 exp2Aexp2A : exp2B exp3\n                | emptyexp2B : LESSTHANOP\n                | GREATERTHANOP\n                | DIFFERENTOP\n                | EQUALOPexp3 : termino exp3Aexp3A : exp3B termino exp3A\n                | emptyexp3B : SUMOP\n                | SUBOPtermino : factor terminoAterminoA : terminoB factor terminoA\n                    | emptyterminoB : MULOP\n                    | DIVOPfactor : LEFTPAR exp RIGHTPAR\n                | CTI\n                | CTF\n                | variable\n                | llamadaempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,16,34,60,],[0,-1,-36,-43,]),'ID':([2,3,19,20,21,22,23,26,27,29,32,33,35,43,45,46,47,48,49,50,53,56,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,122,124,129,131,133,137,138,139,140,141,142,147,149,150,151,152,154,156,157,158,159,169,171,172,176,181,182,],[-2,4,-28,-30,-31,-38,-39,-14,-14,36,40,41,52,52,-46,-47,-48,-49,-50,-51,67,81,-43,81,81,-66,81,-68,-56,81,81,-99,-99,-99,-99,-99,81,-95,-96,-97,-98,-99,-52,81,-71,81,-73,-74,81,-76,-77,81,-79,-80,-81,-82,-83,-84,81,-86,-87,-88,-89,81,-91,-92,-93,144,145,81,-99,81,-99,-99,-78,-99,-99,-94,-53,81,-67,-70,-57,-99,-72,-75,-85,-90,-62,-64,-65,184,-69,-63,]),'SEMICOLON':([4,5,25,40,41,58,59,83,84,86,123,125,126,143,145,164,165,177,179,180,188,],[-3,6,31,-24,-24,-15,-99,-99,-15,-17,-12,-23,-13,160,-24,-99,-99,-22,-16,-20,-19,]),'FUNC':([6,7,8,9,12,24,30,31,37,38,39,60,183,],[-99,14,-4,-5,14,-9,-8,-99,-11,-25,-26,-43,-27,]),'MAINSTART':([6,7,8,9,11,12,13,18,24,30,31,37,38,39,60,183,],[-99,-99,-4,-5,17,-99,-7,-6,-9,-8,-99,-11,-25,-26,-43,-27,]),'VAR':([6,10,160,],[-10,15,-10,]),'VOID':([14,],[21,]),'INT':([14,15,31,82,162,],[22,22,22,22,22,]),'FLOAT':([14,15,31,82,162,],[23,23,23,23,23,]),'FILE':([15,31,],[26,26,]),'LEFTCURLY':([17,24,28,30,31,37,38,39,135,155,160,170,173,174,175,],[-37,-9,35,-8,-99,-11,-25,-26,35,35,-99,35,35,-34,-35,]),'RIGHTCURLY':([35,42,43,44,45,46,47,48,49,50,60,61,64,66,67,71,72,73,74,75,77,78,79,80,81,87,95,97,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,147,150,151,152,154,156,157,158,159,169,171,172,181,182,],[-99,60,-99,-45,-46,-47,-48,-49,-50,-51,-43,-44,-66,-68,-56,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-52,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,-99,-99,-78,-99,-99,-94,-53,-67,-70,-57,-99,-72,-75,-85,-90,-62,-64,-65,-69,-63,]),'READ':([35,43,45,46,47,48,49,50,60,64,66,67,71,72,73,74,75,77,78,79,80,81,87,95,97,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,147,150,151,152,154,156,157,158,159,169,171,172,181,182,],[53,53,-46,-47,-48,-49,-50,-51,-43,-66,-68,-56,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-52,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,-99,-99,-78,-99,-99,-94,-53,-67,-70,-57,-99,-72,-75,-85,-90,-62,-64,-65,-69,-63,]),'WRITE':([35,43,45,46,47,48,49,50,60,64,66,67,71,72,73,74,75,77,78,79,80,81,87,95,97,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,147,150,151,152,154,156,157,158,159,169,171,172,181,182,],[54,54,-46,-47,-48,-49,-50,-51,-43,-66,-68,-56,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-52,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,-99,-99,-78,-99,-99,-94,-53,-67,-70,-57,-99,-72,-75,-85,-90,-62,-64,-65,-69,-63,]),'IF':([35,43,45,46,47,48,49,50,60,64,66,67,71,72,73,74,75,77,78,79,80,81,87,95,97,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,147,150,151,152,154,156,157,158,159,169,171,172,181,182,],[55,55,-46,-47,-48,-49,-50,-51,-43,-66,-68,-56,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-52,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,-99,-99,-78,-99,-99,-94,-53,-67,-70,-57,-99,-72,-75,-85,-90,-62,-64,-65,-69,-63,]),'FROM':([35,43,45,46,47,48,49,50,60,64,66,67,71,72,73,74,75,77,78,79,80,81,87,95,97,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,147,150,151,152,154,156,157,158,159,169,171,172,181,182,],[56,56,-46,-47,-48,-49,-50,-51,-43,-66,-68,-56,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-52,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,-99,-99,-78,-99,-99,-94,-53,-67,-70,-57,-99,-72,-75,-85,-90,-62,-64,-65,-69,-63,]),'LEFTPAR':([36,52,54,55,56,57,62,63,65,68,69,76,81,94,96,99,102,104,105,106,107,109,111,112,114,116,117,129,133,149,],[-29,63,68,69,76,82,76,76,76,76,76,76,63,76,76,76,76,-80,-81,-82,-83,76,-87,-88,76,-92,-93,76,76,76,]),'COMMA':([40,58,64,66,71,72,73,74,75,77,78,79,80,81,83,88,90,91,92,95,97,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,144,145,147,148,150,151,153,156,157,158,159,164,181,184,],[-24,-15,-66,-68,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,124,129,133,-58,-59,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,-99,-99,-78,-99,-99,-94,162,-24,-53,129,-67,-70,133,-72,-75,-85,-90,124,-69,162,]),'LEFTBRACKET':([41,52,59,81,131,165,],[-24,65,85,65,149,178,]),'ASSIGNOP':([51,52,64,66,131,150,151,181,],[62,-99,-66,-68,-99,-67,-70,-69,]),'CTI':([56,62,63,65,68,69,76,85,94,96,99,102,104,105,106,107,109,111,112,114,116,117,129,133,149,178,],[77,77,77,77,77,77,77,127,77,77,77,77,-80,-81,-82,-83,77,-87,-88,77,-92,-93,77,77,77,185,]),'CTF':([56,62,63,65,68,69,76,94,96,99,102,104,105,106,107,109,111,112,114,116,117,129,133,149,],[78,78,78,78,78,78,78,78,78,78,78,-80,-81,-82,-83,78,-87,-88,78,-92,-93,78,78,78,]),'ELSE':([60,154,],[-43,170,]),'MULOP':([64,66,75,77,78,79,80,81,131,141,142,147,150,151,181,],[-66,-68,116,-95,-96,-97,-98,-99,-99,116,-94,-53,-67,-70,-69,]),'DIVOP':([64,66,75,77,78,79,80,81,131,141,142,147,150,151,181,],[-66,-68,117,-95,-96,-97,-98,-99,-99,117,-94,-53,-67,-70,-69,]),'SUMOP':([64,66,74,75,77,78,79,80,81,113,115,131,140,141,142,147,150,151,159,181,],[-66,-68,111,-99,-95,-96,-97,-98,-99,-89,-91,-99,111,-99,-94,-53,-67,-70,-90,-69,]),'SUBOP':([64,66,74,75,77,78,79,80,81,113,115,131,140,141,142,147,150,151,159,181,],[-66,-68,112,-99,-95,-96,-97,-98,-99,-89,-91,-99,112,-99,-94,-53,-67,-70,-90,-69,]),'LESSTHANOP':([64,66,73,74,75,77,78,79,80,81,108,110,113,115,131,140,141,142,147,150,151,158,159,181,],[-66,-68,104,-99,-99,-95,-96,-97,-98,-99,-84,-86,-89,-91,-99,-99,-99,-94,-53,-67,-70,-85,-90,-69,]),'GREATERTHANOP':([64,66,73,74,75,77,78,79,80,81,108,110,113,115,131,140,141,142,147,150,151,158,159,181,],[-66,-68,105,-99,-99,-95,-96,-97,-98,-99,-84,-86,-89,-91,-99,-99,-99,-94,-53,-67,-70,-85,-90,-69,]),'DIFFERENTOP':([64,66,73,74,75,77,78,79,80,81,108,110,113,115,131,140,141,142,147,150,151,158,159,181,],[-66,-68,106,-99,-99,-95,-96,-97,-98,-99,-84,-86,-89,-91,-99,-99,-99,-94,-53,-67,-70,-85,-90,-69,]),'EQUALOP':([64,66,73,74,75,77,78,79,80,81,108,110,113,115,131,140,141,142,147,150,151,158,159,181,],[-66,-68,107,-99,-99,-95,-96,-97,-98,-99,-84,-86,-89,-91,-99,-99,-99,-94,-53,-67,-70,-85,-90,-69,]),'ANDOP':([64,66,72,73,74,75,77,78,79,80,81,101,103,108,110,113,115,131,138,139,140,141,142,147,150,151,158,159,181,],[-66,-68,99,-99,-99,-99,-95,-96,-97,-98,-99,-77,-79,-84,-86,-89,-91,-99,99,-78,-99,-99,-94,-53,-67,-70,-85,-90,-69,]),'OROP':([64,66,71,72,73,74,75,77,78,79,80,81,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,147,150,151,157,158,159,181,],[-66,-68,96,-99,-99,-99,-99,-95,-96,-97,-98,-99,-74,-76,-77,-79,-84,-86,-89,-91,-99,96,-99,-78,-99,-99,-94,-53,-67,-70,-75,-85,-90,-69,]),'TO':([64,66,70,71,72,73,74,75,77,78,79,80,81,95,97,98,100,101,103,108,110,113,115,131,137,138,139,140,141,142,147,150,151,156,157,158,159,181,],[-66,-68,94,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,-99,-99,-78,-99,-99,-94,-53,-67,-70,-72,-75,-85,-90,-69,]),'RIGHTPAR':([64,66,71,72,73,74,75,77,78,79,80,81,82,88,90,91,92,93,95,97,98,100,101,103,108,110,113,115,118,119,120,121,128,130,131,132,134,137,138,139,140,141,142,144,147,148,150,151,153,156,157,158,159,161,163,166,168,181,184,186,],[-66,-68,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-99,-99,-99,-58,-59,135,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,142,143,-32,-33,147,-55,-99,152,-61,-99,-99,-78,-99,-99,-94,-99,-53,-99,-67,-70,-99,-72,-75,-85,-90,-40,-42,-54,-60,-69,-99,-41,]),'RIGHTBRACKET':([64,66,71,72,73,74,75,77,78,79,80,81,89,95,97,98,100,101,103,108,110,113,115,127,131,137,138,139,140,141,142,146,147,150,151,156,157,158,159,167,181,185,187,],[-66,-68,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,131,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-18,-99,-99,-99,-78,-99,-99,-94,165,-53,-67,-70,-72,-75,-85,-90,181,-69,-21,188,]),'DO':([64,66,71,72,73,74,75,77,78,79,80,81,95,97,98,100,101,103,108,110,113,115,131,136,137,138,139,140,141,142,147,150,151,156,157,158,159,181,],[-66,-68,-99,-99,-99,-99,-99,-95,-96,-97,-98,-99,-71,-73,-74,-76,-77,-79,-84,-86,-89,-91,-99,155,-99,-99,-78,-99,-99,-94,-53,-67,-70,-72,-75,-85,-90,-69,]),'CTSTRING':([68,133,],[92,92,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programNP1':([2,],[3,]),'programNP2':([4,],[5,]),'programA':([6,],[7,]),'vars':([6,160,],[8,174,]),'empty':([6,7,12,31,35,43,52,59,71,72,73,74,75,81,82,83,88,90,131,137,138,140,141,144,148,153,154,160,164,165,184,],[9,13,13,39,44,44,66,86,97,100,103,110,115,66,121,125,130,134,151,97,100,110,115,163,130,134,171,175,125,180,163,]),'varsNP1':([6,160,],[10,10,]),'programB':([7,12,],[11,18,]),'funcion':([7,12,],[12,12,]),'main':([11,],[16,]),'funcionA':([14,],[19,]),'tipoSimple':([14,15,31,82,162,],[20,27,27,122,176,]),'varsA':([15,31,],[24,38,]),'varsB':([15,31,],[25,25,]),'mainNP1':([17,],[28,]),'funcionNP1':([19,],[29,]),'varsNP7':([24,],[30,]),'varsNP2':([26,27,],[32,33,]),'bloque':([28,135,155,170,173,],[34,154,172,182,183,]),'varsF':([31,],[37,]),'bloqueA':([35,43,],[42,61,]),'estatuto':([35,43,],[43,43,]),'asignacion':([35,43,],[45,45,]),'llamada':([35,43,56,62,63,65,68,69,76,94,96,99,102,109,114,129,133,149,],[46,46,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'read':([35,43,],[47,47,]),'escritura':([35,43,],[48,48,]),'condicion':([35,43,],[49,49,]),'ciclo':([35,43,],[50,50,]),'variable':([35,43,56,62,63,65,68,69,76,94,96,99,102,109,114,129,133,149,],[51,51,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'funcionNP2':([36,],[57,]),'varsNP3':([40,41,145,],[58,59,164,]),'variableA':([52,81,],[64,64,]),'exp':([56,62,63,65,68,69,76,94,129,133,149,],[70,87,88,89,91,93,118,136,148,91,167,]),'exp1':([56,62,63,65,68,69,76,94,96,129,133,149,],[71,71,71,71,71,71,71,71,137,71,71,71,]),'exp2':([56,62,63,65,68,69,76,94,96,99,129,133,149,],[72,72,72,72,72,72,72,72,72,138,72,72,72,]),'exp3':([56,62,63,65,68,69,76,94,96,99,102,129,133,149,],[73,73,73,73,73,73,73,73,73,73,139,73,73,73,]),'termino':([56,62,63,65,68,69,76,94,96,99,102,109,129,133,149,],[74,74,74,74,74,74,74,74,74,74,74,140,74,74,74,]),'factor':([56,62,63,65,68,69,76,94,96,99,102,109,114,129,133,149,],[75,75,75,75,75,75,75,75,75,75,75,75,141,75,75,75,]),'varsNP6':([58,84,],[83,126,]),'varsC':([59,],[84,]),'escrituraA':([68,133,],[90,153,]),'expA':([71,137,],[95,156,]),'exp1A':([72,138,],[98,157,]),'exp2A':([73,],[101,]),'exp2B':([73,],[102,]),'exp3A':([74,140,],[108,158,]),'exp3B':([74,140,],[109,109,]),'terminoA':([75,141,],[113,159,]),'terminoB':([75,141,],[114,114,]),'funcionB':([82,],[119,]),'params':([82,],[120,]),'varsE':([83,164,],[123,177,]),'llamadaA':([88,148,],[128,166,]),'escrituraB':([90,153,],[132,168,]),'varsNP4':([127,],[146,]),'variableB':([131,],[150,]),'paramsA':([144,184,],[161,186,]),'condicionA':([154,],[169,]),'funcionC':([160,],[173,]),'varsD':([165,],[179,]),'varsNP5':([185,],[187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main','program',8,'p_program','sintaxis.py',6),
  ('programNP1 -> <empty>','programNP1',0,'p_programNP1','sintaxis.py',11),
  ('programNP2 -> <empty>','programNP2',0,'p_programNP2','sintaxis.py',20),
  ('programA -> vars','programA',1,'p_programA','sintaxis.py',26),
  ('programA -> empty','programA',1,'p_programA','sintaxis.py',27),
  ('programB -> funcion programB','programB',2,'p_programB','sintaxis.py',30),
  ('programB -> empty','programB',1,'p_programB','sintaxis.py',31),
  ('vars -> varsNP1 VAR varsA varsNP7','vars',4,'p_vars','sintaxis.py',34),
  ('varsNP7 -> <empty>','varsNP7',0,'p_varsNP7','sintaxis.py',38),
  ('varsNP1 -> <empty>','varsNP1',0,'p_varsNP1','sintaxis.py',43),
  ('varsA -> varsB SEMICOLON varsF','varsA',3,'p_varsA','sintaxis.py',47),
  ('varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE','varsB',6,'p_varsB','sintaxis.py',50),
  ('varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6','varsB',6,'p_varsB','sintaxis.py',51),
  ('varsNP2 -> <empty>','varsNP2',0,'p_varsNP2','sintaxis.py',55),
  ('varsNP6 -> <empty>','varsNP6',0,'p_varsNP6','sintaxis.py',61),
  ('varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD','varsC',5,'p_varsC','sintaxis.py',68),
  ('varsC -> empty','varsC',1,'p_varsC','sintaxis.py',69),
  ('varsNP4 -> <empty>','varsNP4',0,'p_varsNP4','sintaxis.py',74),
  ('varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET','varsD',4,'p_varsD','sintaxis.py',81),
  ('varsD -> empty','varsD',1,'p_varsD','sintaxis.py',82),
  ('varsNP5 -> <empty>','varsNP5',0,'p_varsNP5','sintaxis.py',87),
  ('varsE -> COMMA ID varsNP3 varsE','varsE',4,'p_varsE','sintaxis.py',94),
  ('varsE -> empty','varsE',1,'p_varsE','sintaxis.py',95),
  ('varsNP3 -> <empty>','varsNP3',0,'p_varsNP3','sintaxis.py',99),
  ('varsF -> varsA','varsF',1,'p_varsF','sintaxis.py',103),
  ('varsF -> empty','varsF',1,'p_varsF','sintaxis.py',104),
  ('funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque','funcion',11,'p_funcion','sintaxis.py',107),
  ('funcionNP1 -> <empty>','funcionNP1',0,'p_funcionNP1','sintaxis.py',111),
  ('funcionNP2 -> <empty>','funcionNP2',0,'p_funcionNP2','sintaxis.py',119),
  ('funcionA -> tipoSimple','funcionA',1,'p_funcionA','sintaxis.py',127),
  ('funcionA -> VOID','funcionA',1,'p_funcionA','sintaxis.py',128),
  ('funcionB -> params','funcionB',1,'p_funcionB','sintaxis.py',131),
  ('funcionB -> empty','funcionB',1,'p_funcionB','sintaxis.py',132),
  ('funcionC -> vars','funcionC',1,'p_funcionC','sintaxis.py',135),
  ('funcionC -> empty','funcionC',1,'p_funcionC','sintaxis.py',136),
  ('main -> MAINSTART mainNP1 bloque','main',3,'p_main','sintaxis.py',139),
  ('mainNP1 -> <empty>','mainNP1',0,'p_mainNP1','sintaxis.py',142),
  ('tipoSimple -> INT','tipoSimple',1,'p_tipoSimple','sintaxis.py',146),
  ('tipoSimple -> FLOAT','tipoSimple',1,'p_tipoSimple','sintaxis.py',147),
  ('params -> tipoSimple ID paramsA','params',3,'p_params','sintaxis.py',150),
  ('paramsA -> COMMA tipoSimple ID paramsA','paramsA',4,'p_paramsA','sintaxis.py',153),
  ('paramsA -> empty','paramsA',1,'p_paramsA','sintaxis.py',154),
  ('bloque -> LEFTCURLY bloqueA RIGHTCURLY','bloque',3,'p_bloque','sintaxis.py',157),
  ('bloqueA -> estatuto bloqueA','bloqueA',2,'p_bloqueA','sintaxis.py',160),
  ('bloqueA -> empty','bloqueA',1,'p_bloqueA','sintaxis.py',161),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','sintaxis.py',164),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','sintaxis.py',165),
  ('estatuto -> read','estatuto',1,'p_estatuto','sintaxis.py',166),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','sintaxis.py',167),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','sintaxis.py',168),
  ('estatuto -> ciclo','estatuto',1,'p_estatuto','sintaxis.py',169),
  ('asignacion -> variable ASSIGNOP exp','asignacion',3,'p_asignacion','sintaxis.py',172),
  ('llamada -> ID LEFTPAR exp llamadaA RIGHTPAR','llamada',5,'p_llamada','sintaxis.py',175),
  ('llamadaA -> COMMA exp llamadaA','llamadaA',3,'p_llamadaA','sintaxis.py',178),
  ('llamadaA -> empty','llamadaA',1,'p_llamadaA','sintaxis.py',179),
  ('read -> READ ID','read',2,'p_read','sintaxis.py',182),
  ('escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR','escritura',5,'p_escritura','sintaxis.py',185),
  ('escrituraA -> exp','escrituraA',1,'p_escrituraA','sintaxis.py',188),
  ('escrituraA -> CTSTRING','escrituraA',1,'p_escrituraA','sintaxis.py',189),
  ('escrituraB -> COMMA escrituraA escrituraB','escrituraB',3,'p_escrituraB','sintaxis.py',192),
  ('escrituraB -> empty','escrituraB',1,'p_escrituraB','sintaxis.py',193),
  ('condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA','condicion',6,'p_condicion','sintaxis.py',196),
  ('condicionA -> ELSE bloque','condicionA',2,'p_condicionA','sintaxis.py',199),
  ('condicionA -> empty','condicionA',1,'p_condicionA','sintaxis.py',200),
  ('ciclo -> FROM exp TO exp DO bloque','ciclo',6,'p_ciclo','sintaxis.py',203),
  ('variable -> ID variableA','variable',2,'p_variable','sintaxis.py',206),
  ('variableA -> LEFTBRACKET exp RIGHTBRACKET variableB','variableA',4,'p_variableA','sintaxis.py',209),
  ('variableA -> empty','variableA',1,'p_variableA','sintaxis.py',210),
  ('variableB -> LEFTBRACKET exp RIGHTBRACKET','variableB',3,'p_variableB','sintaxis.py',213),
  ('variableB -> empty','variableB',1,'p_variableB','sintaxis.py',214),
  ('exp -> exp1 expA','exp',2,'p_exp','sintaxis.py',217),
  ('expA -> OROP exp1 expA','expA',3,'p_expA','sintaxis.py',220),
  ('expA -> empty','expA',1,'p_expA','sintaxis.py',221),
  ('exp1 -> exp2 exp1A','exp1',2,'p_exp1','sintaxis.py',224),
  ('exp1A -> ANDOP exp2 exp1A','exp1A',3,'p_exp1A','sintaxis.py',227),
  ('exp1A -> empty','exp1A',1,'p_exp1A','sintaxis.py',228),
  ('exp2 -> exp3 exp2A','exp2',2,'p_exp2','sintaxis.py',231),
  ('exp2A -> exp2B exp3','exp2A',2,'p_exp2A','sintaxis.py',234),
  ('exp2A -> empty','exp2A',1,'p_exp2A','sintaxis.py',235),
  ('exp2B -> LESSTHANOP','exp2B',1,'p_exp2B','sintaxis.py',238),
  ('exp2B -> GREATERTHANOP','exp2B',1,'p_exp2B','sintaxis.py',239),
  ('exp2B -> DIFFERENTOP','exp2B',1,'p_exp2B','sintaxis.py',240),
  ('exp2B -> EQUALOP','exp2B',1,'p_exp2B','sintaxis.py',241),
  ('exp3 -> termino exp3A','exp3',2,'p_exp3','sintaxis.py',244),
  ('exp3A -> exp3B termino exp3A','exp3A',3,'p_exp3A','sintaxis.py',247),
  ('exp3A -> empty','exp3A',1,'p_exp3A','sintaxis.py',248),
  ('exp3B -> SUMOP','exp3B',1,'p_exp3B','sintaxis.py',251),
  ('exp3B -> SUBOP','exp3B',1,'p_exp3B','sintaxis.py',252),
  ('termino -> factor terminoA','termino',2,'p_termino','sintaxis.py',255),
  ('terminoA -> terminoB factor terminoA','terminoA',3,'p_terminoA','sintaxis.py',258),
  ('terminoA -> empty','terminoA',1,'p_terminoA','sintaxis.py',259),
  ('terminoB -> MULOP','terminoB',1,'p_terminoB','sintaxis.py',262),
  ('terminoB -> DIVOP','terminoB',1,'p_terminoB','sintaxis.py',263),
  ('factor -> LEFTPAR exp RIGHTPAR','factor',3,'p_factor','sintaxis.py',266),
  ('factor -> CTI','factor',1,'p_factor','sintaxis.py',267),
  ('factor -> CTF','factor',1,'p_factor','sintaxis.py',268),
  ('factor -> variable','factor',1,'p_factor','sintaxis.py',269),
  ('factor -> llamada','factor',1,'p_factor','sintaxis.py',270),
  ('empty -> <empty>','empty',0,'p_empty','sintaxis.py',274),
]
