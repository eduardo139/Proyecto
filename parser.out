Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main
Rule 2     programNP1 -> <empty>
Rule 3     programNP2 -> <empty>
Rule 4     programA -> vars
Rule 5     programA -> empty
Rule 6     programB -> funcion programB
Rule 7     programB -> empty
Rule 8     vars -> VAR varsA
Rule 9     varsA -> varsB SEMICOLON varsF
Rule 10    varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE
Rule 11    varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6
Rule 12    varsNP2 -> <empty>
Rule 13    varsNP6 -> <empty>
Rule 14    varsC -> LEFTBRACKET varIsArray CTI varsNP4 RIGHTBRACKET varsD
Rule 15    varsC -> empty
Rule 16    varIsArray -> <empty>
Rule 17    varsNP4 -> <empty>
Rule 18    varsD -> LEFTBRACKET varIsMatrix CTI varsNP5 RIGHTBRACKET
Rule 19    varsD -> empty
Rule 20    varIsMatrix -> <empty>
Rule 21    varsNP5 -> <empty>
Rule 22    varsE -> COMMA ID varsNP3 varsNP6 varsE
Rule 23    varsE -> empty
Rule 24    varsNP3 -> <empty>
Rule 25    varsF -> varsA
Rule 26    varsF -> empty
Rule 27    funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
Rule 28    quadStart -> <empty>
Rule 29    genMemReqs -> <empty>
Rule 30    funcionNP1 -> <empty>
Rule 31    funcionNP2 -> <empty>
Rule 32    funcionA -> tipoSimple funcionANP1
Rule 33    funcionA -> VOID funcionANP1
Rule 34    funcionANP1 -> <empty>
Rule 35    funcionB -> params
Rule 36    funcionB -> empty
Rule 37    funcionC -> vars
Rule 38    funcionC -> empty
Rule 39    main -> MAINSTART mainNP1 bloque getGlobalMemReqs
Rule 40    getGlobalMemReqs -> <empty>
Rule 41    mainNP1 -> <empty>
Rule 42    tipoSimple -> INT tipoSimpleNP1
Rule 43    tipoSimple -> FLOAT tipoSimpleNP1
Rule 44    tipoSimpleNP1 -> <empty>
Rule 45    params -> tipoSimple paramsNP1 ID paramsNP2 paramsA
Rule 46    paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
Rule 47    paramsA -> empty
Rule 48    paramsNP1 -> <empty>
Rule 49    paramsNP2 -> <empty>
Rule 50    bloque -> LEFTCURLY bloqueA RIGHTCURLY
Rule 51    bloqueA -> estatuto bloqueA
Rule 52    bloqueA -> empty
Rule 53    estatuto -> estatutoNP1 estatutoA
Rule 54    estatutoA -> asignacion
Rule 55    estatutoA -> llamada checkIfVoid
Rule 56    estatutoA -> read
Rule 57    estatutoA -> escritura
Rule 58    estatutoA -> return
Rule 59    estatutoA -> condicion
Rule 60    estatutoA -> ciclo
Rule 61    estatutoA -> specialGraph
Rule 62    checkIfVoid -> <empty>
Rule 63    estatutoNP1 -> <empty>
Rule 64    asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2
Rule 65    asignacionNP1 -> <empty>
Rule 66    asignacionNP2 -> <empty>
Rule 67    llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
Rule 68    primerparam -> exp loeNP1
Rule 69    primerparam -> empty
Rule 70    llamadaA -> COMMA exp loeNP1 llamadaA
Rule 71    llamadaA -> empty
Rule 72    llamadaNP1 -> <empty>
Rule 73    llamadaNP3 -> <empty>
Rule 74    read -> READ ID readNP1
Rule 75    readNP1 -> <empty>
Rule 76    escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
Rule 77    escrituraNP1 -> <empty>
Rule 78    escrituraNP3 -> <empty>
Rule 79    loeNP2 -> <empty>
Rule 80    escrituraA -> exp loeNP1
Rule 81    escrituraA -> CTSTRING escrituraNP2
Rule 82    loeNP1 -> <empty>
Rule 83    escrituraNP2 -> <empty>
Rule 84    escrituraB -> COMMA escrituraA escrituraB
Rule 85    escrituraB -> empty
Rule 86    return -> RETURN exp returnNP1
Rule 87    returnNP1 -> <empty>
Rule 88    condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2
Rule 89    condicionNP1 -> <empty>
Rule 90    condicionA -> ELSE condicionANP1 bloque
Rule 91    condicionA -> empty
Rule 92    condicionANP1 -> <empty>
Rule 93    condicionANP2 -> <empty>
Rule 94    ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2
Rule 95    cicloNP1 -> <empty>
Rule 96    cicloNP2 -> <empty>
Rule 97    variable -> ID variableNP1 variableA
Rule 98    variableNP1 -> <empty>
Rule 99    variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB
Rule 100   variableA -> empty
Rule 101   check_if_non_atomic -> <empty>
Rule 102   verify -> <empty>
Rule 103   variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET
Rule 104   variableB -> empty on_matrix_check
Rule 105   check_if_matrix -> <empty>
Rule 106   verify_matrix -> <empty>
Rule 107   on_matrix_check -> <empty>
Rule 108   exp -> exp1 expA
Rule 109   expNP1 -> <empty>
Rule 110   expA -> OROP operNP1 exp1 expNP1 expA
Rule 111   expA -> empty
Rule 112   exp1 -> exp2 exp1A
Rule 113   exp1NP1 -> <empty>
Rule 114   exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A
Rule 115   exp1A -> empty
Rule 116   exp2 -> exp3 exp2A
Rule 117   exp2A -> exp2B operNP1 exp3 exp2ANP1
Rule 118   exp2A -> empty
Rule 119   exp2ANP1 -> <empty>
Rule 120   exp2B -> LESSTHANOP
Rule 121   exp2B -> GREATERTHANOP
Rule 122   exp2B -> DIFFERENTOP
Rule 123   exp2B -> EQUALOP
Rule 124   exp3 -> termino exp3A
Rule 125   exp3NP1 -> <empty>
Rule 126   exp3A -> exp3B operNP1 termino exp3NP1 exp3A
Rule 127   exp3A -> empty
Rule 128   exp3B -> SUMOP
Rule 129   exp3B -> SUBOP
Rule 130   termino -> terminoC terminoA
Rule 131   terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA
Rule 132   terminoA -> empty
Rule 133   terminoANP1 -> <empty>
Rule 134   terminoB -> MULOP
Rule 135   terminoB -> DIVOP
Rule 136   terminoC -> factor
Rule 137   terminoC -> llamada checkIfNotVoid
Rule 138   checkIfNotVoid -> <empty>
Rule 139   factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1
Rule 140   factor -> CTI factorNP2
Rule 141   factor -> CTF factorNP3
Rule 142   factor -> negative_int factorNP2
Rule 143   factor -> negative_float factorNP3
Rule 144   factor -> variable
Rule 145   factor -> special
Rule 146   negative_int -> SUBOP CTI
Rule 147   negative_float -> SUBOP CTF
Rule 148   operNP1 -> <empty>
Rule 149   factorNP1 -> <empty>
Rule 150   factorNP2 -> <empty>
Rule 151   factorNP3 -> <empty>
Rule 152   special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
Rule 153   specialFunc -> MEAN
Rule 154   specialFunc -> MEDIAN
Rule 155   specialFunc -> MODE
Rule 156   specialFunc -> VARIANCE
Rule 157   specialFunc -> STDDEV
Rule 158   specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph
Rule 159   specialGraphFunc -> HISTOGRAM
Rule 160   specialGraphFunc -> BOXPLOT
Rule 161   addSpecialToStack -> <empty>
Rule 162   check_if_is_matrix -> <empty>
Rule 163   process_special -> <empty>
Rule 164   process_specialGraph -> <empty>
Rule 165   empty -> <empty>

Terminals, with rules where they appear

ANDOP                : 114
ASSIGNOP             : 64
BOXPLOT              : 160
COMMA                : 22 46 70 84
CTF                  : 141 147
CTI                  : 14 18 140 146
CTSTRING             : 81
DIFFERENTOP          : 122
DIVOP                : 135
DO                   : 94
ELSE                 : 90
EQUALOP              : 123
FILE                 : 10
FLOAT                : 43
FROM                 : 94
FUNC                 : 27
GREATERTHANOP        : 121
HISTOGRAM            : 159
ID                   : 1 10 11 22 27 45 46 67 74 97 152 158
IF                   : 88
INT                  : 42
LEFTBRACKET          : 14 18 99 103
LEFTCURLY            : 50
LEFTPAR              : 27 67 76 88 139 152 158
LESSTHANOP           : 120
MAINSTART            : 39
MEAN                 : 153
MEDIAN               : 154
MODE                 : 155
MULOP                : 134
OROP                 : 110
PROGRAM              : 1
READ                 : 74
RETURN               : 86
RIGHTBRACKET         : 14 18 99 103
RIGHTCURLY           : 50
RIGHTPAR             : 27 67 76 88 139 152 158
SEMICOLON            : 1 9 27
STDDEV               : 157
SUBOP                : 129 146 147
SUMOP                : 128
TO                   : 94
VAR                  : 8
VARIANCE             : 156
VOID                 : 33
WRITE                : 76
error                : 

Nonterminals, with rules where they appear

addSpecialToStack    : 152 158
asignacion           : 54
asignacionNP1        : 64
asignacionNP2        : 64
bloque               : 27 39 88 90 94
bloqueA              : 50 51
checkIfNotVoid       : 137
checkIfVoid          : 55
check_if_is_matrix   : 152 158
check_if_matrix      : 103
check_if_non_atomic  : 99
ciclo                : 60
cicloNP1             : 94
cicloNP2             : 94
condicion            : 59
condicionA           : 88
condicionANP1        : 90
condicionANP2        : 88
condicionNP1         : 88
empty                : 5 7 15 19 23 26 36 38 47 52 69 71 85 91 100 104 111 115 118 127 132
escritura            : 57
escrituraA           : 76 84
escrituraB           : 76 84
escrituraNP1         : 76
escrituraNP2         : 81
escrituraNP3         : 76
estatuto             : 51
estatutoA            : 53
estatutoNP1          : 53
exp                  : 64 68 70 80 86 88 94 94 99 103 139
exp1                 : 108 110
exp1A                : 112 114
exp1NP1              : 114
exp2                 : 112 114
exp2A                : 116
exp2ANP1             : 117
exp2B                : 117
exp3                 : 116 117
exp3A                : 124 126
exp3B                : 126
exp3NP1              : 126
expA                 : 108 110
expNP1               : 110
factor               : 136
factorNP1            : 139
factorNP2            : 140 142
factorNP3            : 141 143
funcion              : 6
funcionA             : 27
funcionANP1          : 32 33
funcionB             : 27
funcionC             : 27
funcionNP1           : 27
funcionNP2           : 27
genMemReqs           : 27
getGlobalMemReqs     : 39
llamada              : 55 137
llamadaA             : 67 70
llamadaNP1           : 67
llamadaNP3           : 67
loeNP1               : 68 70 80
loeNP2               : 67 76
main                 : 1
mainNP1              : 39
negative_float       : 143
negative_int         : 142
on_matrix_check      : 104
operNP1              : 110 114 117 126 131 139
params               : 35
paramsA              : 45 46
paramsNP1            : 45 46
paramsNP2            : 45 46
primerparam          : 67
process_special      : 152
process_specialGraph : 158
program              : 0
programA             : 1
programB             : 1 6
programNP1           : 1
programNP2           : 1
quadStart            : 27
read                 : 56
readNP1              : 74
return               : 58
returnNP1            : 86
special              : 145
specialFunc          : 152
specialGraph         : 61
specialGraphFunc     : 158
termino              : 124 126
terminoA             : 130 131
terminoANP1          : 131
terminoB             : 131
terminoC             : 130 131
tipoSimple           : 11 32 45 46
tipoSimpleNP1        : 42 43
varIsArray           : 14
varIsMatrix          : 18
variable             : 64 144
variableA            : 97
variableB            : 99
variableNP1          : 97 152 158
vars                 : 4 37
varsA                : 8 25
varsB                : 9
varsC                : 11
varsD                : 14
varsE                : 10 22
varsF                : 9
varsNP2              : 10 11
varsNP3              : 10 11 22
varsNP4              : 14
varsNP5              : 18
varsNP6              : 10 11 22
verify               : 99
verify_matrix        : 103

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . programNP1 ID programNP2 SEMICOLON programA programB main
    (2) programNP1 -> .

    ID              reduce using rule 2 (programNP1 -> .)

    programNP1                     shift and go to state 3

state 3

    (1) program -> PROGRAM programNP1 . ID programNP2 SEMICOLON programA programB main

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM programNP1 ID . programNP2 SEMICOLON programA programB main
    (3) programNP2 -> .

    SEMICOLON       reduce using rule 3 (programNP2 -> .)

    programNP2                     shift and go to state 5

state 5

    (1) program -> PROGRAM programNP1 ID programNP2 . SEMICOLON programA programB main

    SEMICOLON       shift and go to state 6


state 6

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON . programA programB main
    (4) programA -> . vars
    (5) programA -> . empty
    (8) vars -> . VAR varsA
    (165) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 165 (empty -> .)
    MAINSTART       reduce using rule 165 (empty -> .)

    programA                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 7

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA . programB main
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (27) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (165) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 165 (empty -> .)

    programB                       shift and go to state 11
    funcion                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) programA -> vars .

    FUNC            reduce using rule 4 (programA -> vars .)
    MAINSTART       reduce using rule 4 (programA -> vars .)


state 9

    (5) programA -> empty .

    FUNC            reduce using rule 5 (programA -> empty .)
    MAINSTART       reduce using rule 5 (programA -> empty .)


state 10

    (8) vars -> VAR . varsA
    (9) varsA -> . varsB SEMICOLON varsF
    (10) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (11) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (42) tipoSimple -> . INT tipoSimpleNP1
    (43) tipoSimple -> . FLOAT tipoSimpleNP1

    FILE            shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    varsA                          shift and go to state 15
    varsB                          shift and go to state 16
    tipoSimple                     shift and go to state 18

state 11

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB . main
    (39) main -> . MAINSTART mainNP1 bloque getGlobalMemReqs

    MAINSTART       shift and go to state 22

    main                           shift and go to state 21

state 12

    (6) programB -> funcion . programB
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (27) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (165) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 165 (empty -> .)

    funcion                        shift and go to state 12
    programB                       shift and go to state 23
    empty                          shift and go to state 13

state 13

    (7) programB -> empty .

    MAINSTART       reduce using rule 7 (programB -> empty .)


state 14

    (27) funcion -> FUNC . funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (32) funcionA -> . tipoSimple funcionANP1
    (33) funcionA -> . VOID funcionANP1
    (42) tipoSimple -> . INT tipoSimpleNP1
    (43) tipoSimple -> . FLOAT tipoSimpleNP1

    VOID            shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    funcionA                       shift and go to state 24
    tipoSimple                     shift and go to state 25

state 15

    (8) vars -> VAR varsA .

    FUNC            reduce using rule 8 (vars -> VAR varsA .)
    MAINSTART       reduce using rule 8 (vars -> VAR varsA .)
    LEFTCURLY       reduce using rule 8 (vars -> VAR varsA .)


state 16

    (9) varsA -> varsB . SEMICOLON varsF

    SEMICOLON       shift and go to state 27


state 17

    (10) varsB -> FILE . varsNP2 ID varsNP3 varsNP6 varsE
    (12) varsNP2 -> .

    ID              reduce using rule 12 (varsNP2 -> .)

    varsNP2                        shift and go to state 28

state 18

    (11) varsB -> tipoSimple . varsNP2 ID varsNP3 varsC varsNP6
    (12) varsNP2 -> .

    ID              reduce using rule 12 (varsNP2 -> .)

    varsNP2                        shift and go to state 29

state 19

    (42) tipoSimple -> INT . tipoSimpleNP1
    (44) tipoSimpleNP1 -> .

    ID              reduce using rule 44 (tipoSimpleNP1 -> .)

    tipoSimpleNP1                  shift and go to state 30

state 20

    (43) tipoSimple -> FLOAT . tipoSimpleNP1
    (44) tipoSimpleNP1 -> .

    ID              reduce using rule 44 (tipoSimpleNP1 -> .)

    tipoSimpleNP1                  shift and go to state 31

state 21

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .

    $end            reduce using rule 1 (program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .)


state 22

    (39) main -> MAINSTART . mainNP1 bloque getGlobalMemReqs
    (41) mainNP1 -> .

    LEFTCURLY       reduce using rule 41 (mainNP1 -> .)

    mainNP1                        shift and go to state 32

state 23

    (6) programB -> funcion programB .

    MAINSTART       reduce using rule 6 (programB -> funcion programB .)


state 24

    (27) funcion -> FUNC funcionA . funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (30) funcionNP1 -> .

    ID              reduce using rule 30 (funcionNP1 -> .)

    funcionNP1                     shift and go to state 33

state 25

    (32) funcionA -> tipoSimple . funcionANP1
    (34) funcionANP1 -> .

    ID              reduce using rule 34 (funcionANP1 -> .)

    funcionANP1                    shift and go to state 34

state 26

    (33) funcionA -> VOID . funcionANP1
    (34) funcionANP1 -> .

    ID              reduce using rule 34 (funcionANP1 -> .)

    funcionANP1                    shift and go to state 35

state 27

    (9) varsA -> varsB SEMICOLON . varsF
    (25) varsF -> . varsA
    (26) varsF -> . empty
    (9) varsA -> . varsB SEMICOLON varsF
    (165) empty -> .
    (10) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (11) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (42) tipoSimple -> . INT tipoSimpleNP1
    (43) tipoSimple -> . FLOAT tipoSimpleNP1

    FUNC            reduce using rule 165 (empty -> .)
    MAINSTART       reduce using rule 165 (empty -> .)
    LEFTCURLY       reduce using rule 165 (empty -> .)
    FILE            shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    varsB                          shift and go to state 16
    varsF                          shift and go to state 36
    varsA                          shift and go to state 37
    empty                          shift and go to state 38
    tipoSimple                     shift and go to state 18

state 28

    (10) varsB -> FILE varsNP2 . ID varsNP3 varsNP6 varsE

    ID              shift and go to state 39


state 29

    (11) varsB -> tipoSimple varsNP2 . ID varsNP3 varsC varsNP6

    ID              shift and go to state 40


state 30

    (42) tipoSimple -> INT tipoSimpleNP1 .

    ID              reduce using rule 42 (tipoSimple -> INT tipoSimpleNP1 .)


state 31

    (43) tipoSimple -> FLOAT tipoSimpleNP1 .

    ID              reduce using rule 43 (tipoSimple -> FLOAT tipoSimpleNP1 .)


state 32

    (39) main -> MAINSTART mainNP1 . bloque getGlobalMemReqs
    (50) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 41

state 33

    (27) funcion -> FUNC funcionA funcionNP1 . ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    ID              shift and go to state 43


state 34

    (32) funcionA -> tipoSimple funcionANP1 .

    ID              reduce using rule 32 (funcionA -> tipoSimple funcionANP1 .)


state 35

    (33) funcionA -> VOID funcionANP1 .

    ID              reduce using rule 33 (funcionA -> VOID funcionANP1 .)


state 36

    (9) varsA -> varsB SEMICOLON varsF .

    FUNC            reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)
    MAINSTART       reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)
    LEFTCURLY       reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)


state 37

    (25) varsF -> varsA .

    FUNC            reduce using rule 25 (varsF -> varsA .)
    MAINSTART       reduce using rule 25 (varsF -> varsA .)
    LEFTCURLY       reduce using rule 25 (varsF -> varsA .)


state 38

    (26) varsF -> empty .

    FUNC            reduce using rule 26 (varsF -> empty .)
    MAINSTART       reduce using rule 26 (varsF -> empty .)
    LEFTCURLY       reduce using rule 26 (varsF -> empty .)


state 39

    (10) varsB -> FILE varsNP2 ID . varsNP3 varsNP6 varsE
    (24) varsNP3 -> .

    COMMA           reduce using rule 24 (varsNP3 -> .)
    SEMICOLON       reduce using rule 24 (varsNP3 -> .)

    varsNP3                        shift and go to state 44

state 40

    (11) varsB -> tipoSimple varsNP2 ID . varsNP3 varsC varsNP6
    (24) varsNP3 -> .

    LEFTBRACKET     reduce using rule 24 (varsNP3 -> .)
    SEMICOLON       reduce using rule 24 (varsNP3 -> .)

    varsNP3                        shift and go to state 45

state 41

    (39) main -> MAINSTART mainNP1 bloque . getGlobalMemReqs
    (40) getGlobalMemReqs -> .

    $end            reduce using rule 40 (getGlobalMemReqs -> .)

    getGlobalMemReqs               shift and go to state 46

state 42

    (50) bloque -> LEFTCURLY . bloqueA RIGHTCURLY
    (51) bloqueA -> . estatuto bloqueA
    (52) bloqueA -> . empty
    (53) estatuto -> . estatutoNP1 estatutoA
    (165) empty -> .
    (63) estatutoNP1 -> .

    RIGHTCURLY      reduce using rule 165 (empty -> .)
    ID              reduce using rule 63 (estatutoNP1 -> .)
    READ            reduce using rule 63 (estatutoNP1 -> .)
    WRITE           reduce using rule 63 (estatutoNP1 -> .)
    RETURN          reduce using rule 63 (estatutoNP1 -> .)
    IF              reduce using rule 63 (estatutoNP1 -> .)
    FROM            reduce using rule 63 (estatutoNP1 -> .)
    HISTOGRAM       reduce using rule 63 (estatutoNP1 -> .)
    BOXPLOT         reduce using rule 63 (estatutoNP1 -> .)

    bloqueA                        shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    estatutoNP1                    shift and go to state 50

state 43

    (27) funcion -> FUNC funcionA funcionNP1 ID . funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (31) funcionNP2 -> .

    LEFTPAR         reduce using rule 31 (funcionNP2 -> .)

    funcionNP2                     shift and go to state 51

state 44

    (10) varsB -> FILE varsNP2 ID varsNP3 . varsNP6 varsE
    (13) varsNP6 -> .

    COMMA           reduce using rule 13 (varsNP6 -> .)
    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 52

state 45

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 . varsC varsNP6
    (14) varsC -> . LEFTBRACKET varIsArray CTI varsNP4 RIGHTBRACKET varsD
    (15) varsC -> . empty
    (165) empty -> .

    LEFTBRACKET     shift and go to state 54
    SEMICOLON       reduce using rule 165 (empty -> .)

    varsC                          shift and go to state 53
    empty                          shift and go to state 55

state 46

    (39) main -> MAINSTART mainNP1 bloque getGlobalMemReqs .

    $end            reduce using rule 39 (main -> MAINSTART mainNP1 bloque getGlobalMemReqs .)


state 47

    (50) bloque -> LEFTCURLY bloqueA . RIGHTCURLY

    RIGHTCURLY      shift and go to state 56


state 48

    (51) bloqueA -> estatuto . bloqueA
    (51) bloqueA -> . estatuto bloqueA
    (52) bloqueA -> . empty
    (53) estatuto -> . estatutoNP1 estatutoA
    (165) empty -> .
    (63) estatutoNP1 -> .

    RIGHTCURLY      reduce using rule 165 (empty -> .)
    ID              reduce using rule 63 (estatutoNP1 -> .)
    READ            reduce using rule 63 (estatutoNP1 -> .)
    WRITE           reduce using rule 63 (estatutoNP1 -> .)
    RETURN          reduce using rule 63 (estatutoNP1 -> .)
    IF              reduce using rule 63 (estatutoNP1 -> .)
    FROM            reduce using rule 63 (estatutoNP1 -> .)
    HISTOGRAM       reduce using rule 63 (estatutoNP1 -> .)
    BOXPLOT         reduce using rule 63 (estatutoNP1 -> .)

    estatuto                       shift and go to state 48
    bloqueA                        shift and go to state 57
    empty                          shift and go to state 49
    estatutoNP1                    shift and go to state 50

state 49

    (52) bloqueA -> empty .

    RIGHTCURLY      reduce using rule 52 (bloqueA -> empty .)


state 50

    (53) estatuto -> estatutoNP1 . estatutoA
    (54) estatutoA -> . asignacion
    (55) estatutoA -> . llamada checkIfVoid
    (56) estatutoA -> . read
    (57) estatutoA -> . escritura
    (58) estatutoA -> . return
    (59) estatutoA -> . condicion
    (60) estatutoA -> . ciclo
    (61) estatutoA -> . specialGraph
    (64) asignacion -> . variable ASSIGNOP asignacionNP1 exp asignacionNP2
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (74) read -> . READ ID readNP1
    (76) escritura -> . WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (86) return -> . RETURN exp returnNP1
    (88) condicion -> . IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2
    (94) ciclo -> . FROM exp TO exp DO cicloNP1 bloque cicloNP2
    (158) specialGraph -> . specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph
    (97) variable -> . ID variableNP1 variableA
    (159) specialGraphFunc -> . HISTOGRAM
    (160) specialGraphFunc -> . BOXPLOT

    ID              shift and go to state 68
    READ            shift and go to state 69
    WRITE           shift and go to state 70
    RETURN          shift and go to state 71
    IF              shift and go to state 72
    FROM            shift and go to state 73
    HISTOGRAM       shift and go to state 75
    BOXPLOT         shift and go to state 76

    estatutoA                      shift and go to state 58
    asignacion                     shift and go to state 59
    llamada                        shift and go to state 60
    read                           shift and go to state 61
    escritura                      shift and go to state 62
    return                         shift and go to state 63
    condicion                      shift and go to state 64
    ciclo                          shift and go to state 65
    specialGraph                   shift and go to state 66
    variable                       shift and go to state 67
    specialGraphFunc               shift and go to state 74

state 51

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 . LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    LEFTPAR         shift and go to state 77


state 52

    (10) varsB -> FILE varsNP2 ID varsNP3 varsNP6 . varsE
    (22) varsE -> . COMMA ID varsNP3 varsNP6 varsE
    (23) varsE -> . empty
    (165) empty -> .

    COMMA           shift and go to state 79
    SEMICOLON       reduce using rule 165 (empty -> .)

    varsE                          shift and go to state 78
    empty                          shift and go to state 80

state 53

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 varsC . varsNP6
    (13) varsNP6 -> .

    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 81

state 54

    (14) varsC -> LEFTBRACKET . varIsArray CTI varsNP4 RIGHTBRACKET varsD
    (16) varIsArray -> .

    CTI             reduce using rule 16 (varIsArray -> .)

    varIsArray                     shift and go to state 82

state 55

    (15) varsC -> empty .

    SEMICOLON       reduce using rule 15 (varsC -> empty .)


state 56

    (50) bloque -> LEFTCURLY bloqueA RIGHTCURLY .

    $end            reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ELSE            reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ID              reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    READ            reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    WRITE           reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    RETURN          reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    IF              reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FROM            reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    HISTOGRAM       reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    BOXPLOT         reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    RIGHTCURLY      reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FUNC            reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    MAINSTART       reduce using rule 50 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)


state 57

    (51) bloqueA -> estatuto bloqueA .

    RIGHTCURLY      reduce using rule 51 (bloqueA -> estatuto bloqueA .)


state 58

    (53) estatuto -> estatutoNP1 estatutoA .

    ID              reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    READ            reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    WRITE           reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    RETURN          reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    IF              reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    FROM            reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    HISTOGRAM       reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    BOXPLOT         reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)
    RIGHTCURLY      reduce using rule 53 (estatuto -> estatutoNP1 estatutoA .)


state 59

    (54) estatutoA -> asignacion .

    ID              reduce using rule 54 (estatutoA -> asignacion .)
    READ            reduce using rule 54 (estatutoA -> asignacion .)
    WRITE           reduce using rule 54 (estatutoA -> asignacion .)
    RETURN          reduce using rule 54 (estatutoA -> asignacion .)
    IF              reduce using rule 54 (estatutoA -> asignacion .)
    FROM            reduce using rule 54 (estatutoA -> asignacion .)
    HISTOGRAM       reduce using rule 54 (estatutoA -> asignacion .)
    BOXPLOT         reduce using rule 54 (estatutoA -> asignacion .)
    RIGHTCURLY      reduce using rule 54 (estatutoA -> asignacion .)


state 60

    (55) estatutoA -> llamada . checkIfVoid
    (62) checkIfVoid -> .

    ID              reduce using rule 62 (checkIfVoid -> .)
    READ            reduce using rule 62 (checkIfVoid -> .)
    WRITE           reduce using rule 62 (checkIfVoid -> .)
    RETURN          reduce using rule 62 (checkIfVoid -> .)
    IF              reduce using rule 62 (checkIfVoid -> .)
    FROM            reduce using rule 62 (checkIfVoid -> .)
    HISTOGRAM       reduce using rule 62 (checkIfVoid -> .)
    BOXPLOT         reduce using rule 62 (checkIfVoid -> .)
    RIGHTCURLY      reduce using rule 62 (checkIfVoid -> .)

    checkIfVoid                    shift and go to state 83

state 61

    (56) estatutoA -> read .

    ID              reduce using rule 56 (estatutoA -> read .)
    READ            reduce using rule 56 (estatutoA -> read .)
    WRITE           reduce using rule 56 (estatutoA -> read .)
    RETURN          reduce using rule 56 (estatutoA -> read .)
    IF              reduce using rule 56 (estatutoA -> read .)
    FROM            reduce using rule 56 (estatutoA -> read .)
    HISTOGRAM       reduce using rule 56 (estatutoA -> read .)
    BOXPLOT         reduce using rule 56 (estatutoA -> read .)
    RIGHTCURLY      reduce using rule 56 (estatutoA -> read .)


state 62

    (57) estatutoA -> escritura .

    ID              reduce using rule 57 (estatutoA -> escritura .)
    READ            reduce using rule 57 (estatutoA -> escritura .)
    WRITE           reduce using rule 57 (estatutoA -> escritura .)
    RETURN          reduce using rule 57 (estatutoA -> escritura .)
    IF              reduce using rule 57 (estatutoA -> escritura .)
    FROM            reduce using rule 57 (estatutoA -> escritura .)
    HISTOGRAM       reduce using rule 57 (estatutoA -> escritura .)
    BOXPLOT         reduce using rule 57 (estatutoA -> escritura .)
    RIGHTCURLY      reduce using rule 57 (estatutoA -> escritura .)


state 63

    (58) estatutoA -> return .

    ID              reduce using rule 58 (estatutoA -> return .)
    READ            reduce using rule 58 (estatutoA -> return .)
    WRITE           reduce using rule 58 (estatutoA -> return .)
    RETURN          reduce using rule 58 (estatutoA -> return .)
    IF              reduce using rule 58 (estatutoA -> return .)
    FROM            reduce using rule 58 (estatutoA -> return .)
    HISTOGRAM       reduce using rule 58 (estatutoA -> return .)
    BOXPLOT         reduce using rule 58 (estatutoA -> return .)
    RIGHTCURLY      reduce using rule 58 (estatutoA -> return .)


state 64

    (59) estatutoA -> condicion .

    ID              reduce using rule 59 (estatutoA -> condicion .)
    READ            reduce using rule 59 (estatutoA -> condicion .)
    WRITE           reduce using rule 59 (estatutoA -> condicion .)
    RETURN          reduce using rule 59 (estatutoA -> condicion .)
    IF              reduce using rule 59 (estatutoA -> condicion .)
    FROM            reduce using rule 59 (estatutoA -> condicion .)
    HISTOGRAM       reduce using rule 59 (estatutoA -> condicion .)
    BOXPLOT         reduce using rule 59 (estatutoA -> condicion .)
    RIGHTCURLY      reduce using rule 59 (estatutoA -> condicion .)


state 65

    (60) estatutoA -> ciclo .

    ID              reduce using rule 60 (estatutoA -> ciclo .)
    READ            reduce using rule 60 (estatutoA -> ciclo .)
    WRITE           reduce using rule 60 (estatutoA -> ciclo .)
    RETURN          reduce using rule 60 (estatutoA -> ciclo .)
    IF              reduce using rule 60 (estatutoA -> ciclo .)
    FROM            reduce using rule 60 (estatutoA -> ciclo .)
    HISTOGRAM       reduce using rule 60 (estatutoA -> ciclo .)
    BOXPLOT         reduce using rule 60 (estatutoA -> ciclo .)
    RIGHTCURLY      reduce using rule 60 (estatutoA -> ciclo .)


state 66

    (61) estatutoA -> specialGraph .

    ID              reduce using rule 61 (estatutoA -> specialGraph .)
    READ            reduce using rule 61 (estatutoA -> specialGraph .)
    WRITE           reduce using rule 61 (estatutoA -> specialGraph .)
    RETURN          reduce using rule 61 (estatutoA -> specialGraph .)
    IF              reduce using rule 61 (estatutoA -> specialGraph .)
    FROM            reduce using rule 61 (estatutoA -> specialGraph .)
    HISTOGRAM       reduce using rule 61 (estatutoA -> specialGraph .)
    BOXPLOT         reduce using rule 61 (estatutoA -> specialGraph .)
    RIGHTCURLY      reduce using rule 61 (estatutoA -> specialGraph .)


state 67

    (64) asignacion -> variable . ASSIGNOP asignacionNP1 exp asignacionNP2

    ASSIGNOP        shift and go to state 84


state 68

    (67) llamada -> ID . llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (97) variable -> ID . variableNP1 variableA
    (72) llamadaNP1 -> .
    (98) variableNP1 -> .

    LEFTPAR         reduce using rule 72 (llamadaNP1 -> .)
    LEFTBRACKET     reduce using rule 98 (variableNP1 -> .)
    ASSIGNOP        reduce using rule 98 (variableNP1 -> .)
    MULOP           reduce using rule 98 (variableNP1 -> .)
    DIVOP           reduce using rule 98 (variableNP1 -> .)
    SUMOP           reduce using rule 98 (variableNP1 -> .)
    SUBOP           reduce using rule 98 (variableNP1 -> .)
    LESSTHANOP      reduce using rule 98 (variableNP1 -> .)
    GREATERTHANOP   reduce using rule 98 (variableNP1 -> .)
    DIFFERENTOP     reduce using rule 98 (variableNP1 -> .)
    EQUALOP         reduce using rule 98 (variableNP1 -> .)
    ANDOP           reduce using rule 98 (variableNP1 -> .)
    OROP            reduce using rule 98 (variableNP1 -> .)
    ID              reduce using rule 98 (variableNP1 -> .)
    READ            reduce using rule 98 (variableNP1 -> .)
    WRITE           reduce using rule 98 (variableNP1 -> .)
    RETURN          reduce using rule 98 (variableNP1 -> .)
    IF              reduce using rule 98 (variableNP1 -> .)
    FROM            reduce using rule 98 (variableNP1 -> .)
    HISTOGRAM       reduce using rule 98 (variableNP1 -> .)
    BOXPLOT         reduce using rule 98 (variableNP1 -> .)
    RIGHTCURLY      reduce using rule 98 (variableNP1 -> .)
    TO              reduce using rule 98 (variableNP1 -> .)
    RIGHTPAR        reduce using rule 98 (variableNP1 -> .)
    DO              reduce using rule 98 (variableNP1 -> .)
    COMMA           reduce using rule 98 (variableNP1 -> .)
    RIGHTBRACKET    reduce using rule 98 (variableNP1 -> .)

    llamadaNP1                     shift and go to state 85
    variableNP1                    shift and go to state 86

state 69

    (74) read -> READ . ID readNP1

    ID              shift and go to state 87


state 70

    (76) escritura -> WRITE . escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (77) escrituraNP1 -> .

    LEFTPAR         reduce using rule 77 (escrituraNP1 -> .)

    escrituraNP1                   shift and go to state 88

state 71

    (86) return -> RETURN . exp returnNP1
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 89
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 72

    (88) condicion -> IF . LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2

    LEFTPAR         shift and go to state 111


state 73

    (94) ciclo -> FROM . exp TO exp DO cicloNP1 bloque cicloNP2
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 112
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 74

    (158) specialGraph -> specialGraphFunc . addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph
    (161) addSpecialToStack -> .

    LEFTPAR         reduce using rule 161 (addSpecialToStack -> .)

    addSpecialToStack              shift and go to state 113

state 75

    (159) specialGraphFunc -> HISTOGRAM .

    LEFTPAR         reduce using rule 159 (specialGraphFunc -> HISTOGRAM .)


state 76

    (160) specialGraphFunc -> BOXPLOT .

    LEFTPAR         reduce using rule 160 (specialGraphFunc -> BOXPLOT .)


state 77

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR . funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (35) funcionB -> . params
    (36) funcionB -> . empty
    (45) params -> . tipoSimple paramsNP1 ID paramsNP2 paramsA
    (165) empty -> .
    (42) tipoSimple -> . INT tipoSimpleNP1
    (43) tipoSimple -> . FLOAT tipoSimpleNP1

    RIGHTPAR        reduce using rule 165 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    funcionB                       shift and go to state 114
    params                         shift and go to state 115
    empty                          shift and go to state 116
    tipoSimple                     shift and go to state 117

state 78

    (10) varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .

    SEMICOLON       reduce using rule 10 (varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .)


state 79

    (22) varsE -> COMMA . ID varsNP3 varsNP6 varsE

    ID              shift and go to state 118


state 80

    (23) varsE -> empty .

    SEMICOLON       reduce using rule 23 (varsE -> empty .)


state 81

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .

    SEMICOLON       reduce using rule 11 (varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .)


state 82

    (14) varsC -> LEFTBRACKET varIsArray . CTI varsNP4 RIGHTBRACKET varsD

    CTI             shift and go to state 119


state 83

    (55) estatutoA -> llamada checkIfVoid .

    ID              reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    READ            reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    WRITE           reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    RETURN          reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    IF              reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    FROM            reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    HISTOGRAM       reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    BOXPLOT         reduce using rule 55 (estatutoA -> llamada checkIfVoid .)
    RIGHTCURLY      reduce using rule 55 (estatutoA -> llamada checkIfVoid .)


state 84

    (64) asignacion -> variable ASSIGNOP . asignacionNP1 exp asignacionNP2
    (65) asignacionNP1 -> .

    LEFTPAR         reduce using rule 65 (asignacionNP1 -> .)
    CTI             reduce using rule 65 (asignacionNP1 -> .)
    CTF             reduce using rule 65 (asignacionNP1 -> .)
    ID              reduce using rule 65 (asignacionNP1 -> .)
    SUBOP           reduce using rule 65 (asignacionNP1 -> .)
    MEAN            reduce using rule 65 (asignacionNP1 -> .)
    MEDIAN          reduce using rule 65 (asignacionNP1 -> .)
    MODE            reduce using rule 65 (asignacionNP1 -> .)
    VARIANCE        reduce using rule 65 (asignacionNP1 -> .)
    STDDEV          reduce using rule 65 (asignacionNP1 -> .)

    asignacionNP1                  shift and go to state 120

state 85

    (67) llamada -> ID llamadaNP1 . LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3

    LEFTPAR         shift and go to state 121


state 86

    (97) variable -> ID variableNP1 . variableA
    (99) variableA -> . LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB
    (100) variableA -> . empty
    (165) empty -> .

    LEFTBRACKET     shift and go to state 123
    ASSIGNOP        reduce using rule 165 (empty -> .)
    MULOP           reduce using rule 165 (empty -> .)
    DIVOP           reduce using rule 165 (empty -> .)
    SUMOP           reduce using rule 165 (empty -> .)
    SUBOP           reduce using rule 165 (empty -> .)
    LESSTHANOP      reduce using rule 165 (empty -> .)
    GREATERTHANOP   reduce using rule 165 (empty -> .)
    DIFFERENTOP     reduce using rule 165 (empty -> .)
    EQUALOP         reduce using rule 165 (empty -> .)
    ANDOP           reduce using rule 165 (empty -> .)
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    variableA                      shift and go to state 122
    empty                          shift and go to state 124

state 87

    (74) read -> READ ID . readNP1
    (75) readNP1 -> .

    ID              reduce using rule 75 (readNP1 -> .)
    READ            reduce using rule 75 (readNP1 -> .)
    WRITE           reduce using rule 75 (readNP1 -> .)
    RETURN          reduce using rule 75 (readNP1 -> .)
    IF              reduce using rule 75 (readNP1 -> .)
    FROM            reduce using rule 75 (readNP1 -> .)
    HISTOGRAM       reduce using rule 75 (readNP1 -> .)
    BOXPLOT         reduce using rule 75 (readNP1 -> .)
    RIGHTCURLY      reduce using rule 75 (readNP1 -> .)

    readNP1                        shift and go to state 125

state 88

    (76) escritura -> WRITE escrituraNP1 . LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3

    LEFTPAR         shift and go to state 126


state 89

    (86) return -> RETURN exp . returnNP1
    (87) returnNP1 -> .

    ID              reduce using rule 87 (returnNP1 -> .)
    READ            reduce using rule 87 (returnNP1 -> .)
    WRITE           reduce using rule 87 (returnNP1 -> .)
    RETURN          reduce using rule 87 (returnNP1 -> .)
    IF              reduce using rule 87 (returnNP1 -> .)
    FROM            reduce using rule 87 (returnNP1 -> .)
    HISTOGRAM       reduce using rule 87 (returnNP1 -> .)
    BOXPLOT         reduce using rule 87 (returnNP1 -> .)
    RIGHTCURLY      reduce using rule 87 (returnNP1 -> .)

    returnNP1                      shift and go to state 127

state 90

    (108) exp -> exp1 . expA
    (110) expA -> . OROP operNP1 exp1 expNP1 expA
    (111) expA -> . empty
    (165) empty -> .

    OROP            shift and go to state 129
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    expA                           shift and go to state 128
    empty                          shift and go to state 130

state 91

    (112) exp1 -> exp2 . exp1A
    (114) exp1A -> . ANDOP operNP1 exp2 exp1NP1 exp1A
    (115) exp1A -> . empty
    (165) empty -> .

    ANDOP           shift and go to state 132
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    exp1A                          shift and go to state 131
    empty                          shift and go to state 133

state 92

    (116) exp2 -> exp3 . exp2A
    (117) exp2A -> . exp2B operNP1 exp3 exp2ANP1
    (118) exp2A -> . empty
    (120) exp2B -> . LESSTHANOP
    (121) exp2B -> . GREATERTHANOP
    (122) exp2B -> . DIFFERENTOP
    (123) exp2B -> . EQUALOP
    (165) empty -> .

    LESSTHANOP      shift and go to state 137
    GREATERTHANOP   shift and go to state 138
    DIFFERENTOP     shift and go to state 139
    EQUALOP         shift and go to state 140
    ANDOP           reduce using rule 165 (empty -> .)
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    exp2A                          shift and go to state 134
    exp2B                          shift and go to state 135
    empty                          shift and go to state 136

state 93

    (124) exp3 -> termino . exp3A
    (126) exp3A -> . exp3B operNP1 termino exp3NP1 exp3A
    (127) exp3A -> . empty
    (128) exp3B -> . SUMOP
    (129) exp3B -> . SUBOP
    (165) empty -> .

    SUMOP           shift and go to state 144
    SUBOP           shift and go to state 145
    LESSTHANOP      reduce using rule 165 (empty -> .)
    GREATERTHANOP   reduce using rule 165 (empty -> .)
    DIFFERENTOP     reduce using rule 165 (empty -> .)
    EQUALOP         reduce using rule 165 (empty -> .)
    ANDOP           reduce using rule 165 (empty -> .)
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    exp3A                          shift and go to state 141
    exp3B                          shift and go to state 142
    empty                          shift and go to state 143

state 94

    (130) termino -> terminoC . terminoA
    (131) terminoA -> . terminoB operNP1 terminoC terminoANP1 terminoA
    (132) terminoA -> . empty
    (134) terminoB -> . MULOP
    (135) terminoB -> . DIVOP
    (165) empty -> .

    MULOP           shift and go to state 149
    DIVOP           shift and go to state 150
    SUMOP           reduce using rule 165 (empty -> .)
    SUBOP           reduce using rule 165 (empty -> .)
    LESSTHANOP      reduce using rule 165 (empty -> .)
    GREATERTHANOP   reduce using rule 165 (empty -> .)
    DIFFERENTOP     reduce using rule 165 (empty -> .)
    EQUALOP         reduce using rule 165 (empty -> .)
    ANDOP           reduce using rule 165 (empty -> .)
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    terminoA                       shift and go to state 146
    terminoB                       shift and go to state 147
    empty                          shift and go to state 148

state 95

    (136) terminoC -> factor .

    MULOP           reduce using rule 136 (terminoC -> factor .)
    DIVOP           reduce using rule 136 (terminoC -> factor .)
    SUMOP           reduce using rule 136 (terminoC -> factor .)
    SUBOP           reduce using rule 136 (terminoC -> factor .)
    LESSTHANOP      reduce using rule 136 (terminoC -> factor .)
    GREATERTHANOP   reduce using rule 136 (terminoC -> factor .)
    DIFFERENTOP     reduce using rule 136 (terminoC -> factor .)
    EQUALOP         reduce using rule 136 (terminoC -> factor .)
    ANDOP           reduce using rule 136 (terminoC -> factor .)
    OROP            reduce using rule 136 (terminoC -> factor .)
    ID              reduce using rule 136 (terminoC -> factor .)
    READ            reduce using rule 136 (terminoC -> factor .)
    WRITE           reduce using rule 136 (terminoC -> factor .)
    RETURN          reduce using rule 136 (terminoC -> factor .)
    IF              reduce using rule 136 (terminoC -> factor .)
    FROM            reduce using rule 136 (terminoC -> factor .)
    HISTOGRAM       reduce using rule 136 (terminoC -> factor .)
    BOXPLOT         reduce using rule 136 (terminoC -> factor .)
    RIGHTCURLY      reduce using rule 136 (terminoC -> factor .)
    TO              reduce using rule 136 (terminoC -> factor .)
    RIGHTPAR        reduce using rule 136 (terminoC -> factor .)
    DO              reduce using rule 136 (terminoC -> factor .)
    COMMA           reduce using rule 136 (terminoC -> factor .)
    RIGHTBRACKET    reduce using rule 136 (terminoC -> factor .)


state 96

    (137) terminoC -> llamada . checkIfNotVoid
    (138) checkIfNotVoid -> .

    MULOP           reduce using rule 138 (checkIfNotVoid -> .)
    DIVOP           reduce using rule 138 (checkIfNotVoid -> .)
    SUMOP           reduce using rule 138 (checkIfNotVoid -> .)
    SUBOP           reduce using rule 138 (checkIfNotVoid -> .)
    LESSTHANOP      reduce using rule 138 (checkIfNotVoid -> .)
    GREATERTHANOP   reduce using rule 138 (checkIfNotVoid -> .)
    DIFFERENTOP     reduce using rule 138 (checkIfNotVoid -> .)
    EQUALOP         reduce using rule 138 (checkIfNotVoid -> .)
    ANDOP           reduce using rule 138 (checkIfNotVoid -> .)
    OROP            reduce using rule 138 (checkIfNotVoid -> .)
    ID              reduce using rule 138 (checkIfNotVoid -> .)
    READ            reduce using rule 138 (checkIfNotVoid -> .)
    WRITE           reduce using rule 138 (checkIfNotVoid -> .)
    RETURN          reduce using rule 138 (checkIfNotVoid -> .)
    IF              reduce using rule 138 (checkIfNotVoid -> .)
    FROM            reduce using rule 138 (checkIfNotVoid -> .)
    HISTOGRAM       reduce using rule 138 (checkIfNotVoid -> .)
    BOXPLOT         reduce using rule 138 (checkIfNotVoid -> .)
    RIGHTCURLY      reduce using rule 138 (checkIfNotVoid -> .)
    TO              reduce using rule 138 (checkIfNotVoid -> .)
    RIGHTPAR        reduce using rule 138 (checkIfNotVoid -> .)
    DO              reduce using rule 138 (checkIfNotVoid -> .)
    COMMA           reduce using rule 138 (checkIfNotVoid -> .)
    RIGHTBRACKET    reduce using rule 138 (checkIfNotVoid -> .)

    checkIfNotVoid                 shift and go to state 151

state 97

    (139) factor -> LEFTPAR . operNP1 exp RIGHTPAR factorNP1
    (148) operNP1 -> .

    LEFTPAR         reduce using rule 148 (operNP1 -> .)
    CTI             reduce using rule 148 (operNP1 -> .)
    CTF             reduce using rule 148 (operNP1 -> .)
    ID              reduce using rule 148 (operNP1 -> .)
    SUBOP           reduce using rule 148 (operNP1 -> .)
    MEAN            reduce using rule 148 (operNP1 -> .)
    MEDIAN          reduce using rule 148 (operNP1 -> .)
    MODE            reduce using rule 148 (operNP1 -> .)
    VARIANCE        reduce using rule 148 (operNP1 -> .)
    STDDEV          reduce using rule 148 (operNP1 -> .)

    operNP1                        shift and go to state 152

state 98

    (140) factor -> CTI . factorNP2
    (150) factorNP2 -> .

    MULOP           reduce using rule 150 (factorNP2 -> .)
    DIVOP           reduce using rule 150 (factorNP2 -> .)
    SUMOP           reduce using rule 150 (factorNP2 -> .)
    SUBOP           reduce using rule 150 (factorNP2 -> .)
    LESSTHANOP      reduce using rule 150 (factorNP2 -> .)
    GREATERTHANOP   reduce using rule 150 (factorNP2 -> .)
    DIFFERENTOP     reduce using rule 150 (factorNP2 -> .)
    EQUALOP         reduce using rule 150 (factorNP2 -> .)
    ANDOP           reduce using rule 150 (factorNP2 -> .)
    OROP            reduce using rule 150 (factorNP2 -> .)
    ID              reduce using rule 150 (factorNP2 -> .)
    READ            reduce using rule 150 (factorNP2 -> .)
    WRITE           reduce using rule 150 (factorNP2 -> .)
    RETURN          reduce using rule 150 (factorNP2 -> .)
    IF              reduce using rule 150 (factorNP2 -> .)
    FROM            reduce using rule 150 (factorNP2 -> .)
    HISTOGRAM       reduce using rule 150 (factorNP2 -> .)
    BOXPLOT         reduce using rule 150 (factorNP2 -> .)
    RIGHTCURLY      reduce using rule 150 (factorNP2 -> .)
    TO              reduce using rule 150 (factorNP2 -> .)
    RIGHTPAR        reduce using rule 150 (factorNP2 -> .)
    DO              reduce using rule 150 (factorNP2 -> .)
    COMMA           reduce using rule 150 (factorNP2 -> .)
    RIGHTBRACKET    reduce using rule 150 (factorNP2 -> .)

    factorNP2                      shift and go to state 153

state 99

    (141) factor -> CTF . factorNP3
    (151) factorNP3 -> .

    MULOP           reduce using rule 151 (factorNP3 -> .)
    DIVOP           reduce using rule 151 (factorNP3 -> .)
    SUMOP           reduce using rule 151 (factorNP3 -> .)
    SUBOP           reduce using rule 151 (factorNP3 -> .)
    LESSTHANOP      reduce using rule 151 (factorNP3 -> .)
    GREATERTHANOP   reduce using rule 151 (factorNP3 -> .)
    DIFFERENTOP     reduce using rule 151 (factorNP3 -> .)
    EQUALOP         reduce using rule 151 (factorNP3 -> .)
    ANDOP           reduce using rule 151 (factorNP3 -> .)
    OROP            reduce using rule 151 (factorNP3 -> .)
    ID              reduce using rule 151 (factorNP3 -> .)
    READ            reduce using rule 151 (factorNP3 -> .)
    WRITE           reduce using rule 151 (factorNP3 -> .)
    RETURN          reduce using rule 151 (factorNP3 -> .)
    IF              reduce using rule 151 (factorNP3 -> .)
    FROM            reduce using rule 151 (factorNP3 -> .)
    HISTOGRAM       reduce using rule 151 (factorNP3 -> .)
    BOXPLOT         reduce using rule 151 (factorNP3 -> .)
    RIGHTCURLY      reduce using rule 151 (factorNP3 -> .)
    TO              reduce using rule 151 (factorNP3 -> .)
    RIGHTPAR        reduce using rule 151 (factorNP3 -> .)
    DO              reduce using rule 151 (factorNP3 -> .)
    COMMA           reduce using rule 151 (factorNP3 -> .)
    RIGHTBRACKET    reduce using rule 151 (factorNP3 -> .)

    factorNP3                      shift and go to state 154

state 100

    (142) factor -> negative_int . factorNP2
    (150) factorNP2 -> .

    MULOP           reduce using rule 150 (factorNP2 -> .)
    DIVOP           reduce using rule 150 (factorNP2 -> .)
    SUMOP           reduce using rule 150 (factorNP2 -> .)
    SUBOP           reduce using rule 150 (factorNP2 -> .)
    LESSTHANOP      reduce using rule 150 (factorNP2 -> .)
    GREATERTHANOP   reduce using rule 150 (factorNP2 -> .)
    DIFFERENTOP     reduce using rule 150 (factorNP2 -> .)
    EQUALOP         reduce using rule 150 (factorNP2 -> .)
    ANDOP           reduce using rule 150 (factorNP2 -> .)
    OROP            reduce using rule 150 (factorNP2 -> .)
    ID              reduce using rule 150 (factorNP2 -> .)
    READ            reduce using rule 150 (factorNP2 -> .)
    WRITE           reduce using rule 150 (factorNP2 -> .)
    RETURN          reduce using rule 150 (factorNP2 -> .)
    IF              reduce using rule 150 (factorNP2 -> .)
    FROM            reduce using rule 150 (factorNP2 -> .)
    HISTOGRAM       reduce using rule 150 (factorNP2 -> .)
    BOXPLOT         reduce using rule 150 (factorNP2 -> .)
    RIGHTCURLY      reduce using rule 150 (factorNP2 -> .)
    TO              reduce using rule 150 (factorNP2 -> .)
    RIGHTPAR        reduce using rule 150 (factorNP2 -> .)
    DO              reduce using rule 150 (factorNP2 -> .)
    COMMA           reduce using rule 150 (factorNP2 -> .)
    RIGHTBRACKET    reduce using rule 150 (factorNP2 -> .)

    factorNP2                      shift and go to state 155

state 101

    (143) factor -> negative_float . factorNP3
    (151) factorNP3 -> .

    MULOP           reduce using rule 151 (factorNP3 -> .)
    DIVOP           reduce using rule 151 (factorNP3 -> .)
    SUMOP           reduce using rule 151 (factorNP3 -> .)
    SUBOP           reduce using rule 151 (factorNP3 -> .)
    LESSTHANOP      reduce using rule 151 (factorNP3 -> .)
    GREATERTHANOP   reduce using rule 151 (factorNP3 -> .)
    DIFFERENTOP     reduce using rule 151 (factorNP3 -> .)
    EQUALOP         reduce using rule 151 (factorNP3 -> .)
    ANDOP           reduce using rule 151 (factorNP3 -> .)
    OROP            reduce using rule 151 (factorNP3 -> .)
    ID              reduce using rule 151 (factorNP3 -> .)
    READ            reduce using rule 151 (factorNP3 -> .)
    WRITE           reduce using rule 151 (factorNP3 -> .)
    RETURN          reduce using rule 151 (factorNP3 -> .)
    IF              reduce using rule 151 (factorNP3 -> .)
    FROM            reduce using rule 151 (factorNP3 -> .)
    HISTOGRAM       reduce using rule 151 (factorNP3 -> .)
    BOXPLOT         reduce using rule 151 (factorNP3 -> .)
    RIGHTCURLY      reduce using rule 151 (factorNP3 -> .)
    TO              reduce using rule 151 (factorNP3 -> .)
    RIGHTPAR        reduce using rule 151 (factorNP3 -> .)
    DO              reduce using rule 151 (factorNP3 -> .)
    COMMA           reduce using rule 151 (factorNP3 -> .)
    RIGHTBRACKET    reduce using rule 151 (factorNP3 -> .)

    factorNP3                      shift and go to state 156

state 102

    (144) factor -> variable .

    MULOP           reduce using rule 144 (factor -> variable .)
    DIVOP           reduce using rule 144 (factor -> variable .)
    SUMOP           reduce using rule 144 (factor -> variable .)
    SUBOP           reduce using rule 144 (factor -> variable .)
    LESSTHANOP      reduce using rule 144 (factor -> variable .)
    GREATERTHANOP   reduce using rule 144 (factor -> variable .)
    DIFFERENTOP     reduce using rule 144 (factor -> variable .)
    EQUALOP         reduce using rule 144 (factor -> variable .)
    ANDOP           reduce using rule 144 (factor -> variable .)
    OROP            reduce using rule 144 (factor -> variable .)
    ID              reduce using rule 144 (factor -> variable .)
    READ            reduce using rule 144 (factor -> variable .)
    WRITE           reduce using rule 144 (factor -> variable .)
    RETURN          reduce using rule 144 (factor -> variable .)
    IF              reduce using rule 144 (factor -> variable .)
    FROM            reduce using rule 144 (factor -> variable .)
    HISTOGRAM       reduce using rule 144 (factor -> variable .)
    BOXPLOT         reduce using rule 144 (factor -> variable .)
    RIGHTCURLY      reduce using rule 144 (factor -> variable .)
    TO              reduce using rule 144 (factor -> variable .)
    RIGHTPAR        reduce using rule 144 (factor -> variable .)
    DO              reduce using rule 144 (factor -> variable .)
    COMMA           reduce using rule 144 (factor -> variable .)
    RIGHTBRACKET    reduce using rule 144 (factor -> variable .)


state 103

    (145) factor -> special .

    MULOP           reduce using rule 145 (factor -> special .)
    DIVOP           reduce using rule 145 (factor -> special .)
    SUMOP           reduce using rule 145 (factor -> special .)
    SUBOP           reduce using rule 145 (factor -> special .)
    LESSTHANOP      reduce using rule 145 (factor -> special .)
    GREATERTHANOP   reduce using rule 145 (factor -> special .)
    DIFFERENTOP     reduce using rule 145 (factor -> special .)
    EQUALOP         reduce using rule 145 (factor -> special .)
    ANDOP           reduce using rule 145 (factor -> special .)
    OROP            reduce using rule 145 (factor -> special .)
    ID              reduce using rule 145 (factor -> special .)
    READ            reduce using rule 145 (factor -> special .)
    WRITE           reduce using rule 145 (factor -> special .)
    RETURN          reduce using rule 145 (factor -> special .)
    IF              reduce using rule 145 (factor -> special .)
    FROM            reduce using rule 145 (factor -> special .)
    HISTOGRAM       reduce using rule 145 (factor -> special .)
    BOXPLOT         reduce using rule 145 (factor -> special .)
    RIGHTCURLY      reduce using rule 145 (factor -> special .)
    TO              reduce using rule 145 (factor -> special .)
    RIGHTPAR        reduce using rule 145 (factor -> special .)
    DO              reduce using rule 145 (factor -> special .)
    COMMA           reduce using rule 145 (factor -> special .)
    RIGHTBRACKET    reduce using rule 145 (factor -> special .)


state 104

    (146) negative_int -> SUBOP . CTI
    (147) negative_float -> SUBOP . CTF

    CTI             shift and go to state 157
    CTF             shift and go to state 158


state 105

    (152) special -> specialFunc . addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (161) addSpecialToStack -> .

    LEFTPAR         reduce using rule 161 (addSpecialToStack -> .)

    addSpecialToStack              shift and go to state 159

state 106

    (153) specialFunc -> MEAN .

    LEFTPAR         reduce using rule 153 (specialFunc -> MEAN .)


state 107

    (154) specialFunc -> MEDIAN .

    LEFTPAR         reduce using rule 154 (specialFunc -> MEDIAN .)


state 108

    (155) specialFunc -> MODE .

    LEFTPAR         reduce using rule 155 (specialFunc -> MODE .)


state 109

    (156) specialFunc -> VARIANCE .

    LEFTPAR         reduce using rule 156 (specialFunc -> VARIANCE .)


state 110

    (157) specialFunc -> STDDEV .

    LEFTPAR         reduce using rule 157 (specialFunc -> STDDEV .)


state 111

    (88) condicion -> IF LEFTPAR . exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 160
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 112

    (94) ciclo -> FROM exp . TO exp DO cicloNP1 bloque cicloNP2

    TO              shift and go to state 161


state 113

    (158) specialGraph -> specialGraphFunc addSpecialToStack . LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph

    LEFTPAR         shift and go to state 162


state 114

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB . RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    RIGHTPAR        shift and go to state 163


state 115

    (35) funcionB -> params .

    RIGHTPAR        reduce using rule 35 (funcionB -> params .)


state 116

    (36) funcionB -> empty .

    RIGHTPAR        reduce using rule 36 (funcionB -> empty .)


state 117

    (45) params -> tipoSimple . paramsNP1 ID paramsNP2 paramsA
    (48) paramsNP1 -> .

    ID              reduce using rule 48 (paramsNP1 -> .)

    paramsNP1                      shift and go to state 164

state 118

    (22) varsE -> COMMA ID . varsNP3 varsNP6 varsE
    (24) varsNP3 -> .

    COMMA           reduce using rule 24 (varsNP3 -> .)
    SEMICOLON       reduce using rule 24 (varsNP3 -> .)

    varsNP3                        shift and go to state 165

state 119

    (14) varsC -> LEFTBRACKET varIsArray CTI . varsNP4 RIGHTBRACKET varsD
    (17) varsNP4 -> .

    RIGHTBRACKET    reduce using rule 17 (varsNP4 -> .)

    varsNP4                        shift and go to state 166

state 120

    (64) asignacion -> variable ASSIGNOP asignacionNP1 . exp asignacionNP2
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    variable                       shift and go to state 102
    exp                            shift and go to state 167
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 121

    (67) llamada -> ID llamadaNP1 LEFTPAR . loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (79) loeNP2 -> .

    LEFTPAR         reduce using rule 79 (loeNP2 -> .)
    CTI             reduce using rule 79 (loeNP2 -> .)
    CTF             reduce using rule 79 (loeNP2 -> .)
    ID              reduce using rule 79 (loeNP2 -> .)
    SUBOP           reduce using rule 79 (loeNP2 -> .)
    MEAN            reduce using rule 79 (loeNP2 -> .)
    MEDIAN          reduce using rule 79 (loeNP2 -> .)
    MODE            reduce using rule 79 (loeNP2 -> .)
    VARIANCE        reduce using rule 79 (loeNP2 -> .)
    STDDEV          reduce using rule 79 (loeNP2 -> .)
    COMMA           reduce using rule 79 (loeNP2 -> .)
    RIGHTPAR        reduce using rule 79 (loeNP2 -> .)

    loeNP2                         shift and go to state 168

state 122

    (97) variable -> ID variableNP1 variableA .

    ASSIGNOP        reduce using rule 97 (variable -> ID variableNP1 variableA .)
    MULOP           reduce using rule 97 (variable -> ID variableNP1 variableA .)
    DIVOP           reduce using rule 97 (variable -> ID variableNP1 variableA .)
    SUMOP           reduce using rule 97 (variable -> ID variableNP1 variableA .)
    SUBOP           reduce using rule 97 (variable -> ID variableNP1 variableA .)
    LESSTHANOP      reduce using rule 97 (variable -> ID variableNP1 variableA .)
    GREATERTHANOP   reduce using rule 97 (variable -> ID variableNP1 variableA .)
    DIFFERENTOP     reduce using rule 97 (variable -> ID variableNP1 variableA .)
    EQUALOP         reduce using rule 97 (variable -> ID variableNP1 variableA .)
    ANDOP           reduce using rule 97 (variable -> ID variableNP1 variableA .)
    OROP            reduce using rule 97 (variable -> ID variableNP1 variableA .)
    ID              reduce using rule 97 (variable -> ID variableNP1 variableA .)
    READ            reduce using rule 97 (variable -> ID variableNP1 variableA .)
    WRITE           reduce using rule 97 (variable -> ID variableNP1 variableA .)
    RETURN          reduce using rule 97 (variable -> ID variableNP1 variableA .)
    IF              reduce using rule 97 (variable -> ID variableNP1 variableA .)
    FROM            reduce using rule 97 (variable -> ID variableNP1 variableA .)
    HISTOGRAM       reduce using rule 97 (variable -> ID variableNP1 variableA .)
    BOXPLOT         reduce using rule 97 (variable -> ID variableNP1 variableA .)
    RIGHTCURLY      reduce using rule 97 (variable -> ID variableNP1 variableA .)
    TO              reduce using rule 97 (variable -> ID variableNP1 variableA .)
    RIGHTPAR        reduce using rule 97 (variable -> ID variableNP1 variableA .)
    DO              reduce using rule 97 (variable -> ID variableNP1 variableA .)
    COMMA           reduce using rule 97 (variable -> ID variableNP1 variableA .)
    RIGHTBRACKET    reduce using rule 97 (variable -> ID variableNP1 variableA .)


state 123

    (99) variableA -> LEFTBRACKET . check_if_non_atomic exp verify RIGHTBRACKET variableB
    (101) check_if_non_atomic -> .

    LEFTPAR         reduce using rule 101 (check_if_non_atomic -> .)
    CTI             reduce using rule 101 (check_if_non_atomic -> .)
    CTF             reduce using rule 101 (check_if_non_atomic -> .)
    ID              reduce using rule 101 (check_if_non_atomic -> .)
    SUBOP           reduce using rule 101 (check_if_non_atomic -> .)
    MEAN            reduce using rule 101 (check_if_non_atomic -> .)
    MEDIAN          reduce using rule 101 (check_if_non_atomic -> .)
    MODE            reduce using rule 101 (check_if_non_atomic -> .)
    VARIANCE        reduce using rule 101 (check_if_non_atomic -> .)
    STDDEV          reduce using rule 101 (check_if_non_atomic -> .)

    check_if_non_atomic            shift and go to state 169

state 124

    (100) variableA -> empty .

    ASSIGNOP        reduce using rule 100 (variableA -> empty .)
    MULOP           reduce using rule 100 (variableA -> empty .)
    DIVOP           reduce using rule 100 (variableA -> empty .)
    SUMOP           reduce using rule 100 (variableA -> empty .)
    SUBOP           reduce using rule 100 (variableA -> empty .)
    LESSTHANOP      reduce using rule 100 (variableA -> empty .)
    GREATERTHANOP   reduce using rule 100 (variableA -> empty .)
    DIFFERENTOP     reduce using rule 100 (variableA -> empty .)
    EQUALOP         reduce using rule 100 (variableA -> empty .)
    ANDOP           reduce using rule 100 (variableA -> empty .)
    OROP            reduce using rule 100 (variableA -> empty .)
    ID              reduce using rule 100 (variableA -> empty .)
    READ            reduce using rule 100 (variableA -> empty .)
    WRITE           reduce using rule 100 (variableA -> empty .)
    RETURN          reduce using rule 100 (variableA -> empty .)
    IF              reduce using rule 100 (variableA -> empty .)
    FROM            reduce using rule 100 (variableA -> empty .)
    HISTOGRAM       reduce using rule 100 (variableA -> empty .)
    BOXPLOT         reduce using rule 100 (variableA -> empty .)
    RIGHTCURLY      reduce using rule 100 (variableA -> empty .)
    TO              reduce using rule 100 (variableA -> empty .)
    RIGHTPAR        reduce using rule 100 (variableA -> empty .)
    DO              reduce using rule 100 (variableA -> empty .)
    COMMA           reduce using rule 100 (variableA -> empty .)
    RIGHTBRACKET    reduce using rule 100 (variableA -> empty .)


state 125

    (74) read -> READ ID readNP1 .

    ID              reduce using rule 74 (read -> READ ID readNP1 .)
    READ            reduce using rule 74 (read -> READ ID readNP1 .)
    WRITE           reduce using rule 74 (read -> READ ID readNP1 .)
    RETURN          reduce using rule 74 (read -> READ ID readNP1 .)
    IF              reduce using rule 74 (read -> READ ID readNP1 .)
    FROM            reduce using rule 74 (read -> READ ID readNP1 .)
    HISTOGRAM       reduce using rule 74 (read -> READ ID readNP1 .)
    BOXPLOT         reduce using rule 74 (read -> READ ID readNP1 .)
    RIGHTCURLY      reduce using rule 74 (read -> READ ID readNP1 .)


state 126

    (76) escritura -> WRITE escrituraNP1 LEFTPAR . loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (79) loeNP2 -> .

    CTSTRING        reduce using rule 79 (loeNP2 -> .)
    LEFTPAR         reduce using rule 79 (loeNP2 -> .)
    CTI             reduce using rule 79 (loeNP2 -> .)
    CTF             reduce using rule 79 (loeNP2 -> .)
    ID              reduce using rule 79 (loeNP2 -> .)
    SUBOP           reduce using rule 79 (loeNP2 -> .)
    MEAN            reduce using rule 79 (loeNP2 -> .)
    MEDIAN          reduce using rule 79 (loeNP2 -> .)
    MODE            reduce using rule 79 (loeNP2 -> .)
    VARIANCE        reduce using rule 79 (loeNP2 -> .)
    STDDEV          reduce using rule 79 (loeNP2 -> .)

    loeNP2                         shift and go to state 170

state 127

    (86) return -> RETURN exp returnNP1 .

    ID              reduce using rule 86 (return -> RETURN exp returnNP1 .)
    READ            reduce using rule 86 (return -> RETURN exp returnNP1 .)
    WRITE           reduce using rule 86 (return -> RETURN exp returnNP1 .)
    RETURN          reduce using rule 86 (return -> RETURN exp returnNP1 .)
    IF              reduce using rule 86 (return -> RETURN exp returnNP1 .)
    FROM            reduce using rule 86 (return -> RETURN exp returnNP1 .)
    HISTOGRAM       reduce using rule 86 (return -> RETURN exp returnNP1 .)
    BOXPLOT         reduce using rule 86 (return -> RETURN exp returnNP1 .)
    RIGHTCURLY      reduce using rule 86 (return -> RETURN exp returnNP1 .)


state 128

    (108) exp -> exp1 expA .

    ID              reduce using rule 108 (exp -> exp1 expA .)
    READ            reduce using rule 108 (exp -> exp1 expA .)
    WRITE           reduce using rule 108 (exp -> exp1 expA .)
    RETURN          reduce using rule 108 (exp -> exp1 expA .)
    IF              reduce using rule 108 (exp -> exp1 expA .)
    FROM            reduce using rule 108 (exp -> exp1 expA .)
    HISTOGRAM       reduce using rule 108 (exp -> exp1 expA .)
    BOXPLOT         reduce using rule 108 (exp -> exp1 expA .)
    RIGHTCURLY      reduce using rule 108 (exp -> exp1 expA .)
    TO              reduce using rule 108 (exp -> exp1 expA .)
    RIGHTPAR        reduce using rule 108 (exp -> exp1 expA .)
    DO              reduce using rule 108 (exp -> exp1 expA .)
    COMMA           reduce using rule 108 (exp -> exp1 expA .)
    RIGHTBRACKET    reduce using rule 108 (exp -> exp1 expA .)


state 129

    (110) expA -> OROP . operNP1 exp1 expNP1 expA
    (148) operNP1 -> .

    LEFTPAR         reduce using rule 148 (operNP1 -> .)
    CTI             reduce using rule 148 (operNP1 -> .)
    CTF             reduce using rule 148 (operNP1 -> .)
    ID              reduce using rule 148 (operNP1 -> .)
    SUBOP           reduce using rule 148 (operNP1 -> .)
    MEAN            reduce using rule 148 (operNP1 -> .)
    MEDIAN          reduce using rule 148 (operNP1 -> .)
    MODE            reduce using rule 148 (operNP1 -> .)
    VARIANCE        reduce using rule 148 (operNP1 -> .)
    STDDEV          reduce using rule 148 (operNP1 -> .)

    operNP1                        shift and go to state 171

state 130

    (111) expA -> empty .

    ID              reduce using rule 111 (expA -> empty .)
    READ            reduce using rule 111 (expA -> empty .)
    WRITE           reduce using rule 111 (expA -> empty .)
    RETURN          reduce using rule 111 (expA -> empty .)
    IF              reduce using rule 111 (expA -> empty .)
    FROM            reduce using rule 111 (expA -> empty .)
    HISTOGRAM       reduce using rule 111 (expA -> empty .)
    BOXPLOT         reduce using rule 111 (expA -> empty .)
    RIGHTCURLY      reduce using rule 111 (expA -> empty .)
    TO              reduce using rule 111 (expA -> empty .)
    RIGHTPAR        reduce using rule 111 (expA -> empty .)
    DO              reduce using rule 111 (expA -> empty .)
    COMMA           reduce using rule 111 (expA -> empty .)
    RIGHTBRACKET    reduce using rule 111 (expA -> empty .)


state 131

    (112) exp1 -> exp2 exp1A .

    OROP            reduce using rule 112 (exp1 -> exp2 exp1A .)
    ID              reduce using rule 112 (exp1 -> exp2 exp1A .)
    READ            reduce using rule 112 (exp1 -> exp2 exp1A .)
    WRITE           reduce using rule 112 (exp1 -> exp2 exp1A .)
    RETURN          reduce using rule 112 (exp1 -> exp2 exp1A .)
    IF              reduce using rule 112 (exp1 -> exp2 exp1A .)
    FROM            reduce using rule 112 (exp1 -> exp2 exp1A .)
    HISTOGRAM       reduce using rule 112 (exp1 -> exp2 exp1A .)
    BOXPLOT         reduce using rule 112 (exp1 -> exp2 exp1A .)
    RIGHTCURLY      reduce using rule 112 (exp1 -> exp2 exp1A .)
    TO              reduce using rule 112 (exp1 -> exp2 exp1A .)
    RIGHTPAR        reduce using rule 112 (exp1 -> exp2 exp1A .)
    DO              reduce using rule 112 (exp1 -> exp2 exp1A .)
    COMMA           reduce using rule 112 (exp1 -> exp2 exp1A .)
    RIGHTBRACKET    reduce using rule 112 (exp1 -> exp2 exp1A .)


state 132

    (114) exp1A -> ANDOP . operNP1 exp2 exp1NP1 exp1A
    (148) operNP1 -> .

    LEFTPAR         reduce using rule 148 (operNP1 -> .)
    CTI             reduce using rule 148 (operNP1 -> .)
    CTF             reduce using rule 148 (operNP1 -> .)
    ID              reduce using rule 148 (operNP1 -> .)
    SUBOP           reduce using rule 148 (operNP1 -> .)
    MEAN            reduce using rule 148 (operNP1 -> .)
    MEDIAN          reduce using rule 148 (operNP1 -> .)
    MODE            reduce using rule 148 (operNP1 -> .)
    VARIANCE        reduce using rule 148 (operNP1 -> .)
    STDDEV          reduce using rule 148 (operNP1 -> .)

    operNP1                        shift and go to state 172

state 133

    (115) exp1A -> empty .

    OROP            reduce using rule 115 (exp1A -> empty .)
    ID              reduce using rule 115 (exp1A -> empty .)
    READ            reduce using rule 115 (exp1A -> empty .)
    WRITE           reduce using rule 115 (exp1A -> empty .)
    RETURN          reduce using rule 115 (exp1A -> empty .)
    IF              reduce using rule 115 (exp1A -> empty .)
    FROM            reduce using rule 115 (exp1A -> empty .)
    HISTOGRAM       reduce using rule 115 (exp1A -> empty .)
    BOXPLOT         reduce using rule 115 (exp1A -> empty .)
    RIGHTCURLY      reduce using rule 115 (exp1A -> empty .)
    TO              reduce using rule 115 (exp1A -> empty .)
    RIGHTPAR        reduce using rule 115 (exp1A -> empty .)
    DO              reduce using rule 115 (exp1A -> empty .)
    COMMA           reduce using rule 115 (exp1A -> empty .)
    RIGHTBRACKET    reduce using rule 115 (exp1A -> empty .)


state 134

    (116) exp2 -> exp3 exp2A .

    ANDOP           reduce using rule 116 (exp2 -> exp3 exp2A .)
    OROP            reduce using rule 116 (exp2 -> exp3 exp2A .)
    ID              reduce using rule 116 (exp2 -> exp3 exp2A .)
    READ            reduce using rule 116 (exp2 -> exp3 exp2A .)
    WRITE           reduce using rule 116 (exp2 -> exp3 exp2A .)
    RETURN          reduce using rule 116 (exp2 -> exp3 exp2A .)
    IF              reduce using rule 116 (exp2 -> exp3 exp2A .)
    FROM            reduce using rule 116 (exp2 -> exp3 exp2A .)
    HISTOGRAM       reduce using rule 116 (exp2 -> exp3 exp2A .)
    BOXPLOT         reduce using rule 116 (exp2 -> exp3 exp2A .)
    RIGHTCURLY      reduce using rule 116 (exp2 -> exp3 exp2A .)
    TO              reduce using rule 116 (exp2 -> exp3 exp2A .)
    RIGHTPAR        reduce using rule 116 (exp2 -> exp3 exp2A .)
    DO              reduce using rule 116 (exp2 -> exp3 exp2A .)
    COMMA           reduce using rule 116 (exp2 -> exp3 exp2A .)
    RIGHTBRACKET    reduce using rule 116 (exp2 -> exp3 exp2A .)


state 135

    (117) exp2A -> exp2B . operNP1 exp3 exp2ANP1
    (148) operNP1 -> .

    LEFTPAR         reduce using rule 148 (operNP1 -> .)
    CTI             reduce using rule 148 (operNP1 -> .)
    CTF             reduce using rule 148 (operNP1 -> .)
    ID              reduce using rule 148 (operNP1 -> .)
    SUBOP           reduce using rule 148 (operNP1 -> .)
    MEAN            reduce using rule 148 (operNP1 -> .)
    MEDIAN          reduce using rule 148 (operNP1 -> .)
    MODE            reduce using rule 148 (operNP1 -> .)
    VARIANCE        reduce using rule 148 (operNP1 -> .)
    STDDEV          reduce using rule 148 (operNP1 -> .)

    operNP1                        shift and go to state 173

state 136

    (118) exp2A -> empty .

    ANDOP           reduce using rule 118 (exp2A -> empty .)
    OROP            reduce using rule 118 (exp2A -> empty .)
    ID              reduce using rule 118 (exp2A -> empty .)
    READ            reduce using rule 118 (exp2A -> empty .)
    WRITE           reduce using rule 118 (exp2A -> empty .)
    RETURN          reduce using rule 118 (exp2A -> empty .)
    IF              reduce using rule 118 (exp2A -> empty .)
    FROM            reduce using rule 118 (exp2A -> empty .)
    HISTOGRAM       reduce using rule 118 (exp2A -> empty .)
    BOXPLOT         reduce using rule 118 (exp2A -> empty .)
    RIGHTCURLY      reduce using rule 118 (exp2A -> empty .)
    TO              reduce using rule 118 (exp2A -> empty .)
    RIGHTPAR        reduce using rule 118 (exp2A -> empty .)
    DO              reduce using rule 118 (exp2A -> empty .)
    COMMA           reduce using rule 118 (exp2A -> empty .)
    RIGHTBRACKET    reduce using rule 118 (exp2A -> empty .)


state 137

    (120) exp2B -> LESSTHANOP .

    LEFTPAR         reduce using rule 120 (exp2B -> LESSTHANOP .)
    CTI             reduce using rule 120 (exp2B -> LESSTHANOP .)
    CTF             reduce using rule 120 (exp2B -> LESSTHANOP .)
    ID              reduce using rule 120 (exp2B -> LESSTHANOP .)
    SUBOP           reduce using rule 120 (exp2B -> LESSTHANOP .)
    MEAN            reduce using rule 120 (exp2B -> LESSTHANOP .)
    MEDIAN          reduce using rule 120 (exp2B -> LESSTHANOP .)
    MODE            reduce using rule 120 (exp2B -> LESSTHANOP .)
    VARIANCE        reduce using rule 120 (exp2B -> LESSTHANOP .)
    STDDEV          reduce using rule 120 (exp2B -> LESSTHANOP .)


state 138

    (121) exp2B -> GREATERTHANOP .

    LEFTPAR         reduce using rule 121 (exp2B -> GREATERTHANOP .)
    CTI             reduce using rule 121 (exp2B -> GREATERTHANOP .)
    CTF             reduce using rule 121 (exp2B -> GREATERTHANOP .)
    ID              reduce using rule 121 (exp2B -> GREATERTHANOP .)
    SUBOP           reduce using rule 121 (exp2B -> GREATERTHANOP .)
    MEAN            reduce using rule 121 (exp2B -> GREATERTHANOP .)
    MEDIAN          reduce using rule 121 (exp2B -> GREATERTHANOP .)
    MODE            reduce using rule 121 (exp2B -> GREATERTHANOP .)
    VARIANCE        reduce using rule 121 (exp2B -> GREATERTHANOP .)
    STDDEV          reduce using rule 121 (exp2B -> GREATERTHANOP .)


state 139

    (122) exp2B -> DIFFERENTOP .

    LEFTPAR         reduce using rule 122 (exp2B -> DIFFERENTOP .)
    CTI             reduce using rule 122 (exp2B -> DIFFERENTOP .)
    CTF             reduce using rule 122 (exp2B -> DIFFERENTOP .)
    ID              reduce using rule 122 (exp2B -> DIFFERENTOP .)
    SUBOP           reduce using rule 122 (exp2B -> DIFFERENTOP .)
    MEAN            reduce using rule 122 (exp2B -> DIFFERENTOP .)
    MEDIAN          reduce using rule 122 (exp2B -> DIFFERENTOP .)
    MODE            reduce using rule 122 (exp2B -> DIFFERENTOP .)
    VARIANCE        reduce using rule 122 (exp2B -> DIFFERENTOP .)
    STDDEV          reduce using rule 122 (exp2B -> DIFFERENTOP .)


state 140

    (123) exp2B -> EQUALOP .

    LEFTPAR         reduce using rule 123 (exp2B -> EQUALOP .)
    CTI             reduce using rule 123 (exp2B -> EQUALOP .)
    CTF             reduce using rule 123 (exp2B -> EQUALOP .)
    ID              reduce using rule 123 (exp2B -> EQUALOP .)
    SUBOP           reduce using rule 123 (exp2B -> EQUALOP .)
    MEAN            reduce using rule 123 (exp2B -> EQUALOP .)
    MEDIAN          reduce using rule 123 (exp2B -> EQUALOP .)
    MODE            reduce using rule 123 (exp2B -> EQUALOP .)
    VARIANCE        reduce using rule 123 (exp2B -> EQUALOP .)
    STDDEV          reduce using rule 123 (exp2B -> EQUALOP .)


state 141

    (124) exp3 -> termino exp3A .

    LESSTHANOP      reduce using rule 124 (exp3 -> termino exp3A .)
    GREATERTHANOP   reduce using rule 124 (exp3 -> termino exp3A .)
    DIFFERENTOP     reduce using rule 124 (exp3 -> termino exp3A .)
    EQUALOP         reduce using rule 124 (exp3 -> termino exp3A .)
    ANDOP           reduce using rule 124 (exp3 -> termino exp3A .)
    OROP            reduce using rule 124 (exp3 -> termino exp3A .)
    ID              reduce using rule 124 (exp3 -> termino exp3A .)
    READ            reduce using rule 124 (exp3 -> termino exp3A .)
    WRITE           reduce using rule 124 (exp3 -> termino exp3A .)
    RETURN          reduce using rule 124 (exp3 -> termino exp3A .)
    IF              reduce using rule 124 (exp3 -> termino exp3A .)
    FROM            reduce using rule 124 (exp3 -> termino exp3A .)
    HISTOGRAM       reduce using rule 124 (exp3 -> termino exp3A .)
    BOXPLOT         reduce using rule 124 (exp3 -> termino exp3A .)
    RIGHTCURLY      reduce using rule 124 (exp3 -> termino exp3A .)
    TO              reduce using rule 124 (exp3 -> termino exp3A .)
    RIGHTPAR        reduce using rule 124 (exp3 -> termino exp3A .)
    DO              reduce using rule 124 (exp3 -> termino exp3A .)
    COMMA           reduce using rule 124 (exp3 -> termino exp3A .)
    RIGHTBRACKET    reduce using rule 124 (exp3 -> termino exp3A .)


state 142

    (126) exp3A -> exp3B . operNP1 termino exp3NP1 exp3A
    (148) operNP1 -> .

    LEFTPAR         reduce using rule 148 (operNP1 -> .)
    CTI             reduce using rule 148 (operNP1 -> .)
    CTF             reduce using rule 148 (operNP1 -> .)
    ID              reduce using rule 148 (operNP1 -> .)
    SUBOP           reduce using rule 148 (operNP1 -> .)
    MEAN            reduce using rule 148 (operNP1 -> .)
    MEDIAN          reduce using rule 148 (operNP1 -> .)
    MODE            reduce using rule 148 (operNP1 -> .)
    VARIANCE        reduce using rule 148 (operNP1 -> .)
    STDDEV          reduce using rule 148 (operNP1 -> .)

    operNP1                        shift and go to state 174

state 143

    (127) exp3A -> empty .

    LESSTHANOP      reduce using rule 127 (exp3A -> empty .)
    GREATERTHANOP   reduce using rule 127 (exp3A -> empty .)
    DIFFERENTOP     reduce using rule 127 (exp3A -> empty .)
    EQUALOP         reduce using rule 127 (exp3A -> empty .)
    ANDOP           reduce using rule 127 (exp3A -> empty .)
    OROP            reduce using rule 127 (exp3A -> empty .)
    ID              reduce using rule 127 (exp3A -> empty .)
    READ            reduce using rule 127 (exp3A -> empty .)
    WRITE           reduce using rule 127 (exp3A -> empty .)
    RETURN          reduce using rule 127 (exp3A -> empty .)
    IF              reduce using rule 127 (exp3A -> empty .)
    FROM            reduce using rule 127 (exp3A -> empty .)
    HISTOGRAM       reduce using rule 127 (exp3A -> empty .)
    BOXPLOT         reduce using rule 127 (exp3A -> empty .)
    RIGHTCURLY      reduce using rule 127 (exp3A -> empty .)
    TO              reduce using rule 127 (exp3A -> empty .)
    RIGHTPAR        reduce using rule 127 (exp3A -> empty .)
    DO              reduce using rule 127 (exp3A -> empty .)
    COMMA           reduce using rule 127 (exp3A -> empty .)
    RIGHTBRACKET    reduce using rule 127 (exp3A -> empty .)


state 144

    (128) exp3B -> SUMOP .

    LEFTPAR         reduce using rule 128 (exp3B -> SUMOP .)
    CTI             reduce using rule 128 (exp3B -> SUMOP .)
    CTF             reduce using rule 128 (exp3B -> SUMOP .)
    ID              reduce using rule 128 (exp3B -> SUMOP .)
    SUBOP           reduce using rule 128 (exp3B -> SUMOP .)
    MEAN            reduce using rule 128 (exp3B -> SUMOP .)
    MEDIAN          reduce using rule 128 (exp3B -> SUMOP .)
    MODE            reduce using rule 128 (exp3B -> SUMOP .)
    VARIANCE        reduce using rule 128 (exp3B -> SUMOP .)
    STDDEV          reduce using rule 128 (exp3B -> SUMOP .)


state 145

    (129) exp3B -> SUBOP .

    LEFTPAR         reduce using rule 129 (exp3B -> SUBOP .)
    CTI             reduce using rule 129 (exp3B -> SUBOP .)
    CTF             reduce using rule 129 (exp3B -> SUBOP .)
    ID              reduce using rule 129 (exp3B -> SUBOP .)
    SUBOP           reduce using rule 129 (exp3B -> SUBOP .)
    MEAN            reduce using rule 129 (exp3B -> SUBOP .)
    MEDIAN          reduce using rule 129 (exp3B -> SUBOP .)
    MODE            reduce using rule 129 (exp3B -> SUBOP .)
    VARIANCE        reduce using rule 129 (exp3B -> SUBOP .)
    STDDEV          reduce using rule 129 (exp3B -> SUBOP .)


state 146

    (130) termino -> terminoC terminoA .

    SUMOP           reduce using rule 130 (termino -> terminoC terminoA .)
    SUBOP           reduce using rule 130 (termino -> terminoC terminoA .)
    LESSTHANOP      reduce using rule 130 (termino -> terminoC terminoA .)
    GREATERTHANOP   reduce using rule 130 (termino -> terminoC terminoA .)
    DIFFERENTOP     reduce using rule 130 (termino -> terminoC terminoA .)
    EQUALOP         reduce using rule 130 (termino -> terminoC terminoA .)
    ANDOP           reduce using rule 130 (termino -> terminoC terminoA .)
    OROP            reduce using rule 130 (termino -> terminoC terminoA .)
    ID              reduce using rule 130 (termino -> terminoC terminoA .)
    READ            reduce using rule 130 (termino -> terminoC terminoA .)
    WRITE           reduce using rule 130 (termino -> terminoC terminoA .)
    RETURN          reduce using rule 130 (termino -> terminoC terminoA .)
    IF              reduce using rule 130 (termino -> terminoC terminoA .)
    FROM            reduce using rule 130 (termino -> terminoC terminoA .)
    HISTOGRAM       reduce using rule 130 (termino -> terminoC terminoA .)
    BOXPLOT         reduce using rule 130 (termino -> terminoC terminoA .)
    RIGHTCURLY      reduce using rule 130 (termino -> terminoC terminoA .)
    TO              reduce using rule 130 (termino -> terminoC terminoA .)
    RIGHTPAR        reduce using rule 130 (termino -> terminoC terminoA .)
    DO              reduce using rule 130 (termino -> terminoC terminoA .)
    COMMA           reduce using rule 130 (termino -> terminoC terminoA .)
    RIGHTBRACKET    reduce using rule 130 (termino -> terminoC terminoA .)


state 147

    (131) terminoA -> terminoB . operNP1 terminoC terminoANP1 terminoA
    (148) operNP1 -> .

    LEFTPAR         reduce using rule 148 (operNP1 -> .)
    CTI             reduce using rule 148 (operNP1 -> .)
    CTF             reduce using rule 148 (operNP1 -> .)
    ID              reduce using rule 148 (operNP1 -> .)
    SUBOP           reduce using rule 148 (operNP1 -> .)
    MEAN            reduce using rule 148 (operNP1 -> .)
    MEDIAN          reduce using rule 148 (operNP1 -> .)
    MODE            reduce using rule 148 (operNP1 -> .)
    VARIANCE        reduce using rule 148 (operNP1 -> .)
    STDDEV          reduce using rule 148 (operNP1 -> .)

    operNP1                        shift and go to state 175

state 148

    (132) terminoA -> empty .

    SUMOP           reduce using rule 132 (terminoA -> empty .)
    SUBOP           reduce using rule 132 (terminoA -> empty .)
    LESSTHANOP      reduce using rule 132 (terminoA -> empty .)
    GREATERTHANOP   reduce using rule 132 (terminoA -> empty .)
    DIFFERENTOP     reduce using rule 132 (terminoA -> empty .)
    EQUALOP         reduce using rule 132 (terminoA -> empty .)
    ANDOP           reduce using rule 132 (terminoA -> empty .)
    OROP            reduce using rule 132 (terminoA -> empty .)
    ID              reduce using rule 132 (terminoA -> empty .)
    READ            reduce using rule 132 (terminoA -> empty .)
    WRITE           reduce using rule 132 (terminoA -> empty .)
    RETURN          reduce using rule 132 (terminoA -> empty .)
    IF              reduce using rule 132 (terminoA -> empty .)
    FROM            reduce using rule 132 (terminoA -> empty .)
    HISTOGRAM       reduce using rule 132 (terminoA -> empty .)
    BOXPLOT         reduce using rule 132 (terminoA -> empty .)
    RIGHTCURLY      reduce using rule 132 (terminoA -> empty .)
    TO              reduce using rule 132 (terminoA -> empty .)
    RIGHTPAR        reduce using rule 132 (terminoA -> empty .)
    DO              reduce using rule 132 (terminoA -> empty .)
    COMMA           reduce using rule 132 (terminoA -> empty .)
    RIGHTBRACKET    reduce using rule 132 (terminoA -> empty .)


state 149

    (134) terminoB -> MULOP .

    LEFTPAR         reduce using rule 134 (terminoB -> MULOP .)
    CTI             reduce using rule 134 (terminoB -> MULOP .)
    CTF             reduce using rule 134 (terminoB -> MULOP .)
    ID              reduce using rule 134 (terminoB -> MULOP .)
    SUBOP           reduce using rule 134 (terminoB -> MULOP .)
    MEAN            reduce using rule 134 (terminoB -> MULOP .)
    MEDIAN          reduce using rule 134 (terminoB -> MULOP .)
    MODE            reduce using rule 134 (terminoB -> MULOP .)
    VARIANCE        reduce using rule 134 (terminoB -> MULOP .)
    STDDEV          reduce using rule 134 (terminoB -> MULOP .)


state 150

    (135) terminoB -> DIVOP .

    LEFTPAR         reduce using rule 135 (terminoB -> DIVOP .)
    CTI             reduce using rule 135 (terminoB -> DIVOP .)
    CTF             reduce using rule 135 (terminoB -> DIVOP .)
    ID              reduce using rule 135 (terminoB -> DIVOP .)
    SUBOP           reduce using rule 135 (terminoB -> DIVOP .)
    MEAN            reduce using rule 135 (terminoB -> DIVOP .)
    MEDIAN          reduce using rule 135 (terminoB -> DIVOP .)
    MODE            reduce using rule 135 (terminoB -> DIVOP .)
    VARIANCE        reduce using rule 135 (terminoB -> DIVOP .)
    STDDEV          reduce using rule 135 (terminoB -> DIVOP .)


state 151

    (137) terminoC -> llamada checkIfNotVoid .

    MULOP           reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    DIVOP           reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    SUMOP           reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    SUBOP           reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    LESSTHANOP      reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    GREATERTHANOP   reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    DIFFERENTOP     reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    EQUALOP         reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    ANDOP           reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    OROP            reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    ID              reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    READ            reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    WRITE           reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    RETURN          reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    IF              reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    FROM            reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    HISTOGRAM       reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    BOXPLOT         reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    RIGHTCURLY      reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    TO              reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    RIGHTPAR        reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    DO              reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    COMMA           reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)
    RIGHTBRACKET    reduce using rule 137 (terminoC -> llamada checkIfNotVoid .)


state 152

    (139) factor -> LEFTPAR operNP1 . exp RIGHTPAR factorNP1
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 176
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 153

    (140) factor -> CTI factorNP2 .

    MULOP           reduce using rule 140 (factor -> CTI factorNP2 .)
    DIVOP           reduce using rule 140 (factor -> CTI factorNP2 .)
    SUMOP           reduce using rule 140 (factor -> CTI factorNP2 .)
    SUBOP           reduce using rule 140 (factor -> CTI factorNP2 .)
    LESSTHANOP      reduce using rule 140 (factor -> CTI factorNP2 .)
    GREATERTHANOP   reduce using rule 140 (factor -> CTI factorNP2 .)
    DIFFERENTOP     reduce using rule 140 (factor -> CTI factorNP2 .)
    EQUALOP         reduce using rule 140 (factor -> CTI factorNP2 .)
    ANDOP           reduce using rule 140 (factor -> CTI factorNP2 .)
    OROP            reduce using rule 140 (factor -> CTI factorNP2 .)
    ID              reduce using rule 140 (factor -> CTI factorNP2 .)
    READ            reduce using rule 140 (factor -> CTI factorNP2 .)
    WRITE           reduce using rule 140 (factor -> CTI factorNP2 .)
    RETURN          reduce using rule 140 (factor -> CTI factorNP2 .)
    IF              reduce using rule 140 (factor -> CTI factorNP2 .)
    FROM            reduce using rule 140 (factor -> CTI factorNP2 .)
    HISTOGRAM       reduce using rule 140 (factor -> CTI factorNP2 .)
    BOXPLOT         reduce using rule 140 (factor -> CTI factorNP2 .)
    RIGHTCURLY      reduce using rule 140 (factor -> CTI factorNP2 .)
    TO              reduce using rule 140 (factor -> CTI factorNP2 .)
    RIGHTPAR        reduce using rule 140 (factor -> CTI factorNP2 .)
    DO              reduce using rule 140 (factor -> CTI factorNP2 .)
    COMMA           reduce using rule 140 (factor -> CTI factorNP2 .)
    RIGHTBRACKET    reduce using rule 140 (factor -> CTI factorNP2 .)


state 154

    (141) factor -> CTF factorNP3 .

    MULOP           reduce using rule 141 (factor -> CTF factorNP3 .)
    DIVOP           reduce using rule 141 (factor -> CTF factorNP3 .)
    SUMOP           reduce using rule 141 (factor -> CTF factorNP3 .)
    SUBOP           reduce using rule 141 (factor -> CTF factorNP3 .)
    LESSTHANOP      reduce using rule 141 (factor -> CTF factorNP3 .)
    GREATERTHANOP   reduce using rule 141 (factor -> CTF factorNP3 .)
    DIFFERENTOP     reduce using rule 141 (factor -> CTF factorNP3 .)
    EQUALOP         reduce using rule 141 (factor -> CTF factorNP3 .)
    ANDOP           reduce using rule 141 (factor -> CTF factorNP3 .)
    OROP            reduce using rule 141 (factor -> CTF factorNP3 .)
    ID              reduce using rule 141 (factor -> CTF factorNP3 .)
    READ            reduce using rule 141 (factor -> CTF factorNP3 .)
    WRITE           reduce using rule 141 (factor -> CTF factorNP3 .)
    RETURN          reduce using rule 141 (factor -> CTF factorNP3 .)
    IF              reduce using rule 141 (factor -> CTF factorNP3 .)
    FROM            reduce using rule 141 (factor -> CTF factorNP3 .)
    HISTOGRAM       reduce using rule 141 (factor -> CTF factorNP3 .)
    BOXPLOT         reduce using rule 141 (factor -> CTF factorNP3 .)
    RIGHTCURLY      reduce using rule 141 (factor -> CTF factorNP3 .)
    TO              reduce using rule 141 (factor -> CTF factorNP3 .)
    RIGHTPAR        reduce using rule 141 (factor -> CTF factorNP3 .)
    DO              reduce using rule 141 (factor -> CTF factorNP3 .)
    COMMA           reduce using rule 141 (factor -> CTF factorNP3 .)
    RIGHTBRACKET    reduce using rule 141 (factor -> CTF factorNP3 .)


state 155

    (142) factor -> negative_int factorNP2 .

    MULOP           reduce using rule 142 (factor -> negative_int factorNP2 .)
    DIVOP           reduce using rule 142 (factor -> negative_int factorNP2 .)
    SUMOP           reduce using rule 142 (factor -> negative_int factorNP2 .)
    SUBOP           reduce using rule 142 (factor -> negative_int factorNP2 .)
    LESSTHANOP      reduce using rule 142 (factor -> negative_int factorNP2 .)
    GREATERTHANOP   reduce using rule 142 (factor -> negative_int factorNP2 .)
    DIFFERENTOP     reduce using rule 142 (factor -> negative_int factorNP2 .)
    EQUALOP         reduce using rule 142 (factor -> negative_int factorNP2 .)
    ANDOP           reduce using rule 142 (factor -> negative_int factorNP2 .)
    OROP            reduce using rule 142 (factor -> negative_int factorNP2 .)
    ID              reduce using rule 142 (factor -> negative_int factorNP2 .)
    READ            reduce using rule 142 (factor -> negative_int factorNP2 .)
    WRITE           reduce using rule 142 (factor -> negative_int factorNP2 .)
    RETURN          reduce using rule 142 (factor -> negative_int factorNP2 .)
    IF              reduce using rule 142 (factor -> negative_int factorNP2 .)
    FROM            reduce using rule 142 (factor -> negative_int factorNP2 .)
    HISTOGRAM       reduce using rule 142 (factor -> negative_int factorNP2 .)
    BOXPLOT         reduce using rule 142 (factor -> negative_int factorNP2 .)
    RIGHTCURLY      reduce using rule 142 (factor -> negative_int factorNP2 .)
    TO              reduce using rule 142 (factor -> negative_int factorNP2 .)
    RIGHTPAR        reduce using rule 142 (factor -> negative_int factorNP2 .)
    DO              reduce using rule 142 (factor -> negative_int factorNP2 .)
    COMMA           reduce using rule 142 (factor -> negative_int factorNP2 .)
    RIGHTBRACKET    reduce using rule 142 (factor -> negative_int factorNP2 .)


state 156

    (143) factor -> negative_float factorNP3 .

    MULOP           reduce using rule 143 (factor -> negative_float factorNP3 .)
    DIVOP           reduce using rule 143 (factor -> negative_float factorNP3 .)
    SUMOP           reduce using rule 143 (factor -> negative_float factorNP3 .)
    SUBOP           reduce using rule 143 (factor -> negative_float factorNP3 .)
    LESSTHANOP      reduce using rule 143 (factor -> negative_float factorNP3 .)
    GREATERTHANOP   reduce using rule 143 (factor -> negative_float factorNP3 .)
    DIFFERENTOP     reduce using rule 143 (factor -> negative_float factorNP3 .)
    EQUALOP         reduce using rule 143 (factor -> negative_float factorNP3 .)
    ANDOP           reduce using rule 143 (factor -> negative_float factorNP3 .)
    OROP            reduce using rule 143 (factor -> negative_float factorNP3 .)
    ID              reduce using rule 143 (factor -> negative_float factorNP3 .)
    READ            reduce using rule 143 (factor -> negative_float factorNP3 .)
    WRITE           reduce using rule 143 (factor -> negative_float factorNP3 .)
    RETURN          reduce using rule 143 (factor -> negative_float factorNP3 .)
    IF              reduce using rule 143 (factor -> negative_float factorNP3 .)
    FROM            reduce using rule 143 (factor -> negative_float factorNP3 .)
    HISTOGRAM       reduce using rule 143 (factor -> negative_float factorNP3 .)
    BOXPLOT         reduce using rule 143 (factor -> negative_float factorNP3 .)
    RIGHTCURLY      reduce using rule 143 (factor -> negative_float factorNP3 .)
    TO              reduce using rule 143 (factor -> negative_float factorNP3 .)
    RIGHTPAR        reduce using rule 143 (factor -> negative_float factorNP3 .)
    DO              reduce using rule 143 (factor -> negative_float factorNP3 .)
    COMMA           reduce using rule 143 (factor -> negative_float factorNP3 .)
    RIGHTBRACKET    reduce using rule 143 (factor -> negative_float factorNP3 .)


state 157

    (146) negative_int -> SUBOP CTI .

    MULOP           reduce using rule 146 (negative_int -> SUBOP CTI .)
    DIVOP           reduce using rule 146 (negative_int -> SUBOP CTI .)
    SUMOP           reduce using rule 146 (negative_int -> SUBOP CTI .)
    SUBOP           reduce using rule 146 (negative_int -> SUBOP CTI .)
    LESSTHANOP      reduce using rule 146 (negative_int -> SUBOP CTI .)
    GREATERTHANOP   reduce using rule 146 (negative_int -> SUBOP CTI .)
    DIFFERENTOP     reduce using rule 146 (negative_int -> SUBOP CTI .)
    EQUALOP         reduce using rule 146 (negative_int -> SUBOP CTI .)
    ANDOP           reduce using rule 146 (negative_int -> SUBOP CTI .)
    OROP            reduce using rule 146 (negative_int -> SUBOP CTI .)
    ID              reduce using rule 146 (negative_int -> SUBOP CTI .)
    READ            reduce using rule 146 (negative_int -> SUBOP CTI .)
    WRITE           reduce using rule 146 (negative_int -> SUBOP CTI .)
    RETURN          reduce using rule 146 (negative_int -> SUBOP CTI .)
    IF              reduce using rule 146 (negative_int -> SUBOP CTI .)
    FROM            reduce using rule 146 (negative_int -> SUBOP CTI .)
    HISTOGRAM       reduce using rule 146 (negative_int -> SUBOP CTI .)
    BOXPLOT         reduce using rule 146 (negative_int -> SUBOP CTI .)
    RIGHTCURLY      reduce using rule 146 (negative_int -> SUBOP CTI .)
    TO              reduce using rule 146 (negative_int -> SUBOP CTI .)
    RIGHTPAR        reduce using rule 146 (negative_int -> SUBOP CTI .)
    DO              reduce using rule 146 (negative_int -> SUBOP CTI .)
    COMMA           reduce using rule 146 (negative_int -> SUBOP CTI .)
    RIGHTBRACKET    reduce using rule 146 (negative_int -> SUBOP CTI .)


state 158

    (147) negative_float -> SUBOP CTF .

    MULOP           reduce using rule 147 (negative_float -> SUBOP CTF .)
    DIVOP           reduce using rule 147 (negative_float -> SUBOP CTF .)
    SUMOP           reduce using rule 147 (negative_float -> SUBOP CTF .)
    SUBOP           reduce using rule 147 (negative_float -> SUBOP CTF .)
    LESSTHANOP      reduce using rule 147 (negative_float -> SUBOP CTF .)
    GREATERTHANOP   reduce using rule 147 (negative_float -> SUBOP CTF .)
    DIFFERENTOP     reduce using rule 147 (negative_float -> SUBOP CTF .)
    EQUALOP         reduce using rule 147 (negative_float -> SUBOP CTF .)
    ANDOP           reduce using rule 147 (negative_float -> SUBOP CTF .)
    OROP            reduce using rule 147 (negative_float -> SUBOP CTF .)
    ID              reduce using rule 147 (negative_float -> SUBOP CTF .)
    READ            reduce using rule 147 (negative_float -> SUBOP CTF .)
    WRITE           reduce using rule 147 (negative_float -> SUBOP CTF .)
    RETURN          reduce using rule 147 (negative_float -> SUBOP CTF .)
    IF              reduce using rule 147 (negative_float -> SUBOP CTF .)
    FROM            reduce using rule 147 (negative_float -> SUBOP CTF .)
    HISTOGRAM       reduce using rule 147 (negative_float -> SUBOP CTF .)
    BOXPLOT         reduce using rule 147 (negative_float -> SUBOP CTF .)
    RIGHTCURLY      reduce using rule 147 (negative_float -> SUBOP CTF .)
    TO              reduce using rule 147 (negative_float -> SUBOP CTF .)
    RIGHTPAR        reduce using rule 147 (negative_float -> SUBOP CTF .)
    DO              reduce using rule 147 (negative_float -> SUBOP CTF .)
    COMMA           reduce using rule 147 (negative_float -> SUBOP CTF .)
    RIGHTBRACKET    reduce using rule 147 (negative_float -> SUBOP CTF .)


state 159

    (152) special -> specialFunc addSpecialToStack . LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special

    LEFTPAR         shift and go to state 177


state 160

    (88) condicion -> IF LEFTPAR exp . condicionNP1 RIGHTPAR bloque condicionA condicionANP2
    (89) condicionNP1 -> .

    RIGHTPAR        reduce using rule 89 (condicionNP1 -> .)

    condicionNP1                   shift and go to state 178

state 161

    (94) ciclo -> FROM exp TO . exp DO cicloNP1 bloque cicloNP2
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 179
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 162

    (158) specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR . ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph

    ID              shift and go to state 180


state 163

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR . SEMICOLON funcionC quadStart bloque genMemReqs

    SEMICOLON       shift and go to state 181


state 164

    (45) params -> tipoSimple paramsNP1 . ID paramsNP2 paramsA

    ID              shift and go to state 182


state 165

    (22) varsE -> COMMA ID varsNP3 . varsNP6 varsE
    (13) varsNP6 -> .

    COMMA           reduce using rule 13 (varsNP6 -> .)
    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 183

state 166

    (14) varsC -> LEFTBRACKET varIsArray CTI varsNP4 . RIGHTBRACKET varsD

    RIGHTBRACKET    shift and go to state 184


state 167

    (64) asignacion -> variable ASSIGNOP asignacionNP1 exp . asignacionNP2
    (66) asignacionNP2 -> .

    ID              reduce using rule 66 (asignacionNP2 -> .)
    READ            reduce using rule 66 (asignacionNP2 -> .)
    WRITE           reduce using rule 66 (asignacionNP2 -> .)
    RETURN          reduce using rule 66 (asignacionNP2 -> .)
    IF              reduce using rule 66 (asignacionNP2 -> .)
    FROM            reduce using rule 66 (asignacionNP2 -> .)
    HISTOGRAM       reduce using rule 66 (asignacionNP2 -> .)
    BOXPLOT         reduce using rule 66 (asignacionNP2 -> .)
    RIGHTCURLY      reduce using rule 66 (asignacionNP2 -> .)

    asignacionNP2                  shift and go to state 185

state 168

    (67) llamada -> ID llamadaNP1 LEFTPAR loeNP2 . primerparam llamadaA RIGHTPAR llamadaNP3
    (68) primerparam -> . exp loeNP1
    (69) primerparam -> . empty
    (108) exp -> . exp1 expA
    (165) empty -> .
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    COMMA           reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    primerparam                    shift and go to state 186
    exp                            shift and go to state 187
    empty                          shift and go to state 188
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 169

    (99) variableA -> LEFTBRACKET check_if_non_atomic . exp verify RIGHTBRACKET variableB
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 189
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 170

    (76) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 . escrituraA escrituraB RIGHTPAR escrituraNP3
    (80) escrituraA -> . exp loeNP1
    (81) escrituraA -> . CTSTRING escrituraNP2
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    CTSTRING        shift and go to state 192
    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    escrituraA                     shift and go to state 190
    exp                            shift and go to state 191
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 171

    (110) expA -> OROP operNP1 . exp1 expNP1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp1                           shift and go to state 193
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 172

    (114) exp1A -> ANDOP operNP1 . exp2 exp1NP1 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp2                           shift and go to state 194
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 173

    (117) exp2A -> exp2B operNP1 . exp3 exp2ANP1
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp3                           shift and go to state 195
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 174

    (126) exp3A -> exp3B operNP1 . termino exp3NP1 exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    termino                        shift and go to state 196
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 175

    (131) terminoA -> terminoB operNP1 . terminoC terminoANP1 terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    terminoC                       shift and go to state 197
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 176

    (139) factor -> LEFTPAR operNP1 exp . RIGHTPAR factorNP1

    RIGHTPAR        shift and go to state 198


state 177

    (152) special -> specialFunc addSpecialToStack LEFTPAR . ID variableNP1 check_if_is_matrix RIGHTPAR process_special

    ID              shift and go to state 199


state 178

    (88) condicion -> IF LEFTPAR exp condicionNP1 . RIGHTPAR bloque condicionA condicionANP2

    RIGHTPAR        shift and go to state 200


state 179

    (94) ciclo -> FROM exp TO exp . DO cicloNP1 bloque cicloNP2

    DO              shift and go to state 201


state 180

    (158) specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID . variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph
    (98) variableNP1 -> .

    RIGHTPAR        reduce using rule 98 (variableNP1 -> .)

    variableNP1                    shift and go to state 202

state 181

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON . funcionC quadStart bloque genMemReqs
    (37) funcionC -> . vars
    (38) funcionC -> . empty
    (8) vars -> . VAR varsA
    (165) empty -> .

    VAR             shift and go to state 10
    LEFTCURLY       reduce using rule 165 (empty -> .)

    funcionC                       shift and go to state 203
    vars                           shift and go to state 204
    empty                          shift and go to state 205

state 182

    (45) params -> tipoSimple paramsNP1 ID . paramsNP2 paramsA
    (49) paramsNP2 -> .

    COMMA           reduce using rule 49 (paramsNP2 -> .)
    RIGHTPAR        reduce using rule 49 (paramsNP2 -> .)

    paramsNP2                      shift and go to state 206

state 183

    (22) varsE -> COMMA ID varsNP3 varsNP6 . varsE
    (22) varsE -> . COMMA ID varsNP3 varsNP6 varsE
    (23) varsE -> . empty
    (165) empty -> .

    COMMA           shift and go to state 79
    SEMICOLON       reduce using rule 165 (empty -> .)

    varsE                          shift and go to state 207
    empty                          shift and go to state 80

state 184

    (14) varsC -> LEFTBRACKET varIsArray CTI varsNP4 RIGHTBRACKET . varsD
    (18) varsD -> . LEFTBRACKET varIsMatrix CTI varsNP5 RIGHTBRACKET
    (19) varsD -> . empty
    (165) empty -> .

    LEFTBRACKET     shift and go to state 208
    SEMICOLON       reduce using rule 165 (empty -> .)

    varsD                          shift and go to state 209
    empty                          shift and go to state 210

state 185

    (64) asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .

    ID              reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    READ            reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    WRITE           reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    RETURN          reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    IF              reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    FROM            reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    HISTOGRAM       reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    BOXPLOT         reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    RIGHTCURLY      reduce using rule 64 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)


state 186

    (67) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam . llamadaA RIGHTPAR llamadaNP3
    (70) llamadaA -> . COMMA exp loeNP1 llamadaA
    (71) llamadaA -> . empty
    (165) empty -> .

    COMMA           shift and go to state 212
    RIGHTPAR        reduce using rule 165 (empty -> .)

    llamadaA                       shift and go to state 211
    empty                          shift and go to state 213

state 187

    (68) primerparam -> exp . loeNP1
    (82) loeNP1 -> .

    COMMA           reduce using rule 82 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 82 (loeNP1 -> .)

    loeNP1                         shift and go to state 214

state 188

    (69) primerparam -> empty .

    COMMA           reduce using rule 69 (primerparam -> empty .)
    RIGHTPAR        reduce using rule 69 (primerparam -> empty .)


state 189

    (99) variableA -> LEFTBRACKET check_if_non_atomic exp . verify RIGHTBRACKET variableB
    (102) verify -> .

    RIGHTBRACKET    reduce using rule 102 (verify -> .)

    verify                         shift and go to state 215

state 190

    (76) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA . escrituraB RIGHTPAR escrituraNP3
    (84) escrituraB -> . COMMA escrituraA escrituraB
    (85) escrituraB -> . empty
    (165) empty -> .

    COMMA           shift and go to state 217
    RIGHTPAR        reduce using rule 165 (empty -> .)

    escrituraB                     shift and go to state 216
    empty                          shift and go to state 218

state 191

    (80) escrituraA -> exp . loeNP1
    (82) loeNP1 -> .

    COMMA           reduce using rule 82 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 82 (loeNP1 -> .)

    loeNP1                         shift and go to state 219

state 192

    (81) escrituraA -> CTSTRING . escrituraNP2
    (83) escrituraNP2 -> .

    COMMA           reduce using rule 83 (escrituraNP2 -> .)
    RIGHTPAR        reduce using rule 83 (escrituraNP2 -> .)

    escrituraNP2                   shift and go to state 220

state 193

    (110) expA -> OROP operNP1 exp1 . expNP1 expA
    (109) expNP1 -> .

    OROP            reduce using rule 109 (expNP1 -> .)
    ID              reduce using rule 109 (expNP1 -> .)
    READ            reduce using rule 109 (expNP1 -> .)
    WRITE           reduce using rule 109 (expNP1 -> .)
    RETURN          reduce using rule 109 (expNP1 -> .)
    IF              reduce using rule 109 (expNP1 -> .)
    FROM            reduce using rule 109 (expNP1 -> .)
    HISTOGRAM       reduce using rule 109 (expNP1 -> .)
    BOXPLOT         reduce using rule 109 (expNP1 -> .)
    RIGHTCURLY      reduce using rule 109 (expNP1 -> .)
    TO              reduce using rule 109 (expNP1 -> .)
    RIGHTPAR        reduce using rule 109 (expNP1 -> .)
    DO              reduce using rule 109 (expNP1 -> .)
    COMMA           reduce using rule 109 (expNP1 -> .)
    RIGHTBRACKET    reduce using rule 109 (expNP1 -> .)

    expNP1                         shift and go to state 221

state 194

    (114) exp1A -> ANDOP operNP1 exp2 . exp1NP1 exp1A
    (113) exp1NP1 -> .

    ANDOP           reduce using rule 113 (exp1NP1 -> .)
    OROP            reduce using rule 113 (exp1NP1 -> .)
    ID              reduce using rule 113 (exp1NP1 -> .)
    READ            reduce using rule 113 (exp1NP1 -> .)
    WRITE           reduce using rule 113 (exp1NP1 -> .)
    RETURN          reduce using rule 113 (exp1NP1 -> .)
    IF              reduce using rule 113 (exp1NP1 -> .)
    FROM            reduce using rule 113 (exp1NP1 -> .)
    HISTOGRAM       reduce using rule 113 (exp1NP1 -> .)
    BOXPLOT         reduce using rule 113 (exp1NP1 -> .)
    RIGHTCURLY      reduce using rule 113 (exp1NP1 -> .)
    TO              reduce using rule 113 (exp1NP1 -> .)
    RIGHTPAR        reduce using rule 113 (exp1NP1 -> .)
    DO              reduce using rule 113 (exp1NP1 -> .)
    COMMA           reduce using rule 113 (exp1NP1 -> .)
    RIGHTBRACKET    reduce using rule 113 (exp1NP1 -> .)

    exp1NP1                        shift and go to state 222

state 195

    (117) exp2A -> exp2B operNP1 exp3 . exp2ANP1
    (119) exp2ANP1 -> .

    ANDOP           reduce using rule 119 (exp2ANP1 -> .)
    OROP            reduce using rule 119 (exp2ANP1 -> .)
    ID              reduce using rule 119 (exp2ANP1 -> .)
    READ            reduce using rule 119 (exp2ANP1 -> .)
    WRITE           reduce using rule 119 (exp2ANP1 -> .)
    RETURN          reduce using rule 119 (exp2ANP1 -> .)
    IF              reduce using rule 119 (exp2ANP1 -> .)
    FROM            reduce using rule 119 (exp2ANP1 -> .)
    HISTOGRAM       reduce using rule 119 (exp2ANP1 -> .)
    BOXPLOT         reduce using rule 119 (exp2ANP1 -> .)
    RIGHTCURLY      reduce using rule 119 (exp2ANP1 -> .)
    TO              reduce using rule 119 (exp2ANP1 -> .)
    RIGHTPAR        reduce using rule 119 (exp2ANP1 -> .)
    DO              reduce using rule 119 (exp2ANP1 -> .)
    COMMA           reduce using rule 119 (exp2ANP1 -> .)
    RIGHTBRACKET    reduce using rule 119 (exp2ANP1 -> .)

    exp2ANP1                       shift and go to state 223

state 196

    (126) exp3A -> exp3B operNP1 termino . exp3NP1 exp3A
    (125) exp3NP1 -> .

    SUMOP           reduce using rule 125 (exp3NP1 -> .)
    SUBOP           reduce using rule 125 (exp3NP1 -> .)
    LESSTHANOP      reduce using rule 125 (exp3NP1 -> .)
    GREATERTHANOP   reduce using rule 125 (exp3NP1 -> .)
    DIFFERENTOP     reduce using rule 125 (exp3NP1 -> .)
    EQUALOP         reduce using rule 125 (exp3NP1 -> .)
    ANDOP           reduce using rule 125 (exp3NP1 -> .)
    OROP            reduce using rule 125 (exp3NP1 -> .)
    ID              reduce using rule 125 (exp3NP1 -> .)
    READ            reduce using rule 125 (exp3NP1 -> .)
    WRITE           reduce using rule 125 (exp3NP1 -> .)
    RETURN          reduce using rule 125 (exp3NP1 -> .)
    IF              reduce using rule 125 (exp3NP1 -> .)
    FROM            reduce using rule 125 (exp3NP1 -> .)
    HISTOGRAM       reduce using rule 125 (exp3NP1 -> .)
    BOXPLOT         reduce using rule 125 (exp3NP1 -> .)
    RIGHTCURLY      reduce using rule 125 (exp3NP1 -> .)
    TO              reduce using rule 125 (exp3NP1 -> .)
    RIGHTPAR        reduce using rule 125 (exp3NP1 -> .)
    DO              reduce using rule 125 (exp3NP1 -> .)
    COMMA           reduce using rule 125 (exp3NP1 -> .)
    RIGHTBRACKET    reduce using rule 125 (exp3NP1 -> .)

    exp3NP1                        shift and go to state 224

state 197

    (131) terminoA -> terminoB operNP1 terminoC . terminoANP1 terminoA
    (133) terminoANP1 -> .

    MULOP           reduce using rule 133 (terminoANP1 -> .)
    DIVOP           reduce using rule 133 (terminoANP1 -> .)
    SUMOP           reduce using rule 133 (terminoANP1 -> .)
    SUBOP           reduce using rule 133 (terminoANP1 -> .)
    LESSTHANOP      reduce using rule 133 (terminoANP1 -> .)
    GREATERTHANOP   reduce using rule 133 (terminoANP1 -> .)
    DIFFERENTOP     reduce using rule 133 (terminoANP1 -> .)
    EQUALOP         reduce using rule 133 (terminoANP1 -> .)
    ANDOP           reduce using rule 133 (terminoANP1 -> .)
    OROP            reduce using rule 133 (terminoANP1 -> .)
    ID              reduce using rule 133 (terminoANP1 -> .)
    READ            reduce using rule 133 (terminoANP1 -> .)
    WRITE           reduce using rule 133 (terminoANP1 -> .)
    RETURN          reduce using rule 133 (terminoANP1 -> .)
    IF              reduce using rule 133 (terminoANP1 -> .)
    FROM            reduce using rule 133 (terminoANP1 -> .)
    HISTOGRAM       reduce using rule 133 (terminoANP1 -> .)
    BOXPLOT         reduce using rule 133 (terminoANP1 -> .)
    RIGHTCURLY      reduce using rule 133 (terminoANP1 -> .)
    TO              reduce using rule 133 (terminoANP1 -> .)
    RIGHTPAR        reduce using rule 133 (terminoANP1 -> .)
    DO              reduce using rule 133 (terminoANP1 -> .)
    COMMA           reduce using rule 133 (terminoANP1 -> .)
    RIGHTBRACKET    reduce using rule 133 (terminoANP1 -> .)

    terminoANP1                    shift and go to state 225

state 198

    (139) factor -> LEFTPAR operNP1 exp RIGHTPAR . factorNP1
    (149) factorNP1 -> .

    MULOP           reduce using rule 149 (factorNP1 -> .)
    DIVOP           reduce using rule 149 (factorNP1 -> .)
    SUMOP           reduce using rule 149 (factorNP1 -> .)
    SUBOP           reduce using rule 149 (factorNP1 -> .)
    LESSTHANOP      reduce using rule 149 (factorNP1 -> .)
    GREATERTHANOP   reduce using rule 149 (factorNP1 -> .)
    DIFFERENTOP     reduce using rule 149 (factorNP1 -> .)
    EQUALOP         reduce using rule 149 (factorNP1 -> .)
    ANDOP           reduce using rule 149 (factorNP1 -> .)
    OROP            reduce using rule 149 (factorNP1 -> .)
    ID              reduce using rule 149 (factorNP1 -> .)
    READ            reduce using rule 149 (factorNP1 -> .)
    WRITE           reduce using rule 149 (factorNP1 -> .)
    RETURN          reduce using rule 149 (factorNP1 -> .)
    IF              reduce using rule 149 (factorNP1 -> .)
    FROM            reduce using rule 149 (factorNP1 -> .)
    HISTOGRAM       reduce using rule 149 (factorNP1 -> .)
    BOXPLOT         reduce using rule 149 (factorNP1 -> .)
    RIGHTCURLY      reduce using rule 149 (factorNP1 -> .)
    TO              reduce using rule 149 (factorNP1 -> .)
    RIGHTPAR        reduce using rule 149 (factorNP1 -> .)
    DO              reduce using rule 149 (factorNP1 -> .)
    COMMA           reduce using rule 149 (factorNP1 -> .)
    RIGHTBRACKET    reduce using rule 149 (factorNP1 -> .)

    factorNP1                      shift and go to state 226

state 199

    (152) special -> specialFunc addSpecialToStack LEFTPAR ID . variableNP1 check_if_is_matrix RIGHTPAR process_special
    (98) variableNP1 -> .

    RIGHTPAR        reduce using rule 98 (variableNP1 -> .)

    variableNP1                    shift and go to state 227

state 200

    (88) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR . bloque condicionA condicionANP2
    (50) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 228

state 201

    (94) ciclo -> FROM exp TO exp DO . cicloNP1 bloque cicloNP2
    (95) cicloNP1 -> .

    LEFTCURLY       reduce using rule 95 (cicloNP1 -> .)

    cicloNP1                       shift and go to state 229

state 202

    (158) specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 . check_if_is_matrix RIGHTPAR process_specialGraph
    (162) check_if_is_matrix -> .

    RIGHTPAR        reduce using rule 162 (check_if_is_matrix -> .)

    check_if_is_matrix             shift and go to state 230

state 203

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC . quadStart bloque genMemReqs
    (28) quadStart -> .

    LEFTCURLY       reduce using rule 28 (quadStart -> .)

    quadStart                      shift and go to state 231

state 204

    (37) funcionC -> vars .

    LEFTCURLY       reduce using rule 37 (funcionC -> vars .)


state 205

    (38) funcionC -> empty .

    LEFTCURLY       reduce using rule 38 (funcionC -> empty .)


state 206

    (45) params -> tipoSimple paramsNP1 ID paramsNP2 . paramsA
    (46) paramsA -> . COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
    (47) paramsA -> . empty
    (165) empty -> .

    COMMA           shift and go to state 233
    RIGHTPAR        reduce using rule 165 (empty -> .)

    paramsA                        shift and go to state 232
    empty                          shift and go to state 234

state 207

    (22) varsE -> COMMA ID varsNP3 varsNP6 varsE .

    SEMICOLON       reduce using rule 22 (varsE -> COMMA ID varsNP3 varsNP6 varsE .)


state 208

    (18) varsD -> LEFTBRACKET . varIsMatrix CTI varsNP5 RIGHTBRACKET
    (20) varIsMatrix -> .

    CTI             reduce using rule 20 (varIsMatrix -> .)

    varIsMatrix                    shift and go to state 235

state 209

    (14) varsC -> LEFTBRACKET varIsArray CTI varsNP4 RIGHTBRACKET varsD .

    SEMICOLON       reduce using rule 14 (varsC -> LEFTBRACKET varIsArray CTI varsNP4 RIGHTBRACKET varsD .)


state 210

    (19) varsD -> empty .

    SEMICOLON       reduce using rule 19 (varsD -> empty .)


state 211

    (67) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA . RIGHTPAR llamadaNP3

    RIGHTPAR        shift and go to state 236


state 212

    (70) llamadaA -> COMMA . exp loeNP1 llamadaA
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 237
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 213

    (71) llamadaA -> empty .

    RIGHTPAR        reduce using rule 71 (llamadaA -> empty .)


state 214

    (68) primerparam -> exp loeNP1 .

    COMMA           reduce using rule 68 (primerparam -> exp loeNP1 .)
    RIGHTPAR        reduce using rule 68 (primerparam -> exp loeNP1 .)


state 215

    (99) variableA -> LEFTBRACKET check_if_non_atomic exp verify . RIGHTBRACKET variableB

    RIGHTBRACKET    shift and go to state 238


state 216

    (76) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB . RIGHTPAR escrituraNP3

    RIGHTPAR        shift and go to state 239


state 217

    (84) escrituraB -> COMMA . escrituraA escrituraB
    (80) escrituraA -> . exp loeNP1
    (81) escrituraA -> . CTSTRING escrituraNP2
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    CTSTRING        shift and go to state 192
    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    escrituraA                     shift and go to state 240
    exp                            shift and go to state 191
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 218

    (85) escrituraB -> empty .

    RIGHTPAR        reduce using rule 85 (escrituraB -> empty .)


state 219

    (80) escrituraA -> exp loeNP1 .

    COMMA           reduce using rule 80 (escrituraA -> exp loeNP1 .)
    RIGHTPAR        reduce using rule 80 (escrituraA -> exp loeNP1 .)


state 220

    (81) escrituraA -> CTSTRING escrituraNP2 .

    COMMA           reduce using rule 81 (escrituraA -> CTSTRING escrituraNP2 .)
    RIGHTPAR        reduce using rule 81 (escrituraA -> CTSTRING escrituraNP2 .)


state 221

    (110) expA -> OROP operNP1 exp1 expNP1 . expA
    (110) expA -> . OROP operNP1 exp1 expNP1 expA
    (111) expA -> . empty
    (165) empty -> .

    OROP            shift and go to state 129
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    expA                           shift and go to state 241
    empty                          shift and go to state 130

state 222

    (114) exp1A -> ANDOP operNP1 exp2 exp1NP1 . exp1A
    (114) exp1A -> . ANDOP operNP1 exp2 exp1NP1 exp1A
    (115) exp1A -> . empty
    (165) empty -> .

    ANDOP           shift and go to state 132
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    exp1A                          shift and go to state 242
    empty                          shift and go to state 133

state 223

    (117) exp2A -> exp2B operNP1 exp3 exp2ANP1 .

    ANDOP           reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    OROP            reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    ID              reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    READ            reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    WRITE           reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RETURN          reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    IF              reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    FROM            reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    HISTOGRAM       reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    BOXPLOT         reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTCURLY      reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    TO              reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTPAR        reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    DO              reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    COMMA           reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTBRACKET    reduce using rule 117 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)


state 224

    (126) exp3A -> exp3B operNP1 termino exp3NP1 . exp3A
    (126) exp3A -> . exp3B operNP1 termino exp3NP1 exp3A
    (127) exp3A -> . empty
    (128) exp3B -> . SUMOP
    (129) exp3B -> . SUBOP
    (165) empty -> .

    SUMOP           shift and go to state 144
    SUBOP           shift and go to state 145
    LESSTHANOP      reduce using rule 165 (empty -> .)
    GREATERTHANOP   reduce using rule 165 (empty -> .)
    DIFFERENTOP     reduce using rule 165 (empty -> .)
    EQUALOP         reduce using rule 165 (empty -> .)
    ANDOP           reduce using rule 165 (empty -> .)
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    exp3B                          shift and go to state 142
    exp3A                          shift and go to state 243
    empty                          shift and go to state 143

state 225

    (131) terminoA -> terminoB operNP1 terminoC terminoANP1 . terminoA
    (131) terminoA -> . terminoB operNP1 terminoC terminoANP1 terminoA
    (132) terminoA -> . empty
    (134) terminoB -> . MULOP
    (135) terminoB -> . DIVOP
    (165) empty -> .

    MULOP           shift and go to state 149
    DIVOP           shift and go to state 150
    SUMOP           reduce using rule 165 (empty -> .)
    SUBOP           reduce using rule 165 (empty -> .)
    LESSTHANOP      reduce using rule 165 (empty -> .)
    GREATERTHANOP   reduce using rule 165 (empty -> .)
    DIFFERENTOP     reduce using rule 165 (empty -> .)
    EQUALOP         reduce using rule 165 (empty -> .)
    ANDOP           reduce using rule 165 (empty -> .)
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    terminoB                       shift and go to state 147
    terminoA                       shift and go to state 244
    empty                          shift and go to state 148

state 226

    (139) factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .

    MULOP           reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DIVOP           reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    SUMOP           reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    SUBOP           reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    LESSTHANOP      reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    GREATERTHANOP   reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DIFFERENTOP     reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    EQUALOP         reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    ANDOP           reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    OROP            reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    ID              reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    READ            reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    WRITE           reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RETURN          reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    IF              reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    FROM            reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    HISTOGRAM       reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    BOXPLOT         reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTCURLY      reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    TO              reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTPAR        reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DO              reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    COMMA           reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTBRACKET    reduce using rule 139 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)


state 227

    (152) special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 . check_if_is_matrix RIGHTPAR process_special
    (162) check_if_is_matrix -> .

    RIGHTPAR        reduce using rule 162 (check_if_is_matrix -> .)

    check_if_is_matrix             shift and go to state 245

state 228

    (88) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque . condicionA condicionANP2
    (90) condicionA -> . ELSE condicionANP1 bloque
    (91) condicionA -> . empty
    (165) empty -> .

    ELSE            shift and go to state 247
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)

    condicionA                     shift and go to state 246
    empty                          shift and go to state 248

state 229

    (94) ciclo -> FROM exp TO exp DO cicloNP1 . bloque cicloNP2
    (50) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 249

state 230

    (158) specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix . RIGHTPAR process_specialGraph

    RIGHTPAR        shift and go to state 250


state 231

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart . bloque genMemReqs
    (50) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 251

state 232

    (45) params -> tipoSimple paramsNP1 ID paramsNP2 paramsA .

    RIGHTPAR        reduce using rule 45 (params -> tipoSimple paramsNP1 ID paramsNP2 paramsA .)


state 233

    (46) paramsA -> COMMA . tipoSimple paramsNP1 ID paramsNP2 paramsA
    (42) tipoSimple -> . INT tipoSimpleNP1
    (43) tipoSimple -> . FLOAT tipoSimpleNP1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    tipoSimple                     shift and go to state 252

state 234

    (47) paramsA -> empty .

    RIGHTPAR        reduce using rule 47 (paramsA -> empty .)


state 235

    (18) varsD -> LEFTBRACKET varIsMatrix . CTI varsNP5 RIGHTBRACKET

    CTI             shift and go to state 253


state 236

    (67) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR . llamadaNP3
    (73) llamadaNP3 -> .

    ID              reduce using rule 73 (llamadaNP3 -> .)
    READ            reduce using rule 73 (llamadaNP3 -> .)
    WRITE           reduce using rule 73 (llamadaNP3 -> .)
    RETURN          reduce using rule 73 (llamadaNP3 -> .)
    IF              reduce using rule 73 (llamadaNP3 -> .)
    FROM            reduce using rule 73 (llamadaNP3 -> .)
    HISTOGRAM       reduce using rule 73 (llamadaNP3 -> .)
    BOXPLOT         reduce using rule 73 (llamadaNP3 -> .)
    RIGHTCURLY      reduce using rule 73 (llamadaNP3 -> .)
    MULOP           reduce using rule 73 (llamadaNP3 -> .)
    DIVOP           reduce using rule 73 (llamadaNP3 -> .)
    SUMOP           reduce using rule 73 (llamadaNP3 -> .)
    SUBOP           reduce using rule 73 (llamadaNP3 -> .)
    LESSTHANOP      reduce using rule 73 (llamadaNP3 -> .)
    GREATERTHANOP   reduce using rule 73 (llamadaNP3 -> .)
    DIFFERENTOP     reduce using rule 73 (llamadaNP3 -> .)
    EQUALOP         reduce using rule 73 (llamadaNP3 -> .)
    ANDOP           reduce using rule 73 (llamadaNP3 -> .)
    OROP            reduce using rule 73 (llamadaNP3 -> .)
    TO              reduce using rule 73 (llamadaNP3 -> .)
    RIGHTPAR        reduce using rule 73 (llamadaNP3 -> .)
    DO              reduce using rule 73 (llamadaNP3 -> .)
    COMMA           reduce using rule 73 (llamadaNP3 -> .)
    RIGHTBRACKET    reduce using rule 73 (llamadaNP3 -> .)

    llamadaNP3                     shift and go to state 254

state 237

    (70) llamadaA -> COMMA exp . loeNP1 llamadaA
    (82) loeNP1 -> .

    COMMA           reduce using rule 82 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 82 (loeNP1 -> .)

    loeNP1                         shift and go to state 255

state 238

    (99) variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET . variableB
    (103) variableB -> . LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET
    (104) variableB -> . empty on_matrix_check
    (165) empty -> .

    LEFTBRACKET     shift and go to state 256
    ASSIGNOP        reduce using rule 165 (empty -> .)
    MULOP           reduce using rule 165 (empty -> .)
    DIVOP           reduce using rule 165 (empty -> .)
    SUMOP           reduce using rule 165 (empty -> .)
    SUBOP           reduce using rule 165 (empty -> .)
    LESSTHANOP      reduce using rule 165 (empty -> .)
    GREATERTHANOP   reduce using rule 165 (empty -> .)
    DIFFERENTOP     reduce using rule 165 (empty -> .)
    EQUALOP         reduce using rule 165 (empty -> .)
    ANDOP           reduce using rule 165 (empty -> .)
    OROP            reduce using rule 165 (empty -> .)
    ID              reduce using rule 165 (empty -> .)
    READ            reduce using rule 165 (empty -> .)
    WRITE           reduce using rule 165 (empty -> .)
    RETURN          reduce using rule 165 (empty -> .)
    IF              reduce using rule 165 (empty -> .)
    FROM            reduce using rule 165 (empty -> .)
    HISTOGRAM       reduce using rule 165 (empty -> .)
    BOXPLOT         reduce using rule 165 (empty -> .)
    RIGHTCURLY      reduce using rule 165 (empty -> .)
    TO              reduce using rule 165 (empty -> .)
    RIGHTPAR        reduce using rule 165 (empty -> .)
    DO              reduce using rule 165 (empty -> .)
    COMMA           reduce using rule 165 (empty -> .)
    RIGHTBRACKET    reduce using rule 165 (empty -> .)

    variableB                      shift and go to state 257
    empty                          shift and go to state 258

state 239

    (76) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR . escrituraNP3
    (78) escrituraNP3 -> .

    ID              reduce using rule 78 (escrituraNP3 -> .)
    READ            reduce using rule 78 (escrituraNP3 -> .)
    WRITE           reduce using rule 78 (escrituraNP3 -> .)
    RETURN          reduce using rule 78 (escrituraNP3 -> .)
    IF              reduce using rule 78 (escrituraNP3 -> .)
    FROM            reduce using rule 78 (escrituraNP3 -> .)
    HISTOGRAM       reduce using rule 78 (escrituraNP3 -> .)
    BOXPLOT         reduce using rule 78 (escrituraNP3 -> .)
    RIGHTCURLY      reduce using rule 78 (escrituraNP3 -> .)

    escrituraNP3                   shift and go to state 259

state 240

    (84) escrituraB -> COMMA escrituraA . escrituraB
    (84) escrituraB -> . COMMA escrituraA escrituraB
    (85) escrituraB -> . empty
    (165) empty -> .

    COMMA           shift and go to state 217
    RIGHTPAR        reduce using rule 165 (empty -> .)

    escrituraB                     shift and go to state 260
    empty                          shift and go to state 218

state 241

    (110) expA -> OROP operNP1 exp1 expNP1 expA .

    ID              reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    READ            reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    WRITE           reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RETURN          reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    IF              reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    FROM            reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    HISTOGRAM       reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    BOXPLOT         reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTCURLY      reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    TO              reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTPAR        reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    DO              reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    COMMA           reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTBRACKET    reduce using rule 110 (expA -> OROP operNP1 exp1 expNP1 expA .)


state 242

    (114) exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .

    OROP            reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    ID              reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    READ            reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    WRITE           reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RETURN          reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    IF              reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    FROM            reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    HISTOGRAM       reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    BOXPLOT         reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTCURLY      reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    TO              reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTPAR        reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    DO              reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    COMMA           reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTBRACKET    reduce using rule 114 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)


state 243

    (126) exp3A -> exp3B operNP1 termino exp3NP1 exp3A .

    LESSTHANOP      reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    GREATERTHANOP   reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    DIFFERENTOP     reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    EQUALOP         reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    ANDOP           reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    OROP            reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    ID              reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    READ            reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    WRITE           reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RETURN          reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    IF              reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    FROM            reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    HISTOGRAM       reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    BOXPLOT         reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTCURLY      reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    TO              reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTPAR        reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    DO              reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    COMMA           reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTBRACKET    reduce using rule 126 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)


state 244

    (131) terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .

    SUMOP           reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    SUBOP           reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    LESSTHANOP      reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    GREATERTHANOP   reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    DIFFERENTOP     reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    EQUALOP         reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    ANDOP           reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    OROP            reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    ID              reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    READ            reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    WRITE           reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RETURN          reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    IF              reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    FROM            reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    HISTOGRAM       reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    BOXPLOT         reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTCURLY      reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    TO              reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTPAR        reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    DO              reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    COMMA           reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTBRACKET    reduce using rule 131 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)


state 245

    (152) special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix . RIGHTPAR process_special

    RIGHTPAR        shift and go to state 261


state 246

    (88) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA . condicionANP2
    (93) condicionANP2 -> .

    ID              reduce using rule 93 (condicionANP2 -> .)
    READ            reduce using rule 93 (condicionANP2 -> .)
    WRITE           reduce using rule 93 (condicionANP2 -> .)
    RETURN          reduce using rule 93 (condicionANP2 -> .)
    IF              reduce using rule 93 (condicionANP2 -> .)
    FROM            reduce using rule 93 (condicionANP2 -> .)
    HISTOGRAM       reduce using rule 93 (condicionANP2 -> .)
    BOXPLOT         reduce using rule 93 (condicionANP2 -> .)
    RIGHTCURLY      reduce using rule 93 (condicionANP2 -> .)

    condicionANP2                  shift and go to state 262

state 247

    (90) condicionA -> ELSE . condicionANP1 bloque
    (92) condicionANP1 -> .

    LEFTCURLY       reduce using rule 92 (condicionANP1 -> .)

    condicionANP1                  shift and go to state 263

state 248

    (91) condicionA -> empty .

    ID              reduce using rule 91 (condicionA -> empty .)
    READ            reduce using rule 91 (condicionA -> empty .)
    WRITE           reduce using rule 91 (condicionA -> empty .)
    RETURN          reduce using rule 91 (condicionA -> empty .)
    IF              reduce using rule 91 (condicionA -> empty .)
    FROM            reduce using rule 91 (condicionA -> empty .)
    HISTOGRAM       reduce using rule 91 (condicionA -> empty .)
    BOXPLOT         reduce using rule 91 (condicionA -> empty .)
    RIGHTCURLY      reduce using rule 91 (condicionA -> empty .)


state 249

    (94) ciclo -> FROM exp TO exp DO cicloNP1 bloque . cicloNP2
    (96) cicloNP2 -> .

    ID              reduce using rule 96 (cicloNP2 -> .)
    READ            reduce using rule 96 (cicloNP2 -> .)
    WRITE           reduce using rule 96 (cicloNP2 -> .)
    RETURN          reduce using rule 96 (cicloNP2 -> .)
    IF              reduce using rule 96 (cicloNP2 -> .)
    FROM            reduce using rule 96 (cicloNP2 -> .)
    HISTOGRAM       reduce using rule 96 (cicloNP2 -> .)
    BOXPLOT         reduce using rule 96 (cicloNP2 -> .)
    RIGHTCURLY      reduce using rule 96 (cicloNP2 -> .)

    cicloNP2                       shift and go to state 264

state 250

    (158) specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR . process_specialGraph
    (164) process_specialGraph -> .

    ID              reduce using rule 164 (process_specialGraph -> .)
    READ            reduce using rule 164 (process_specialGraph -> .)
    WRITE           reduce using rule 164 (process_specialGraph -> .)
    RETURN          reduce using rule 164 (process_specialGraph -> .)
    IF              reduce using rule 164 (process_specialGraph -> .)
    FROM            reduce using rule 164 (process_specialGraph -> .)
    HISTOGRAM       reduce using rule 164 (process_specialGraph -> .)
    BOXPLOT         reduce using rule 164 (process_specialGraph -> .)
    RIGHTCURLY      reduce using rule 164 (process_specialGraph -> .)

    process_specialGraph           shift and go to state 265

state 251

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque . genMemReqs
    (29) genMemReqs -> .

    FUNC            reduce using rule 29 (genMemReqs -> .)
    MAINSTART       reduce using rule 29 (genMemReqs -> .)

    genMemReqs                     shift and go to state 266

state 252

    (46) paramsA -> COMMA tipoSimple . paramsNP1 ID paramsNP2 paramsA
    (48) paramsNP1 -> .

    ID              reduce using rule 48 (paramsNP1 -> .)

    paramsNP1                      shift and go to state 267

state 253

    (18) varsD -> LEFTBRACKET varIsMatrix CTI . varsNP5 RIGHTBRACKET
    (21) varsNP5 -> .

    RIGHTBRACKET    reduce using rule 21 (varsNP5 -> .)

    varsNP5                        shift and go to state 268

state 254

    (67) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .

    ID              reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    READ            reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    WRITE           reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RETURN          reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    IF              reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    FROM            reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    HISTOGRAM       reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    BOXPLOT         reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTCURLY      reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    MULOP           reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DIVOP           reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    SUMOP           reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    SUBOP           reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    LESSTHANOP      reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    GREATERTHANOP   reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DIFFERENTOP     reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    EQUALOP         reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    ANDOP           reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    OROP            reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    TO              reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTPAR        reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DO              reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    COMMA           reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTBRACKET    reduce using rule 67 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)


state 255

    (70) llamadaA -> COMMA exp loeNP1 . llamadaA
    (70) llamadaA -> . COMMA exp loeNP1 llamadaA
    (71) llamadaA -> . empty
    (165) empty -> .

    COMMA           shift and go to state 212
    RIGHTPAR        reduce using rule 165 (empty -> .)

    llamadaA                       shift and go to state 269
    empty                          shift and go to state 213

state 256

    (103) variableB -> LEFTBRACKET . check_if_matrix exp verify_matrix RIGHTBRACKET
    (105) check_if_matrix -> .

    LEFTPAR         reduce using rule 105 (check_if_matrix -> .)
    CTI             reduce using rule 105 (check_if_matrix -> .)
    CTF             reduce using rule 105 (check_if_matrix -> .)
    ID              reduce using rule 105 (check_if_matrix -> .)
    SUBOP           reduce using rule 105 (check_if_matrix -> .)
    MEAN            reduce using rule 105 (check_if_matrix -> .)
    MEDIAN          reduce using rule 105 (check_if_matrix -> .)
    MODE            reduce using rule 105 (check_if_matrix -> .)
    VARIANCE        reduce using rule 105 (check_if_matrix -> .)
    STDDEV          reduce using rule 105 (check_if_matrix -> .)

    check_if_matrix                shift and go to state 270

state 257

    (99) variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .

    ASSIGNOP        reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    MULOP           reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    DIVOP           reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    SUMOP           reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    SUBOP           reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    LESSTHANOP      reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    GREATERTHANOP   reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    DIFFERENTOP     reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    EQUALOP         reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    ANDOP           reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    OROP            reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    ID              reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    READ            reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    WRITE           reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    RETURN          reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    IF              reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    FROM            reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    HISTOGRAM       reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    BOXPLOT         reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    RIGHTCURLY      reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    TO              reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    RIGHTPAR        reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    DO              reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    COMMA           reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)
    RIGHTBRACKET    reduce using rule 99 (variableA -> LEFTBRACKET check_if_non_atomic exp verify RIGHTBRACKET variableB .)


state 258

    (104) variableB -> empty . on_matrix_check
    (107) on_matrix_check -> .

    ASSIGNOP        reduce using rule 107 (on_matrix_check -> .)
    MULOP           reduce using rule 107 (on_matrix_check -> .)
    DIVOP           reduce using rule 107 (on_matrix_check -> .)
    SUMOP           reduce using rule 107 (on_matrix_check -> .)
    SUBOP           reduce using rule 107 (on_matrix_check -> .)
    LESSTHANOP      reduce using rule 107 (on_matrix_check -> .)
    GREATERTHANOP   reduce using rule 107 (on_matrix_check -> .)
    DIFFERENTOP     reduce using rule 107 (on_matrix_check -> .)
    EQUALOP         reduce using rule 107 (on_matrix_check -> .)
    ANDOP           reduce using rule 107 (on_matrix_check -> .)
    OROP            reduce using rule 107 (on_matrix_check -> .)
    ID              reduce using rule 107 (on_matrix_check -> .)
    READ            reduce using rule 107 (on_matrix_check -> .)
    WRITE           reduce using rule 107 (on_matrix_check -> .)
    RETURN          reduce using rule 107 (on_matrix_check -> .)
    IF              reduce using rule 107 (on_matrix_check -> .)
    FROM            reduce using rule 107 (on_matrix_check -> .)
    HISTOGRAM       reduce using rule 107 (on_matrix_check -> .)
    BOXPLOT         reduce using rule 107 (on_matrix_check -> .)
    RIGHTCURLY      reduce using rule 107 (on_matrix_check -> .)
    TO              reduce using rule 107 (on_matrix_check -> .)
    RIGHTPAR        reduce using rule 107 (on_matrix_check -> .)
    DO              reduce using rule 107 (on_matrix_check -> .)
    COMMA           reduce using rule 107 (on_matrix_check -> .)
    RIGHTBRACKET    reduce using rule 107 (on_matrix_check -> .)

    on_matrix_check                shift and go to state 271

state 259

    (76) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .

    ID              reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    READ            reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    WRITE           reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    RETURN          reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    IF              reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    FROM            reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    HISTOGRAM       reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    BOXPLOT         reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    RIGHTCURLY      reduce using rule 76 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)


state 260

    (84) escrituraB -> COMMA escrituraA escrituraB .

    RIGHTPAR        reduce using rule 84 (escrituraB -> COMMA escrituraA escrituraB .)


state 261

    (152) special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR . process_special
    (163) process_special -> .

    MULOP           reduce using rule 163 (process_special -> .)
    DIVOP           reduce using rule 163 (process_special -> .)
    SUMOP           reduce using rule 163 (process_special -> .)
    SUBOP           reduce using rule 163 (process_special -> .)
    LESSTHANOP      reduce using rule 163 (process_special -> .)
    GREATERTHANOP   reduce using rule 163 (process_special -> .)
    DIFFERENTOP     reduce using rule 163 (process_special -> .)
    EQUALOP         reduce using rule 163 (process_special -> .)
    ANDOP           reduce using rule 163 (process_special -> .)
    OROP            reduce using rule 163 (process_special -> .)
    ID              reduce using rule 163 (process_special -> .)
    READ            reduce using rule 163 (process_special -> .)
    WRITE           reduce using rule 163 (process_special -> .)
    RETURN          reduce using rule 163 (process_special -> .)
    IF              reduce using rule 163 (process_special -> .)
    FROM            reduce using rule 163 (process_special -> .)
    HISTOGRAM       reduce using rule 163 (process_special -> .)
    BOXPLOT         reduce using rule 163 (process_special -> .)
    RIGHTCURLY      reduce using rule 163 (process_special -> .)
    TO              reduce using rule 163 (process_special -> .)
    RIGHTPAR        reduce using rule 163 (process_special -> .)
    DO              reduce using rule 163 (process_special -> .)
    COMMA           reduce using rule 163 (process_special -> .)
    RIGHTBRACKET    reduce using rule 163 (process_special -> .)

    process_special                shift and go to state 272

state 262

    (88) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .

    ID              reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    READ            reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    WRITE           reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    RETURN          reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    IF              reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    FROM            reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    HISTOGRAM       reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    BOXPLOT         reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    RIGHTCURLY      reduce using rule 88 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)


state 263

    (90) condicionA -> ELSE condicionANP1 . bloque
    (50) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 273

state 264

    (94) ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .

    ID              reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    READ            reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    WRITE           reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    RETURN          reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    IF              reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    FROM            reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    HISTOGRAM       reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    BOXPLOT         reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    RIGHTCURLY      reduce using rule 94 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)


state 265

    (158) specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .

    ID              reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    READ            reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    WRITE           reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    RETURN          reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    IF              reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    FROM            reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    HISTOGRAM       reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    BOXPLOT         reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)
    RIGHTCURLY      reduce using rule 158 (specialGraph -> specialGraphFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_specialGraph .)


state 266

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .

    FUNC            reduce using rule 27 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .)
    MAINSTART       reduce using rule 27 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .)


state 267

    (46) paramsA -> COMMA tipoSimple paramsNP1 . ID paramsNP2 paramsA

    ID              shift and go to state 274


state 268

    (18) varsD -> LEFTBRACKET varIsMatrix CTI varsNP5 . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 275


state 269

    (70) llamadaA -> COMMA exp loeNP1 llamadaA .

    RIGHTPAR        reduce using rule 70 (llamadaA -> COMMA exp loeNP1 llamadaA .)


state 270

    (103) variableB -> LEFTBRACKET check_if_matrix . exp verify_matrix RIGHTBRACKET
    (108) exp -> . exp1 expA
    (112) exp1 -> . exp2 exp1A
    (116) exp2 -> . exp3 exp2A
    (124) exp3 -> . termino exp3A
    (130) termino -> . terminoC terminoA
    (136) terminoC -> . factor
    (137) terminoC -> . llamada checkIfNotVoid
    (139) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (140) factor -> . CTI factorNP2
    (141) factor -> . CTF factorNP3
    (142) factor -> . negative_int factorNP2
    (143) factor -> . negative_float factorNP3
    (144) factor -> . variable
    (145) factor -> . special
    (67) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (146) negative_int -> . SUBOP CTI
    (147) negative_float -> . SUBOP CTF
    (97) variable -> . ID variableNP1 variableA
    (152) special -> . specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special
    (153) specialFunc -> . MEAN
    (154) specialFunc -> . MEDIAN
    (155) specialFunc -> . MODE
    (156) specialFunc -> . VARIANCE
    (157) specialFunc -> . STDDEV

    LEFTPAR         shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 68
    SUBOP           shift and go to state 104
    MEAN            shift and go to state 106
    MEDIAN          shift and go to state 107
    MODE            shift and go to state 108
    VARIANCE        shift and go to state 109
    STDDEV          shift and go to state 110

    exp                            shift and go to state 276
    exp1                           shift and go to state 90
    exp2                           shift and go to state 91
    exp3                           shift and go to state 92
    termino                        shift and go to state 93
    terminoC                       shift and go to state 94
    factor                         shift and go to state 95
    llamada                        shift and go to state 96
    negative_int                   shift and go to state 100
    negative_float                 shift and go to state 101
    variable                       shift and go to state 102
    special                        shift and go to state 103
    specialFunc                    shift and go to state 105

state 271

    (104) variableB -> empty on_matrix_check .

    ASSIGNOP        reduce using rule 104 (variableB -> empty on_matrix_check .)
    MULOP           reduce using rule 104 (variableB -> empty on_matrix_check .)
    DIVOP           reduce using rule 104 (variableB -> empty on_matrix_check .)
    SUMOP           reduce using rule 104 (variableB -> empty on_matrix_check .)
    SUBOP           reduce using rule 104 (variableB -> empty on_matrix_check .)
    LESSTHANOP      reduce using rule 104 (variableB -> empty on_matrix_check .)
    GREATERTHANOP   reduce using rule 104 (variableB -> empty on_matrix_check .)
    DIFFERENTOP     reduce using rule 104 (variableB -> empty on_matrix_check .)
    EQUALOP         reduce using rule 104 (variableB -> empty on_matrix_check .)
    ANDOP           reduce using rule 104 (variableB -> empty on_matrix_check .)
    OROP            reduce using rule 104 (variableB -> empty on_matrix_check .)
    ID              reduce using rule 104 (variableB -> empty on_matrix_check .)
    READ            reduce using rule 104 (variableB -> empty on_matrix_check .)
    WRITE           reduce using rule 104 (variableB -> empty on_matrix_check .)
    RETURN          reduce using rule 104 (variableB -> empty on_matrix_check .)
    IF              reduce using rule 104 (variableB -> empty on_matrix_check .)
    FROM            reduce using rule 104 (variableB -> empty on_matrix_check .)
    HISTOGRAM       reduce using rule 104 (variableB -> empty on_matrix_check .)
    BOXPLOT         reduce using rule 104 (variableB -> empty on_matrix_check .)
    RIGHTCURLY      reduce using rule 104 (variableB -> empty on_matrix_check .)
    TO              reduce using rule 104 (variableB -> empty on_matrix_check .)
    RIGHTPAR        reduce using rule 104 (variableB -> empty on_matrix_check .)
    DO              reduce using rule 104 (variableB -> empty on_matrix_check .)
    COMMA           reduce using rule 104 (variableB -> empty on_matrix_check .)
    RIGHTBRACKET    reduce using rule 104 (variableB -> empty on_matrix_check .)


state 272

    (152) special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .

    MULOP           reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    DIVOP           reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    SUMOP           reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    SUBOP           reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    LESSTHANOP      reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    GREATERTHANOP   reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    DIFFERENTOP     reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    EQUALOP         reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    ANDOP           reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    OROP            reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    ID              reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    READ            reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    WRITE           reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    RETURN          reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    IF              reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    FROM            reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    HISTOGRAM       reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    BOXPLOT         reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    RIGHTCURLY      reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    TO              reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    RIGHTPAR        reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    DO              reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    COMMA           reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)
    RIGHTBRACKET    reduce using rule 152 (special -> specialFunc addSpecialToStack LEFTPAR ID variableNP1 check_if_is_matrix RIGHTPAR process_special .)


state 273

    (90) condicionA -> ELSE condicionANP1 bloque .

    ID              reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    READ            reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    WRITE           reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    RETURN          reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    IF              reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    FROM            reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    HISTOGRAM       reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    BOXPLOT         reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)
    RIGHTCURLY      reduce using rule 90 (condicionA -> ELSE condicionANP1 bloque .)


state 274

    (46) paramsA -> COMMA tipoSimple paramsNP1 ID . paramsNP2 paramsA
    (49) paramsNP2 -> .

    COMMA           reduce using rule 49 (paramsNP2 -> .)
    RIGHTPAR        reduce using rule 49 (paramsNP2 -> .)

    paramsNP2                      shift and go to state 277

state 275

    (18) varsD -> LEFTBRACKET varIsMatrix CTI varsNP5 RIGHTBRACKET .

    SEMICOLON       reduce using rule 18 (varsD -> LEFTBRACKET varIsMatrix CTI varsNP5 RIGHTBRACKET .)


state 276

    (103) variableB -> LEFTBRACKET check_if_matrix exp . verify_matrix RIGHTBRACKET
    (106) verify_matrix -> .

    RIGHTBRACKET    reduce using rule 106 (verify_matrix -> .)

    verify_matrix                  shift and go to state 278

state 277

    (46) paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 . paramsA
    (46) paramsA -> . COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
    (47) paramsA -> . empty
    (165) empty -> .

    COMMA           shift and go to state 233
    RIGHTPAR        reduce using rule 165 (empty -> .)

    paramsA                        shift and go to state 279
    empty                          shift and go to state 234

state 278

    (103) variableB -> LEFTBRACKET check_if_matrix exp verify_matrix . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 280


state 279

    (46) paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA .

    RIGHTPAR        reduce using rule 46 (paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA .)


state 280

    (103) variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .

    ASSIGNOP        reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    MULOP           reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    DIVOP           reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    SUMOP           reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    SUBOP           reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    LESSTHANOP      reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    GREATERTHANOP   reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    DIFFERENTOP     reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    EQUALOP         reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    ANDOP           reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    OROP            reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    ID              reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    READ            reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    WRITE           reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    RETURN          reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    IF              reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    FROM            reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    HISTOGRAM       reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    BOXPLOT         reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    RIGHTCURLY      reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    TO              reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    DO              reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    COMMA           reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 103 (variableB -> LEFTBRACKET check_if_matrix exp verify_matrix RIGHTBRACKET .)

