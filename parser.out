Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main
Rule 2     programNP1 -> <empty>
Rule 3     programNP2 -> <empty>
Rule 4     programA -> vars
Rule 5     programA -> empty
Rule 6     programB -> funcion programB
Rule 7     programB -> empty
Rule 8     vars -> varsNP1 VAR varsA varsNP7
Rule 9     varsNP7 -> <empty>
Rule 10    varsNP1 -> <empty>
Rule 11    varsA -> varsB SEMICOLON varsF
Rule 12    varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE
Rule 13    varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6
Rule 14    varsNP2 -> <empty>
Rule 15    varsNP6 -> <empty>
Rule 16    varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD
Rule 17    varsC -> empty
Rule 18    varsNP4 -> <empty>
Rule 19    varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET
Rule 20    varsD -> empty
Rule 21    varsNP5 -> <empty>
Rule 22    varsE -> COMMA ID varsNP3 varsE
Rule 23    varsE -> empty
Rule 24    varsNP3 -> <empty>
Rule 25    varsF -> varsA
Rule 26    varsF -> empty
Rule 27    funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque
Rule 28    funcionNP1 -> <empty>
Rule 29    funcionNP2 -> <empty>
Rule 30    funcionA -> tipoSimple
Rule 31    funcionA -> VOID
Rule 32    funcionB -> params
Rule 33    funcionB -> empty
Rule 34    funcionC -> vars
Rule 35    funcionC -> empty
Rule 36    main -> MAINSTART mainNP1 bloque
Rule 37    mainNP1 -> <empty>
Rule 38    tipoSimple -> INT
Rule 39    tipoSimple -> FLOAT
Rule 40    params -> tipoSimple ID paramsA
Rule 41    paramsA -> COMMA tipoSimple ID paramsA
Rule 42    paramsA -> empty
Rule 43    bloque -> LEFTCURLY bloqueA RIGHTCURLY
Rule 44    bloqueA -> estatuto bloqueA
Rule 45    bloqueA -> empty
Rule 46    estatuto -> asignacion
Rule 47    estatuto -> llamada
Rule 48    estatuto -> read
Rule 49    estatuto -> escritura
Rule 50    estatuto -> condicion
Rule 51    estatuto -> ciclo
Rule 52    asignacion -> variable ASSIGNOP exp
Rule 53    llamada -> ID LEFTPAR exp llamadaA RIGHTPAR
Rule 54    llamadaA -> COMMA exp llamadaA
Rule 55    llamadaA -> empty
Rule 56    read -> READ ID
Rule 57    escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR
Rule 58    escrituraA -> exp
Rule 59    escrituraA -> CTSTRING
Rule 60    escrituraB -> COMMA escrituraA escrituraB
Rule 61    escrituraB -> empty
Rule 62    condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA
Rule 63    condicionA -> ELSE bloque
Rule 64    condicionA -> empty
Rule 65    ciclo -> FROM exp TO exp DO bloque
Rule 66    variable -> ID variableA
Rule 67    variableA -> LEFTBRACKET exp RIGHTBRACKET variableB
Rule 68    variableA -> empty
Rule 69    variableB -> LEFTBRACKET exp RIGHTBRACKET
Rule 70    variableB -> empty
Rule 71    exp -> exp1 expA
Rule 72    expA -> OROP exp1 expA
Rule 73    expA -> empty
Rule 74    exp1 -> exp2 exp1A
Rule 75    exp1A -> ANDOP exp2 exp1A
Rule 76    exp1A -> empty
Rule 77    exp2 -> exp3 exp2A
Rule 78    exp2A -> exp2B exp3
Rule 79    exp2A -> empty
Rule 80    exp2B -> LESSTHANOP
Rule 81    exp2B -> GREATERTHANOP
Rule 82    exp2B -> DIFFERENTOP
Rule 83    exp2B -> EQUALOP
Rule 84    exp3 -> termino exp3A
Rule 85    exp3A -> exp3B termino exp3A
Rule 86    exp3A -> empty
Rule 87    exp3B -> SUMOP
Rule 88    exp3B -> SUBOP
Rule 89    termino -> factor terminoA
Rule 90    terminoA -> terminoB factor terminoA
Rule 91    terminoA -> empty
Rule 92    terminoB -> MULOP
Rule 93    terminoB -> DIVOP
Rule 94    factor -> LEFTPAR exp RIGHTPAR
Rule 95    factor -> CTI
Rule 96    factor -> CTF
Rule 97    factor -> variable
Rule 98    factor -> llamada
Rule 99    empty -> <empty>

Terminals, with rules where they appear

ANDOP                : 75
ASSIGNOP             : 52
COMMA                : 22 41 54 60
CTF                  : 96
CTI                  : 16 19 95
CTSTRING             : 59
DIFFERENTOP          : 82
DIVOP                : 93
DO                   : 65
ELSE                 : 63
EQUALOP              : 83
FILE                 : 12
FLOAT                : 39
FROM                 : 65
FUNC                 : 27
GREATERTHANOP        : 81
ID                   : 1 12 13 22 27 40 41 53 56 66
IF                   : 62
INT                  : 38
LEFTBRACKET          : 16 19 67 69
LEFTCURLY            : 43
LEFTPAR              : 27 53 57 62 94
LESSTHANOP           : 80
MAINSTART            : 36
MULOP                : 92
OROP                 : 72
PROGRAM              : 1
READ                 : 56
RIGHTBRACKET         : 16 19 67 69
RIGHTCURLY           : 43
RIGHTPAR             : 27 53 57 62 94
SEMICOLON            : 1 11 27
SUBOP                : 88
SUMOP                : 87
TO                   : 65
VAR                  : 8
VOID                 : 31
WRITE                : 57
error                : 

Nonterminals, with rules where they appear

asignacion           : 46
bloque               : 27 36 62 63 65
bloqueA              : 43 44
ciclo                : 51
condicion            : 50
condicionA           : 62
empty                : 5 7 17 20 23 26 33 35 42 45 55 61 64 68 70 73 76 79 86 91
escritura            : 49
escrituraA           : 57 60
escrituraB           : 57 60
estatuto             : 44
exp                  : 52 53 54 58 62 65 65 67 69 94
exp1                 : 71 72
exp1A                : 74 75
exp2                 : 74 75
exp2A                : 77
exp2B                : 78
exp3                 : 77 78
exp3A                : 84 85
exp3B                : 85
expA                 : 71 72
factor               : 89 90
funcion              : 6
funcionA             : 27
funcionB             : 27
funcionC             : 27
funcionNP1           : 27
funcionNP2           : 27
llamada              : 47 98
llamadaA             : 53 54
main                 : 1
mainNP1              : 36
params               : 32
paramsA              : 40 41
program              : 0
programA             : 1
programB             : 1 6
programNP1           : 1
programNP2           : 1
read                 : 48
termino              : 84 85
terminoA             : 89 90
terminoB             : 90
tipoSimple           : 13 30 40 41
variable             : 52 97
variableA            : 66
variableB            : 67
vars                 : 4 34
varsA                : 8 25
varsB                : 11
varsC                : 13
varsD                : 16
varsE                : 12 22
varsF                : 11
varsNP1              : 8
varsNP2              : 12 13
varsNP3              : 12 13 22
varsNP4              : 16
varsNP5              : 19
varsNP6              : 12 13
varsNP7              : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . programNP1 ID programNP2 SEMICOLON programA programB main
    (2) programNP1 -> .

    ID              reduce using rule 2 (programNP1 -> .)

    programNP1                     shift and go to state 3

state 3

    (1) program -> PROGRAM programNP1 . ID programNP2 SEMICOLON programA programB main

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM programNP1 ID . programNP2 SEMICOLON programA programB main
    (3) programNP2 -> .

    SEMICOLON       reduce using rule 3 (programNP2 -> .)

    programNP2                     shift and go to state 5

state 5

    (1) program -> PROGRAM programNP1 ID programNP2 . SEMICOLON programA programB main

    SEMICOLON       shift and go to state 6


state 6

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON . programA programB main
    (4) programA -> . vars
    (5) programA -> . empty
    (8) vars -> . varsNP1 VAR varsA varsNP7
    (99) empty -> .
    (10) varsNP1 -> .

    FUNC            reduce using rule 99 (empty -> .)
    MAINSTART       reduce using rule 99 (empty -> .)
    VAR             reduce using rule 10 (varsNP1 -> .)

    programA                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9
    varsNP1                        shift and go to state 10

state 7

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA . programB main
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (27) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque
    (99) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 99 (empty -> .)

    programB                       shift and go to state 11
    funcion                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) programA -> vars .

    FUNC            reduce using rule 4 (programA -> vars .)
    MAINSTART       reduce using rule 4 (programA -> vars .)


state 9

    (5) programA -> empty .

    FUNC            reduce using rule 5 (programA -> empty .)
    MAINSTART       reduce using rule 5 (programA -> empty .)


state 10

    (8) vars -> varsNP1 . VAR varsA varsNP7

    VAR             shift and go to state 15


state 11

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB . main
    (36) main -> . MAINSTART mainNP1 bloque

    MAINSTART       shift and go to state 17

    main                           shift and go to state 16

state 12

    (6) programB -> funcion . programB
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (27) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque
    (99) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 99 (empty -> .)

    funcion                        shift and go to state 12
    programB                       shift and go to state 18
    empty                          shift and go to state 13

state 13

    (7) programB -> empty .

    MAINSTART       reduce using rule 7 (programB -> empty .)


state 14

    (27) funcion -> FUNC . funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque
    (30) funcionA -> . tipoSimple
    (31) funcionA -> . VOID
    (38) tipoSimple -> . INT
    (39) tipoSimple -> . FLOAT

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    funcionA                       shift and go to state 19
    tipoSimple                     shift and go to state 20

state 15

    (8) vars -> varsNP1 VAR . varsA varsNP7
    (11) varsA -> . varsB SEMICOLON varsF
    (12) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (13) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (38) tipoSimple -> . INT
    (39) tipoSimple -> . FLOAT

    FILE            shift and go to state 26
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    varsA                          shift and go to state 24
    varsB                          shift and go to state 25
    tipoSimple                     shift and go to state 27

state 16

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .

    $end            reduce using rule 1 (program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .)


state 17

    (36) main -> MAINSTART . mainNP1 bloque
    (37) mainNP1 -> .

    LEFTCURLY       reduce using rule 37 (mainNP1 -> .)

    mainNP1                        shift and go to state 28

state 18

    (6) programB -> funcion programB .

    MAINSTART       reduce using rule 6 (programB -> funcion programB .)


state 19

    (27) funcion -> FUNC funcionA . funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque
    (28) funcionNP1 -> .

    ID              reduce using rule 28 (funcionNP1 -> .)

    funcionNP1                     shift and go to state 29

state 20

    (30) funcionA -> tipoSimple .

    ID              reduce using rule 30 (funcionA -> tipoSimple .)


state 21

    (31) funcionA -> VOID .

    ID              reduce using rule 31 (funcionA -> VOID .)


state 22

    (38) tipoSimple -> INT .

    ID              reduce using rule 38 (tipoSimple -> INT .)


state 23

    (39) tipoSimple -> FLOAT .

    ID              reduce using rule 39 (tipoSimple -> FLOAT .)


state 24

    (8) vars -> varsNP1 VAR varsA . varsNP7
    (9) varsNP7 -> .

    FUNC            reduce using rule 9 (varsNP7 -> .)
    MAINSTART       reduce using rule 9 (varsNP7 -> .)
    LEFTCURLY       reduce using rule 9 (varsNP7 -> .)

    varsNP7                        shift and go to state 30

state 25

    (11) varsA -> varsB . SEMICOLON varsF

    SEMICOLON       shift and go to state 31


state 26

    (12) varsB -> FILE . varsNP2 ID varsNP3 varsNP6 varsE
    (14) varsNP2 -> .

    ID              reduce using rule 14 (varsNP2 -> .)

    varsNP2                        shift and go to state 32

state 27

    (13) varsB -> tipoSimple . varsNP2 ID varsNP3 varsC varsNP6
    (14) varsNP2 -> .

    ID              reduce using rule 14 (varsNP2 -> .)

    varsNP2                        shift and go to state 33

state 28

    (36) main -> MAINSTART mainNP1 . bloque
    (43) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 35

    bloque                         shift and go to state 34

state 29

    (27) funcion -> FUNC funcionA funcionNP1 . ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque

    ID              shift and go to state 36


state 30

    (8) vars -> varsNP1 VAR varsA varsNP7 .

    FUNC            reduce using rule 8 (vars -> varsNP1 VAR varsA varsNP7 .)
    MAINSTART       reduce using rule 8 (vars -> varsNP1 VAR varsA varsNP7 .)
    LEFTCURLY       reduce using rule 8 (vars -> varsNP1 VAR varsA varsNP7 .)


state 31

    (11) varsA -> varsB SEMICOLON . varsF
    (25) varsF -> . varsA
    (26) varsF -> . empty
    (11) varsA -> . varsB SEMICOLON varsF
    (99) empty -> .
    (12) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (13) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (38) tipoSimple -> . INT
    (39) tipoSimple -> . FLOAT

    FUNC            reduce using rule 99 (empty -> .)
    MAINSTART       reduce using rule 99 (empty -> .)
    LEFTCURLY       reduce using rule 99 (empty -> .)
    FILE            shift and go to state 26
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    varsB                          shift and go to state 25
    varsF                          shift and go to state 37
    varsA                          shift and go to state 38
    empty                          shift and go to state 39
    tipoSimple                     shift and go to state 27

state 32

    (12) varsB -> FILE varsNP2 . ID varsNP3 varsNP6 varsE

    ID              shift and go to state 40


state 33

    (13) varsB -> tipoSimple varsNP2 . ID varsNP3 varsC varsNP6

    ID              shift and go to state 41


state 34

    (36) main -> MAINSTART mainNP1 bloque .

    $end            reduce using rule 36 (main -> MAINSTART mainNP1 bloque .)


state 35

    (43) bloque -> LEFTCURLY . bloqueA RIGHTCURLY
    (44) bloqueA -> . estatuto bloqueA
    (45) bloqueA -> . empty
    (46) estatuto -> . asignacion
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . escritura
    (50) estatuto -> . condicion
    (51) estatuto -> . ciclo
    (99) empty -> .
    (52) asignacion -> . variable ASSIGNOP exp
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR
    (56) read -> . READ ID
    (57) escritura -> . WRITE LEFTPAR escrituraA escrituraB RIGHTPAR
    (62) condicion -> . IF LEFTPAR exp RIGHTPAR bloque condicionA
    (65) ciclo -> . FROM exp TO exp DO bloque
    (66) variable -> . ID variableA

    RIGHTCURLY      reduce using rule 99 (empty -> .)
    ID              shift and go to state 52
    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    FROM            shift and go to state 56

    bloqueA                        shift and go to state 42
    estatuto                       shift and go to state 43
    empty                          shift and go to state 44
    asignacion                     shift and go to state 45
    llamada                        shift and go to state 46
    read                           shift and go to state 47
    escritura                      shift and go to state 48
    condicion                      shift and go to state 49
    ciclo                          shift and go to state 50
    variable                       shift and go to state 51

state 36

    (27) funcion -> FUNC funcionA funcionNP1 ID . funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque
    (29) funcionNP2 -> .

    LEFTPAR         reduce using rule 29 (funcionNP2 -> .)

    funcionNP2                     shift and go to state 57

state 37

    (11) varsA -> varsB SEMICOLON varsF .

    FUNC            reduce using rule 11 (varsA -> varsB SEMICOLON varsF .)
    MAINSTART       reduce using rule 11 (varsA -> varsB SEMICOLON varsF .)
    LEFTCURLY       reduce using rule 11 (varsA -> varsB SEMICOLON varsF .)


state 38

    (25) varsF -> varsA .

    FUNC            reduce using rule 25 (varsF -> varsA .)
    MAINSTART       reduce using rule 25 (varsF -> varsA .)
    LEFTCURLY       reduce using rule 25 (varsF -> varsA .)


state 39

    (26) varsF -> empty .

    FUNC            reduce using rule 26 (varsF -> empty .)
    MAINSTART       reduce using rule 26 (varsF -> empty .)
    LEFTCURLY       reduce using rule 26 (varsF -> empty .)


state 40

    (12) varsB -> FILE varsNP2 ID . varsNP3 varsNP6 varsE
    (24) varsNP3 -> .

    COMMA           reduce using rule 24 (varsNP3 -> .)
    SEMICOLON       reduce using rule 24 (varsNP3 -> .)

    varsNP3                        shift and go to state 58

state 41

    (13) varsB -> tipoSimple varsNP2 ID . varsNP3 varsC varsNP6
    (24) varsNP3 -> .

    LEFTBRACKET     reduce using rule 24 (varsNP3 -> .)
    SEMICOLON       reduce using rule 24 (varsNP3 -> .)

    varsNP3                        shift and go to state 59

state 42

    (43) bloque -> LEFTCURLY bloqueA . RIGHTCURLY

    RIGHTCURLY      shift and go to state 60


state 43

    (44) bloqueA -> estatuto . bloqueA
    (44) bloqueA -> . estatuto bloqueA
    (45) bloqueA -> . empty
    (46) estatuto -> . asignacion
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . escritura
    (50) estatuto -> . condicion
    (51) estatuto -> . ciclo
    (99) empty -> .
    (52) asignacion -> . variable ASSIGNOP exp
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR
    (56) read -> . READ ID
    (57) escritura -> . WRITE LEFTPAR escrituraA escrituraB RIGHTPAR
    (62) condicion -> . IF LEFTPAR exp RIGHTPAR bloque condicionA
    (65) ciclo -> . FROM exp TO exp DO bloque
    (66) variable -> . ID variableA

    RIGHTCURLY      reduce using rule 99 (empty -> .)
    ID              shift and go to state 52
    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    FROM            shift and go to state 56

    estatuto                       shift and go to state 43
    bloqueA                        shift and go to state 61
    empty                          shift and go to state 44
    asignacion                     shift and go to state 45
    llamada                        shift and go to state 46
    read                           shift and go to state 47
    escritura                      shift and go to state 48
    condicion                      shift and go to state 49
    ciclo                          shift and go to state 50
    variable                       shift and go to state 51

state 44

    (45) bloqueA -> empty .

    RIGHTCURLY      reduce using rule 45 (bloqueA -> empty .)


state 45

    (46) estatuto -> asignacion .

    ID              reduce using rule 46 (estatuto -> asignacion .)
    READ            reduce using rule 46 (estatuto -> asignacion .)
    WRITE           reduce using rule 46 (estatuto -> asignacion .)
    IF              reduce using rule 46 (estatuto -> asignacion .)
    FROM            reduce using rule 46 (estatuto -> asignacion .)
    RIGHTCURLY      reduce using rule 46 (estatuto -> asignacion .)


state 46

    (47) estatuto -> llamada .

    ID              reduce using rule 47 (estatuto -> llamada .)
    READ            reduce using rule 47 (estatuto -> llamada .)
    WRITE           reduce using rule 47 (estatuto -> llamada .)
    IF              reduce using rule 47 (estatuto -> llamada .)
    FROM            reduce using rule 47 (estatuto -> llamada .)
    RIGHTCURLY      reduce using rule 47 (estatuto -> llamada .)


state 47

    (48) estatuto -> read .

    ID              reduce using rule 48 (estatuto -> read .)
    READ            reduce using rule 48 (estatuto -> read .)
    WRITE           reduce using rule 48 (estatuto -> read .)
    IF              reduce using rule 48 (estatuto -> read .)
    FROM            reduce using rule 48 (estatuto -> read .)
    RIGHTCURLY      reduce using rule 48 (estatuto -> read .)


state 48

    (49) estatuto -> escritura .

    ID              reduce using rule 49 (estatuto -> escritura .)
    READ            reduce using rule 49 (estatuto -> escritura .)
    WRITE           reduce using rule 49 (estatuto -> escritura .)
    IF              reduce using rule 49 (estatuto -> escritura .)
    FROM            reduce using rule 49 (estatuto -> escritura .)
    RIGHTCURLY      reduce using rule 49 (estatuto -> escritura .)


state 49

    (50) estatuto -> condicion .

    ID              reduce using rule 50 (estatuto -> condicion .)
    READ            reduce using rule 50 (estatuto -> condicion .)
    WRITE           reduce using rule 50 (estatuto -> condicion .)
    IF              reduce using rule 50 (estatuto -> condicion .)
    FROM            reduce using rule 50 (estatuto -> condicion .)
    RIGHTCURLY      reduce using rule 50 (estatuto -> condicion .)


state 50

    (51) estatuto -> ciclo .

    ID              reduce using rule 51 (estatuto -> ciclo .)
    READ            reduce using rule 51 (estatuto -> ciclo .)
    WRITE           reduce using rule 51 (estatuto -> ciclo .)
    IF              reduce using rule 51 (estatuto -> ciclo .)
    FROM            reduce using rule 51 (estatuto -> ciclo .)
    RIGHTCURLY      reduce using rule 51 (estatuto -> ciclo .)


state 51

    (52) asignacion -> variable . ASSIGNOP exp

    ASSIGNOP        shift and go to state 62


state 52

    (53) llamada -> ID . LEFTPAR exp llamadaA RIGHTPAR
    (66) variable -> ID . variableA
    (67) variableA -> . LEFTBRACKET exp RIGHTBRACKET variableB
    (68) variableA -> . empty
    (99) empty -> .

    LEFTPAR         shift and go to state 63
    LEFTBRACKET     shift and go to state 65
    ASSIGNOP        reduce using rule 99 (empty -> .)

    variableA                      shift and go to state 64
    empty                          shift and go to state 66

state 53

    (56) read -> READ . ID

    ID              shift and go to state 67


state 54

    (57) escritura -> WRITE . LEFTPAR escrituraA escrituraB RIGHTPAR

    LEFTPAR         shift and go to state 68


state 55

    (62) condicion -> IF . LEFTPAR exp RIGHTPAR bloque condicionA

    LEFTPAR         shift and go to state 69


state 56

    (65) ciclo -> FROM . exp TO exp DO bloque
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 70
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 57

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 . LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque

    LEFTPAR         shift and go to state 82


state 58

    (12) varsB -> FILE varsNP2 ID varsNP3 . varsNP6 varsE
    (15) varsNP6 -> .

    COMMA           reduce using rule 15 (varsNP6 -> .)
    SEMICOLON       reduce using rule 15 (varsNP6 -> .)

    varsNP6                        shift and go to state 83

state 59

    (13) varsB -> tipoSimple varsNP2 ID varsNP3 . varsC varsNP6
    (16) varsC -> . LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD
    (17) varsC -> . empty
    (99) empty -> .

    LEFTBRACKET     shift and go to state 85
    SEMICOLON       reduce using rule 99 (empty -> .)

    varsC                          shift and go to state 84
    empty                          shift and go to state 86

state 60

    (43) bloque -> LEFTCURLY bloqueA RIGHTCURLY .

    $end            reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ELSE            reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ID              reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    READ            reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    WRITE           reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    IF              reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FROM            reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    RIGHTCURLY      reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FUNC            reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    MAINSTART       reduce using rule 43 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)


state 61

    (44) bloqueA -> estatuto bloqueA .

    RIGHTCURLY      reduce using rule 44 (bloqueA -> estatuto bloqueA .)


state 62

    (52) asignacion -> variable ASSIGNOP . exp
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    variable                       shift and go to state 79
    exp                            shift and go to state 87
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    llamada                        shift and go to state 80

state 63

    (53) llamada -> ID LEFTPAR . exp llamadaA RIGHTPAR
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 88
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 64

    (66) variable -> ID variableA .

    ASSIGNOP        reduce using rule 66 (variable -> ID variableA .)
    MULOP           reduce using rule 66 (variable -> ID variableA .)
    DIVOP           reduce using rule 66 (variable -> ID variableA .)
    SUMOP           reduce using rule 66 (variable -> ID variableA .)
    SUBOP           reduce using rule 66 (variable -> ID variableA .)
    LESSTHANOP      reduce using rule 66 (variable -> ID variableA .)
    GREATERTHANOP   reduce using rule 66 (variable -> ID variableA .)
    DIFFERENTOP     reduce using rule 66 (variable -> ID variableA .)
    EQUALOP         reduce using rule 66 (variable -> ID variableA .)
    ANDOP           reduce using rule 66 (variable -> ID variableA .)
    OROP            reduce using rule 66 (variable -> ID variableA .)
    TO              reduce using rule 66 (variable -> ID variableA .)
    ID              reduce using rule 66 (variable -> ID variableA .)
    READ            reduce using rule 66 (variable -> ID variableA .)
    WRITE           reduce using rule 66 (variable -> ID variableA .)
    IF              reduce using rule 66 (variable -> ID variableA .)
    FROM            reduce using rule 66 (variable -> ID variableA .)
    RIGHTCURLY      reduce using rule 66 (variable -> ID variableA .)
    COMMA           reduce using rule 66 (variable -> ID variableA .)
    RIGHTPAR        reduce using rule 66 (variable -> ID variableA .)
    RIGHTBRACKET    reduce using rule 66 (variable -> ID variableA .)
    DO              reduce using rule 66 (variable -> ID variableA .)


state 65

    (67) variableA -> LEFTBRACKET . exp RIGHTBRACKET variableB
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 89
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 66

    (68) variableA -> empty .

    ASSIGNOP        reduce using rule 68 (variableA -> empty .)
    MULOP           reduce using rule 68 (variableA -> empty .)
    DIVOP           reduce using rule 68 (variableA -> empty .)
    SUMOP           reduce using rule 68 (variableA -> empty .)
    SUBOP           reduce using rule 68 (variableA -> empty .)
    LESSTHANOP      reduce using rule 68 (variableA -> empty .)
    GREATERTHANOP   reduce using rule 68 (variableA -> empty .)
    DIFFERENTOP     reduce using rule 68 (variableA -> empty .)
    EQUALOP         reduce using rule 68 (variableA -> empty .)
    ANDOP           reduce using rule 68 (variableA -> empty .)
    OROP            reduce using rule 68 (variableA -> empty .)
    TO              reduce using rule 68 (variableA -> empty .)
    ID              reduce using rule 68 (variableA -> empty .)
    READ            reduce using rule 68 (variableA -> empty .)
    WRITE           reduce using rule 68 (variableA -> empty .)
    IF              reduce using rule 68 (variableA -> empty .)
    FROM            reduce using rule 68 (variableA -> empty .)
    RIGHTCURLY      reduce using rule 68 (variableA -> empty .)
    COMMA           reduce using rule 68 (variableA -> empty .)
    RIGHTPAR        reduce using rule 68 (variableA -> empty .)
    RIGHTBRACKET    reduce using rule 68 (variableA -> empty .)
    DO              reduce using rule 68 (variableA -> empty .)


state 67

    (56) read -> READ ID .

    ID              reduce using rule 56 (read -> READ ID .)
    READ            reduce using rule 56 (read -> READ ID .)
    WRITE           reduce using rule 56 (read -> READ ID .)
    IF              reduce using rule 56 (read -> READ ID .)
    FROM            reduce using rule 56 (read -> READ ID .)
    RIGHTCURLY      reduce using rule 56 (read -> READ ID .)


state 68

    (57) escritura -> WRITE LEFTPAR . escrituraA escrituraB RIGHTPAR
    (58) escrituraA -> . exp
    (59) escrituraA -> . CTSTRING
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    CTSTRING        shift and go to state 92
    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    escrituraA                     shift and go to state 90
    exp                            shift and go to state 91
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 69

    (62) condicion -> IF LEFTPAR . exp RIGHTPAR bloque condicionA
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 93
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 70

    (65) ciclo -> FROM exp . TO exp DO bloque

    TO              shift and go to state 94


state 71

    (71) exp -> exp1 . expA
    (72) expA -> . OROP exp1 expA
    (73) expA -> . empty
    (99) empty -> .

    OROP            shift and go to state 96
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    expA                           shift and go to state 95
    empty                          shift and go to state 97

state 72

    (74) exp1 -> exp2 . exp1A
    (75) exp1A -> . ANDOP exp2 exp1A
    (76) exp1A -> . empty
    (99) empty -> .

    ANDOP           shift and go to state 99
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    exp1A                          shift and go to state 98
    empty                          shift and go to state 100

state 73

    (77) exp2 -> exp3 . exp2A
    (78) exp2A -> . exp2B exp3
    (79) exp2A -> . empty
    (80) exp2B -> . LESSTHANOP
    (81) exp2B -> . GREATERTHANOP
    (82) exp2B -> . DIFFERENTOP
    (83) exp2B -> . EQUALOP
    (99) empty -> .

    LESSTHANOP      shift and go to state 104
    GREATERTHANOP   shift and go to state 105
    DIFFERENTOP     shift and go to state 106
    EQUALOP         shift and go to state 107
    ANDOP           reduce using rule 99 (empty -> .)
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    exp2A                          shift and go to state 101
    exp2B                          shift and go to state 102
    empty                          shift and go to state 103

state 74

    (84) exp3 -> termino . exp3A
    (85) exp3A -> . exp3B termino exp3A
    (86) exp3A -> . empty
    (87) exp3B -> . SUMOP
    (88) exp3B -> . SUBOP
    (99) empty -> .

    SUMOP           shift and go to state 111
    SUBOP           shift and go to state 112
    LESSTHANOP      reduce using rule 99 (empty -> .)
    GREATERTHANOP   reduce using rule 99 (empty -> .)
    DIFFERENTOP     reduce using rule 99 (empty -> .)
    EQUALOP         reduce using rule 99 (empty -> .)
    ANDOP           reduce using rule 99 (empty -> .)
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    exp3A                          shift and go to state 108
    exp3B                          shift and go to state 109
    empty                          shift and go to state 110

state 75

    (89) termino -> factor . terminoA
    (90) terminoA -> . terminoB factor terminoA
    (91) terminoA -> . empty
    (92) terminoB -> . MULOP
    (93) terminoB -> . DIVOP
    (99) empty -> .

    MULOP           shift and go to state 116
    DIVOP           shift and go to state 117
    SUMOP           reduce using rule 99 (empty -> .)
    SUBOP           reduce using rule 99 (empty -> .)
    LESSTHANOP      reduce using rule 99 (empty -> .)
    GREATERTHANOP   reduce using rule 99 (empty -> .)
    DIFFERENTOP     reduce using rule 99 (empty -> .)
    EQUALOP         reduce using rule 99 (empty -> .)
    ANDOP           reduce using rule 99 (empty -> .)
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    terminoA                       shift and go to state 113
    terminoB                       shift and go to state 114
    empty                          shift and go to state 115

state 76

    (94) factor -> LEFTPAR . exp RIGHTPAR
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 118
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 77

    (95) factor -> CTI .

    MULOP           reduce using rule 95 (factor -> CTI .)
    DIVOP           reduce using rule 95 (factor -> CTI .)
    SUMOP           reduce using rule 95 (factor -> CTI .)
    SUBOP           reduce using rule 95 (factor -> CTI .)
    LESSTHANOP      reduce using rule 95 (factor -> CTI .)
    GREATERTHANOP   reduce using rule 95 (factor -> CTI .)
    DIFFERENTOP     reduce using rule 95 (factor -> CTI .)
    EQUALOP         reduce using rule 95 (factor -> CTI .)
    ANDOP           reduce using rule 95 (factor -> CTI .)
    OROP            reduce using rule 95 (factor -> CTI .)
    TO              reduce using rule 95 (factor -> CTI .)
    ID              reduce using rule 95 (factor -> CTI .)
    READ            reduce using rule 95 (factor -> CTI .)
    WRITE           reduce using rule 95 (factor -> CTI .)
    IF              reduce using rule 95 (factor -> CTI .)
    FROM            reduce using rule 95 (factor -> CTI .)
    RIGHTCURLY      reduce using rule 95 (factor -> CTI .)
    COMMA           reduce using rule 95 (factor -> CTI .)
    RIGHTPAR        reduce using rule 95 (factor -> CTI .)
    RIGHTBRACKET    reduce using rule 95 (factor -> CTI .)
    DO              reduce using rule 95 (factor -> CTI .)


state 78

    (96) factor -> CTF .

    MULOP           reduce using rule 96 (factor -> CTF .)
    DIVOP           reduce using rule 96 (factor -> CTF .)
    SUMOP           reduce using rule 96 (factor -> CTF .)
    SUBOP           reduce using rule 96 (factor -> CTF .)
    LESSTHANOP      reduce using rule 96 (factor -> CTF .)
    GREATERTHANOP   reduce using rule 96 (factor -> CTF .)
    DIFFERENTOP     reduce using rule 96 (factor -> CTF .)
    EQUALOP         reduce using rule 96 (factor -> CTF .)
    ANDOP           reduce using rule 96 (factor -> CTF .)
    OROP            reduce using rule 96 (factor -> CTF .)
    TO              reduce using rule 96 (factor -> CTF .)
    ID              reduce using rule 96 (factor -> CTF .)
    READ            reduce using rule 96 (factor -> CTF .)
    WRITE           reduce using rule 96 (factor -> CTF .)
    IF              reduce using rule 96 (factor -> CTF .)
    FROM            reduce using rule 96 (factor -> CTF .)
    RIGHTCURLY      reduce using rule 96 (factor -> CTF .)
    COMMA           reduce using rule 96 (factor -> CTF .)
    RIGHTPAR        reduce using rule 96 (factor -> CTF .)
    RIGHTBRACKET    reduce using rule 96 (factor -> CTF .)
    DO              reduce using rule 96 (factor -> CTF .)


state 79

    (97) factor -> variable .

    MULOP           reduce using rule 97 (factor -> variable .)
    DIVOP           reduce using rule 97 (factor -> variable .)
    SUMOP           reduce using rule 97 (factor -> variable .)
    SUBOP           reduce using rule 97 (factor -> variable .)
    LESSTHANOP      reduce using rule 97 (factor -> variable .)
    GREATERTHANOP   reduce using rule 97 (factor -> variable .)
    DIFFERENTOP     reduce using rule 97 (factor -> variable .)
    EQUALOP         reduce using rule 97 (factor -> variable .)
    ANDOP           reduce using rule 97 (factor -> variable .)
    OROP            reduce using rule 97 (factor -> variable .)
    TO              reduce using rule 97 (factor -> variable .)
    ID              reduce using rule 97 (factor -> variable .)
    READ            reduce using rule 97 (factor -> variable .)
    WRITE           reduce using rule 97 (factor -> variable .)
    IF              reduce using rule 97 (factor -> variable .)
    FROM            reduce using rule 97 (factor -> variable .)
    RIGHTCURLY      reduce using rule 97 (factor -> variable .)
    COMMA           reduce using rule 97 (factor -> variable .)
    RIGHTPAR        reduce using rule 97 (factor -> variable .)
    RIGHTBRACKET    reduce using rule 97 (factor -> variable .)
    DO              reduce using rule 97 (factor -> variable .)


state 80

    (98) factor -> llamada .

    MULOP           reduce using rule 98 (factor -> llamada .)
    DIVOP           reduce using rule 98 (factor -> llamada .)
    SUMOP           reduce using rule 98 (factor -> llamada .)
    SUBOP           reduce using rule 98 (factor -> llamada .)
    LESSTHANOP      reduce using rule 98 (factor -> llamada .)
    GREATERTHANOP   reduce using rule 98 (factor -> llamada .)
    DIFFERENTOP     reduce using rule 98 (factor -> llamada .)
    EQUALOP         reduce using rule 98 (factor -> llamada .)
    ANDOP           reduce using rule 98 (factor -> llamada .)
    OROP            reduce using rule 98 (factor -> llamada .)
    TO              reduce using rule 98 (factor -> llamada .)
    ID              reduce using rule 98 (factor -> llamada .)
    READ            reduce using rule 98 (factor -> llamada .)
    WRITE           reduce using rule 98 (factor -> llamada .)
    IF              reduce using rule 98 (factor -> llamada .)
    FROM            reduce using rule 98 (factor -> llamada .)
    RIGHTCURLY      reduce using rule 98 (factor -> llamada .)
    COMMA           reduce using rule 98 (factor -> llamada .)
    RIGHTPAR        reduce using rule 98 (factor -> llamada .)
    RIGHTBRACKET    reduce using rule 98 (factor -> llamada .)
    DO              reduce using rule 98 (factor -> llamada .)


state 81

    (66) variable -> ID . variableA
    (53) llamada -> ID . LEFTPAR exp llamadaA RIGHTPAR
    (67) variableA -> . LEFTBRACKET exp RIGHTBRACKET variableB
    (68) variableA -> . empty
    (99) empty -> .

    LEFTPAR         shift and go to state 63
    LEFTBRACKET     shift and go to state 65
    MULOP           reduce using rule 99 (empty -> .)
    DIVOP           reduce using rule 99 (empty -> .)
    SUMOP           reduce using rule 99 (empty -> .)
    SUBOP           reduce using rule 99 (empty -> .)
    LESSTHANOP      reduce using rule 99 (empty -> .)
    GREATERTHANOP   reduce using rule 99 (empty -> .)
    DIFFERENTOP     reduce using rule 99 (empty -> .)
    EQUALOP         reduce using rule 99 (empty -> .)
    ANDOP           reduce using rule 99 (empty -> .)
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    variableA                      shift and go to state 64
    empty                          shift and go to state 66

state 82

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR . funcionB RIGHTPAR SEMICOLON funcionC bloque
    (32) funcionB -> . params
    (33) funcionB -> . empty
    (40) params -> . tipoSimple ID paramsA
    (99) empty -> .
    (38) tipoSimple -> . INT
    (39) tipoSimple -> . FLOAT

    RIGHTPAR        reduce using rule 99 (empty -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    funcionB                       shift and go to state 119
    params                         shift and go to state 120
    empty                          shift and go to state 121
    tipoSimple                     shift and go to state 122

state 83

    (12) varsB -> FILE varsNP2 ID varsNP3 varsNP6 . varsE
    (22) varsE -> . COMMA ID varsNP3 varsE
    (23) varsE -> . empty
    (99) empty -> .

    COMMA           shift and go to state 124
    SEMICOLON       reduce using rule 99 (empty -> .)

    varsE                          shift and go to state 123
    empty                          shift and go to state 125

state 84

    (13) varsB -> tipoSimple varsNP2 ID varsNP3 varsC . varsNP6
    (15) varsNP6 -> .

    SEMICOLON       reduce using rule 15 (varsNP6 -> .)

    varsNP6                        shift and go to state 126

state 85

    (16) varsC -> LEFTBRACKET . CTI varsNP4 RIGHTBRACKET varsD

    CTI             shift and go to state 127


state 86

    (17) varsC -> empty .

    SEMICOLON       reduce using rule 17 (varsC -> empty .)


state 87

    (52) asignacion -> variable ASSIGNOP exp .

    ID              reduce using rule 52 (asignacion -> variable ASSIGNOP exp .)
    READ            reduce using rule 52 (asignacion -> variable ASSIGNOP exp .)
    WRITE           reduce using rule 52 (asignacion -> variable ASSIGNOP exp .)
    IF              reduce using rule 52 (asignacion -> variable ASSIGNOP exp .)
    FROM            reduce using rule 52 (asignacion -> variable ASSIGNOP exp .)
    RIGHTCURLY      reduce using rule 52 (asignacion -> variable ASSIGNOP exp .)


state 88

    (53) llamada -> ID LEFTPAR exp . llamadaA RIGHTPAR
    (54) llamadaA -> . COMMA exp llamadaA
    (55) llamadaA -> . empty
    (99) empty -> .

    COMMA           shift and go to state 129
    RIGHTPAR        reduce using rule 99 (empty -> .)

    llamadaA                       shift and go to state 128
    empty                          shift and go to state 130

state 89

    (67) variableA -> LEFTBRACKET exp . RIGHTBRACKET variableB

    RIGHTBRACKET    shift and go to state 131


state 90

    (57) escritura -> WRITE LEFTPAR escrituraA . escrituraB RIGHTPAR
    (60) escrituraB -> . COMMA escrituraA escrituraB
    (61) escrituraB -> . empty
    (99) empty -> .

    COMMA           shift and go to state 133
    RIGHTPAR        reduce using rule 99 (empty -> .)

    escrituraB                     shift and go to state 132
    empty                          shift and go to state 134

state 91

    (58) escrituraA -> exp .

    COMMA           reduce using rule 58 (escrituraA -> exp .)
    RIGHTPAR        reduce using rule 58 (escrituraA -> exp .)


state 92

    (59) escrituraA -> CTSTRING .

    COMMA           reduce using rule 59 (escrituraA -> CTSTRING .)
    RIGHTPAR        reduce using rule 59 (escrituraA -> CTSTRING .)


state 93

    (62) condicion -> IF LEFTPAR exp . RIGHTPAR bloque condicionA

    RIGHTPAR        shift and go to state 135


state 94

    (65) ciclo -> FROM exp TO . exp DO bloque
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 136
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 95

    (71) exp -> exp1 expA .

    TO              reduce using rule 71 (exp -> exp1 expA .)
    ID              reduce using rule 71 (exp -> exp1 expA .)
    READ            reduce using rule 71 (exp -> exp1 expA .)
    WRITE           reduce using rule 71 (exp -> exp1 expA .)
    IF              reduce using rule 71 (exp -> exp1 expA .)
    FROM            reduce using rule 71 (exp -> exp1 expA .)
    RIGHTCURLY      reduce using rule 71 (exp -> exp1 expA .)
    COMMA           reduce using rule 71 (exp -> exp1 expA .)
    RIGHTPAR        reduce using rule 71 (exp -> exp1 expA .)
    RIGHTBRACKET    reduce using rule 71 (exp -> exp1 expA .)
    DO              reduce using rule 71 (exp -> exp1 expA .)


state 96

    (72) expA -> OROP . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp1                           shift and go to state 137
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 97

    (73) expA -> empty .

    TO              reduce using rule 73 (expA -> empty .)
    ID              reduce using rule 73 (expA -> empty .)
    READ            reduce using rule 73 (expA -> empty .)
    WRITE           reduce using rule 73 (expA -> empty .)
    IF              reduce using rule 73 (expA -> empty .)
    FROM            reduce using rule 73 (expA -> empty .)
    RIGHTCURLY      reduce using rule 73 (expA -> empty .)
    COMMA           reduce using rule 73 (expA -> empty .)
    RIGHTPAR        reduce using rule 73 (expA -> empty .)
    RIGHTBRACKET    reduce using rule 73 (expA -> empty .)
    DO              reduce using rule 73 (expA -> empty .)


state 98

    (74) exp1 -> exp2 exp1A .

    OROP            reduce using rule 74 (exp1 -> exp2 exp1A .)
    TO              reduce using rule 74 (exp1 -> exp2 exp1A .)
    ID              reduce using rule 74 (exp1 -> exp2 exp1A .)
    READ            reduce using rule 74 (exp1 -> exp2 exp1A .)
    WRITE           reduce using rule 74 (exp1 -> exp2 exp1A .)
    IF              reduce using rule 74 (exp1 -> exp2 exp1A .)
    FROM            reduce using rule 74 (exp1 -> exp2 exp1A .)
    RIGHTCURLY      reduce using rule 74 (exp1 -> exp2 exp1A .)
    COMMA           reduce using rule 74 (exp1 -> exp2 exp1A .)
    RIGHTPAR        reduce using rule 74 (exp1 -> exp2 exp1A .)
    RIGHTBRACKET    reduce using rule 74 (exp1 -> exp2 exp1A .)
    DO              reduce using rule 74 (exp1 -> exp2 exp1A .)


state 99

    (75) exp1A -> ANDOP . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp2                           shift and go to state 138
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 100

    (76) exp1A -> empty .

    OROP            reduce using rule 76 (exp1A -> empty .)
    TO              reduce using rule 76 (exp1A -> empty .)
    ID              reduce using rule 76 (exp1A -> empty .)
    READ            reduce using rule 76 (exp1A -> empty .)
    WRITE           reduce using rule 76 (exp1A -> empty .)
    IF              reduce using rule 76 (exp1A -> empty .)
    FROM            reduce using rule 76 (exp1A -> empty .)
    RIGHTCURLY      reduce using rule 76 (exp1A -> empty .)
    COMMA           reduce using rule 76 (exp1A -> empty .)
    RIGHTPAR        reduce using rule 76 (exp1A -> empty .)
    RIGHTBRACKET    reduce using rule 76 (exp1A -> empty .)
    DO              reduce using rule 76 (exp1A -> empty .)


state 101

    (77) exp2 -> exp3 exp2A .

    ANDOP           reduce using rule 77 (exp2 -> exp3 exp2A .)
    OROP            reduce using rule 77 (exp2 -> exp3 exp2A .)
    TO              reduce using rule 77 (exp2 -> exp3 exp2A .)
    ID              reduce using rule 77 (exp2 -> exp3 exp2A .)
    READ            reduce using rule 77 (exp2 -> exp3 exp2A .)
    WRITE           reduce using rule 77 (exp2 -> exp3 exp2A .)
    IF              reduce using rule 77 (exp2 -> exp3 exp2A .)
    FROM            reduce using rule 77 (exp2 -> exp3 exp2A .)
    RIGHTCURLY      reduce using rule 77 (exp2 -> exp3 exp2A .)
    COMMA           reduce using rule 77 (exp2 -> exp3 exp2A .)
    RIGHTPAR        reduce using rule 77 (exp2 -> exp3 exp2A .)
    RIGHTBRACKET    reduce using rule 77 (exp2 -> exp3 exp2A .)
    DO              reduce using rule 77 (exp2 -> exp3 exp2A .)


state 102

    (78) exp2A -> exp2B . exp3
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp3                           shift and go to state 139
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 103

    (79) exp2A -> empty .

    ANDOP           reduce using rule 79 (exp2A -> empty .)
    OROP            reduce using rule 79 (exp2A -> empty .)
    TO              reduce using rule 79 (exp2A -> empty .)
    ID              reduce using rule 79 (exp2A -> empty .)
    READ            reduce using rule 79 (exp2A -> empty .)
    WRITE           reduce using rule 79 (exp2A -> empty .)
    IF              reduce using rule 79 (exp2A -> empty .)
    FROM            reduce using rule 79 (exp2A -> empty .)
    RIGHTCURLY      reduce using rule 79 (exp2A -> empty .)
    COMMA           reduce using rule 79 (exp2A -> empty .)
    RIGHTPAR        reduce using rule 79 (exp2A -> empty .)
    RIGHTBRACKET    reduce using rule 79 (exp2A -> empty .)
    DO              reduce using rule 79 (exp2A -> empty .)


state 104

    (80) exp2B -> LESSTHANOP .

    LEFTPAR         reduce using rule 80 (exp2B -> LESSTHANOP .)
    CTI             reduce using rule 80 (exp2B -> LESSTHANOP .)
    CTF             reduce using rule 80 (exp2B -> LESSTHANOP .)
    ID              reduce using rule 80 (exp2B -> LESSTHANOP .)


state 105

    (81) exp2B -> GREATERTHANOP .

    LEFTPAR         reduce using rule 81 (exp2B -> GREATERTHANOP .)
    CTI             reduce using rule 81 (exp2B -> GREATERTHANOP .)
    CTF             reduce using rule 81 (exp2B -> GREATERTHANOP .)
    ID              reduce using rule 81 (exp2B -> GREATERTHANOP .)


state 106

    (82) exp2B -> DIFFERENTOP .

    LEFTPAR         reduce using rule 82 (exp2B -> DIFFERENTOP .)
    CTI             reduce using rule 82 (exp2B -> DIFFERENTOP .)
    CTF             reduce using rule 82 (exp2B -> DIFFERENTOP .)
    ID              reduce using rule 82 (exp2B -> DIFFERENTOP .)


state 107

    (83) exp2B -> EQUALOP .

    LEFTPAR         reduce using rule 83 (exp2B -> EQUALOP .)
    CTI             reduce using rule 83 (exp2B -> EQUALOP .)
    CTF             reduce using rule 83 (exp2B -> EQUALOP .)
    ID              reduce using rule 83 (exp2B -> EQUALOP .)


state 108

    (84) exp3 -> termino exp3A .

    LESSTHANOP      reduce using rule 84 (exp3 -> termino exp3A .)
    GREATERTHANOP   reduce using rule 84 (exp3 -> termino exp3A .)
    DIFFERENTOP     reduce using rule 84 (exp3 -> termino exp3A .)
    EQUALOP         reduce using rule 84 (exp3 -> termino exp3A .)
    ANDOP           reduce using rule 84 (exp3 -> termino exp3A .)
    OROP            reduce using rule 84 (exp3 -> termino exp3A .)
    TO              reduce using rule 84 (exp3 -> termino exp3A .)
    ID              reduce using rule 84 (exp3 -> termino exp3A .)
    READ            reduce using rule 84 (exp3 -> termino exp3A .)
    WRITE           reduce using rule 84 (exp3 -> termino exp3A .)
    IF              reduce using rule 84 (exp3 -> termino exp3A .)
    FROM            reduce using rule 84 (exp3 -> termino exp3A .)
    RIGHTCURLY      reduce using rule 84 (exp3 -> termino exp3A .)
    COMMA           reduce using rule 84 (exp3 -> termino exp3A .)
    RIGHTPAR        reduce using rule 84 (exp3 -> termino exp3A .)
    RIGHTBRACKET    reduce using rule 84 (exp3 -> termino exp3A .)
    DO              reduce using rule 84 (exp3 -> termino exp3A .)


state 109

    (85) exp3A -> exp3B . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    termino                        shift and go to state 140
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 110

    (86) exp3A -> empty .

    LESSTHANOP      reduce using rule 86 (exp3A -> empty .)
    GREATERTHANOP   reduce using rule 86 (exp3A -> empty .)
    DIFFERENTOP     reduce using rule 86 (exp3A -> empty .)
    EQUALOP         reduce using rule 86 (exp3A -> empty .)
    ANDOP           reduce using rule 86 (exp3A -> empty .)
    OROP            reduce using rule 86 (exp3A -> empty .)
    TO              reduce using rule 86 (exp3A -> empty .)
    ID              reduce using rule 86 (exp3A -> empty .)
    READ            reduce using rule 86 (exp3A -> empty .)
    WRITE           reduce using rule 86 (exp3A -> empty .)
    IF              reduce using rule 86 (exp3A -> empty .)
    FROM            reduce using rule 86 (exp3A -> empty .)
    RIGHTCURLY      reduce using rule 86 (exp3A -> empty .)
    COMMA           reduce using rule 86 (exp3A -> empty .)
    RIGHTPAR        reduce using rule 86 (exp3A -> empty .)
    RIGHTBRACKET    reduce using rule 86 (exp3A -> empty .)
    DO              reduce using rule 86 (exp3A -> empty .)


state 111

    (87) exp3B -> SUMOP .

    LEFTPAR         reduce using rule 87 (exp3B -> SUMOP .)
    CTI             reduce using rule 87 (exp3B -> SUMOP .)
    CTF             reduce using rule 87 (exp3B -> SUMOP .)
    ID              reduce using rule 87 (exp3B -> SUMOP .)


state 112

    (88) exp3B -> SUBOP .

    LEFTPAR         reduce using rule 88 (exp3B -> SUBOP .)
    CTI             reduce using rule 88 (exp3B -> SUBOP .)
    CTF             reduce using rule 88 (exp3B -> SUBOP .)
    ID              reduce using rule 88 (exp3B -> SUBOP .)


state 113

    (89) termino -> factor terminoA .

    SUMOP           reduce using rule 89 (termino -> factor terminoA .)
    SUBOP           reduce using rule 89 (termino -> factor terminoA .)
    LESSTHANOP      reduce using rule 89 (termino -> factor terminoA .)
    GREATERTHANOP   reduce using rule 89 (termino -> factor terminoA .)
    DIFFERENTOP     reduce using rule 89 (termino -> factor terminoA .)
    EQUALOP         reduce using rule 89 (termino -> factor terminoA .)
    ANDOP           reduce using rule 89 (termino -> factor terminoA .)
    OROP            reduce using rule 89 (termino -> factor terminoA .)
    TO              reduce using rule 89 (termino -> factor terminoA .)
    ID              reduce using rule 89 (termino -> factor terminoA .)
    READ            reduce using rule 89 (termino -> factor terminoA .)
    WRITE           reduce using rule 89 (termino -> factor terminoA .)
    IF              reduce using rule 89 (termino -> factor terminoA .)
    FROM            reduce using rule 89 (termino -> factor terminoA .)
    RIGHTCURLY      reduce using rule 89 (termino -> factor terminoA .)
    COMMA           reduce using rule 89 (termino -> factor terminoA .)
    RIGHTPAR        reduce using rule 89 (termino -> factor terminoA .)
    RIGHTBRACKET    reduce using rule 89 (termino -> factor terminoA .)
    DO              reduce using rule 89 (termino -> factor terminoA .)


state 114

    (90) terminoA -> terminoB . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    factor                         shift and go to state 141
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 115

    (91) terminoA -> empty .

    SUMOP           reduce using rule 91 (terminoA -> empty .)
    SUBOP           reduce using rule 91 (terminoA -> empty .)
    LESSTHANOP      reduce using rule 91 (terminoA -> empty .)
    GREATERTHANOP   reduce using rule 91 (terminoA -> empty .)
    DIFFERENTOP     reduce using rule 91 (terminoA -> empty .)
    EQUALOP         reduce using rule 91 (terminoA -> empty .)
    ANDOP           reduce using rule 91 (terminoA -> empty .)
    OROP            reduce using rule 91 (terminoA -> empty .)
    TO              reduce using rule 91 (terminoA -> empty .)
    ID              reduce using rule 91 (terminoA -> empty .)
    READ            reduce using rule 91 (terminoA -> empty .)
    WRITE           reduce using rule 91 (terminoA -> empty .)
    IF              reduce using rule 91 (terminoA -> empty .)
    FROM            reduce using rule 91 (terminoA -> empty .)
    RIGHTCURLY      reduce using rule 91 (terminoA -> empty .)
    COMMA           reduce using rule 91 (terminoA -> empty .)
    RIGHTPAR        reduce using rule 91 (terminoA -> empty .)
    RIGHTBRACKET    reduce using rule 91 (terminoA -> empty .)
    DO              reduce using rule 91 (terminoA -> empty .)


state 116

    (92) terminoB -> MULOP .

    LEFTPAR         reduce using rule 92 (terminoB -> MULOP .)
    CTI             reduce using rule 92 (terminoB -> MULOP .)
    CTF             reduce using rule 92 (terminoB -> MULOP .)
    ID              reduce using rule 92 (terminoB -> MULOP .)


state 117

    (93) terminoB -> DIVOP .

    LEFTPAR         reduce using rule 93 (terminoB -> DIVOP .)
    CTI             reduce using rule 93 (terminoB -> DIVOP .)
    CTF             reduce using rule 93 (terminoB -> DIVOP .)
    ID              reduce using rule 93 (terminoB -> DIVOP .)


state 118

    (94) factor -> LEFTPAR exp . RIGHTPAR

    RIGHTPAR        shift and go to state 142


state 119

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB . RIGHTPAR SEMICOLON funcionC bloque

    RIGHTPAR        shift and go to state 143


state 120

    (32) funcionB -> params .

    RIGHTPAR        reduce using rule 32 (funcionB -> params .)


state 121

    (33) funcionB -> empty .

    RIGHTPAR        reduce using rule 33 (funcionB -> empty .)


state 122

    (40) params -> tipoSimple . ID paramsA

    ID              shift and go to state 144


state 123

    (12) varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .

    SEMICOLON       reduce using rule 12 (varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .)


state 124

    (22) varsE -> COMMA . ID varsNP3 varsE

    ID              shift and go to state 145


state 125

    (23) varsE -> empty .

    SEMICOLON       reduce using rule 23 (varsE -> empty .)


state 126

    (13) varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .

    SEMICOLON       reduce using rule 13 (varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .)


state 127

    (16) varsC -> LEFTBRACKET CTI . varsNP4 RIGHTBRACKET varsD
    (18) varsNP4 -> .

    RIGHTBRACKET    reduce using rule 18 (varsNP4 -> .)

    varsNP4                        shift and go to state 146

state 128

    (53) llamada -> ID LEFTPAR exp llamadaA . RIGHTPAR

    RIGHTPAR        shift and go to state 147


state 129

    (54) llamadaA -> COMMA . exp llamadaA
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 148
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 130

    (55) llamadaA -> empty .

    RIGHTPAR        reduce using rule 55 (llamadaA -> empty .)


state 131

    (67) variableA -> LEFTBRACKET exp RIGHTBRACKET . variableB
    (69) variableB -> . LEFTBRACKET exp RIGHTBRACKET
    (70) variableB -> . empty
    (99) empty -> .

    LEFTBRACKET     shift and go to state 149
    ASSIGNOP        reduce using rule 99 (empty -> .)
    MULOP           reduce using rule 99 (empty -> .)
    DIVOP           reduce using rule 99 (empty -> .)
    SUMOP           reduce using rule 99 (empty -> .)
    SUBOP           reduce using rule 99 (empty -> .)
    LESSTHANOP      reduce using rule 99 (empty -> .)
    GREATERTHANOP   reduce using rule 99 (empty -> .)
    DIFFERENTOP     reduce using rule 99 (empty -> .)
    EQUALOP         reduce using rule 99 (empty -> .)
    ANDOP           reduce using rule 99 (empty -> .)
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    variableB                      shift and go to state 150
    empty                          shift and go to state 151

state 132

    (57) escritura -> WRITE LEFTPAR escrituraA escrituraB . RIGHTPAR

    RIGHTPAR        shift and go to state 152


state 133

    (60) escrituraB -> COMMA . escrituraA escrituraB
    (58) escrituraA -> . exp
    (59) escrituraA -> . CTSTRING
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    CTSTRING        shift and go to state 92
    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    escrituraA                     shift and go to state 153
    exp                            shift and go to state 91
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 134

    (61) escrituraB -> empty .

    RIGHTPAR        reduce using rule 61 (escrituraB -> empty .)


state 135

    (62) condicion -> IF LEFTPAR exp RIGHTPAR . bloque condicionA
    (43) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 35

    bloque                         shift and go to state 154

state 136

    (65) ciclo -> FROM exp TO exp . DO bloque

    DO              shift and go to state 155


state 137

    (72) expA -> OROP exp1 . expA
    (72) expA -> . OROP exp1 expA
    (73) expA -> . empty
    (99) empty -> .

    OROP            shift and go to state 96
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    expA                           shift and go to state 156
    empty                          shift and go to state 97

state 138

    (75) exp1A -> ANDOP exp2 . exp1A
    (75) exp1A -> . ANDOP exp2 exp1A
    (76) exp1A -> . empty
    (99) empty -> .

    ANDOP           shift and go to state 99
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    exp1A                          shift and go to state 157
    empty                          shift and go to state 100

state 139

    (78) exp2A -> exp2B exp3 .

    ANDOP           reduce using rule 78 (exp2A -> exp2B exp3 .)
    OROP            reduce using rule 78 (exp2A -> exp2B exp3 .)
    TO              reduce using rule 78 (exp2A -> exp2B exp3 .)
    ID              reduce using rule 78 (exp2A -> exp2B exp3 .)
    READ            reduce using rule 78 (exp2A -> exp2B exp3 .)
    WRITE           reduce using rule 78 (exp2A -> exp2B exp3 .)
    IF              reduce using rule 78 (exp2A -> exp2B exp3 .)
    FROM            reduce using rule 78 (exp2A -> exp2B exp3 .)
    RIGHTCURLY      reduce using rule 78 (exp2A -> exp2B exp3 .)
    COMMA           reduce using rule 78 (exp2A -> exp2B exp3 .)
    RIGHTPAR        reduce using rule 78 (exp2A -> exp2B exp3 .)
    RIGHTBRACKET    reduce using rule 78 (exp2A -> exp2B exp3 .)
    DO              reduce using rule 78 (exp2A -> exp2B exp3 .)


state 140

    (85) exp3A -> exp3B termino . exp3A
    (85) exp3A -> . exp3B termino exp3A
    (86) exp3A -> . empty
    (87) exp3B -> . SUMOP
    (88) exp3B -> . SUBOP
    (99) empty -> .

    SUMOP           shift and go to state 111
    SUBOP           shift and go to state 112
    LESSTHANOP      reduce using rule 99 (empty -> .)
    GREATERTHANOP   reduce using rule 99 (empty -> .)
    DIFFERENTOP     reduce using rule 99 (empty -> .)
    EQUALOP         reduce using rule 99 (empty -> .)
    ANDOP           reduce using rule 99 (empty -> .)
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    exp3B                          shift and go to state 109
    exp3A                          shift and go to state 158
    empty                          shift and go to state 110

state 141

    (90) terminoA -> terminoB factor . terminoA
    (90) terminoA -> . terminoB factor terminoA
    (91) terminoA -> . empty
    (92) terminoB -> . MULOP
    (93) terminoB -> . DIVOP
    (99) empty -> .

    MULOP           shift and go to state 116
    DIVOP           shift and go to state 117
    SUMOP           reduce using rule 99 (empty -> .)
    SUBOP           reduce using rule 99 (empty -> .)
    LESSTHANOP      reduce using rule 99 (empty -> .)
    GREATERTHANOP   reduce using rule 99 (empty -> .)
    DIFFERENTOP     reduce using rule 99 (empty -> .)
    EQUALOP         reduce using rule 99 (empty -> .)
    ANDOP           reduce using rule 99 (empty -> .)
    OROP            reduce using rule 99 (empty -> .)
    TO              reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    RIGHTPAR        reduce using rule 99 (empty -> .)
    RIGHTBRACKET    reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)

    terminoB                       shift and go to state 114
    terminoA                       shift and go to state 159
    empty                          shift and go to state 115

state 142

    (94) factor -> LEFTPAR exp RIGHTPAR .

    MULOP           reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    DIVOP           reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    SUMOP           reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    SUBOP           reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    LESSTHANOP      reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    GREATERTHANOP   reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    DIFFERENTOP     reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    EQUALOP         reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    ANDOP           reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    OROP            reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    TO              reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    ID              reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    READ            reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    WRITE           reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    IF              reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    FROM            reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    RIGHTCURLY      reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    COMMA           reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    RIGHTPAR        reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)
    DO              reduce using rule 94 (factor -> LEFTPAR exp RIGHTPAR .)


state 143

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR . SEMICOLON funcionC bloque

    SEMICOLON       shift and go to state 160


state 144

    (40) params -> tipoSimple ID . paramsA
    (41) paramsA -> . COMMA tipoSimple ID paramsA
    (42) paramsA -> . empty
    (99) empty -> .

    COMMA           shift and go to state 162
    RIGHTPAR        reduce using rule 99 (empty -> .)

    paramsA                        shift and go to state 161
    empty                          shift and go to state 163

state 145

    (22) varsE -> COMMA ID . varsNP3 varsE
    (24) varsNP3 -> .

    COMMA           reduce using rule 24 (varsNP3 -> .)
    SEMICOLON       reduce using rule 24 (varsNP3 -> .)

    varsNP3                        shift and go to state 164

state 146

    (16) varsC -> LEFTBRACKET CTI varsNP4 . RIGHTBRACKET varsD

    RIGHTBRACKET    shift and go to state 165


state 147

    (53) llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .

    ID              reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    READ            reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    WRITE           reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    IF              reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    FROM            reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    RIGHTCURLY      reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    MULOP           reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    DIVOP           reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    SUMOP           reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    SUBOP           reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    LESSTHANOP      reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    GREATERTHANOP   reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    DIFFERENTOP     reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    EQUALOP         reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    ANDOP           reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    OROP            reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    TO              reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    COMMA           reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    RIGHTPAR        reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)
    DO              reduce using rule 53 (llamada -> ID LEFTPAR exp llamadaA RIGHTPAR .)


state 148

    (54) llamadaA -> COMMA exp . llamadaA
    (54) llamadaA -> . COMMA exp llamadaA
    (55) llamadaA -> . empty
    (99) empty -> .

    COMMA           shift and go to state 129
    RIGHTPAR        reduce using rule 99 (empty -> .)

    llamadaA                       shift and go to state 166
    empty                          shift and go to state 130

state 149

    (69) variableB -> LEFTBRACKET . exp RIGHTBRACKET
    (71) exp -> . exp1 expA
    (74) exp1 -> . exp2 exp1A
    (77) exp2 -> . exp3 exp2A
    (84) exp3 -> . termino exp3A
    (89) termino -> . factor terminoA
    (94) factor -> . LEFTPAR exp RIGHTPAR
    (95) factor -> . CTI
    (96) factor -> . CTF
    (97) factor -> . variable
    (98) factor -> . llamada
    (66) variable -> . ID variableA
    (53) llamada -> . ID LEFTPAR exp llamadaA RIGHTPAR

    LEFTPAR         shift and go to state 76
    CTI             shift and go to state 77
    CTF             shift and go to state 78
    ID              shift and go to state 81

    exp                            shift and go to state 167
    exp1                           shift and go to state 71
    exp2                           shift and go to state 72
    exp3                           shift and go to state 73
    termino                        shift and go to state 74
    factor                         shift and go to state 75
    variable                       shift and go to state 79
    llamada                        shift and go to state 80

state 150

    (67) variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .

    ASSIGNOP        reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    MULOP           reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DIVOP           reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    SUMOP           reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    SUBOP           reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    LESSTHANOP      reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    GREATERTHANOP   reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DIFFERENTOP     reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    EQUALOP         reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    ANDOP           reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    OROP            reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    TO              reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    ID              reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    READ            reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    WRITE           reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    IF              reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    FROM            reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTCURLY      reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    COMMA           reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTPAR        reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTBRACKET    reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DO              reduce using rule 67 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)


state 151

    (70) variableB -> empty .

    ASSIGNOP        reduce using rule 70 (variableB -> empty .)
    MULOP           reduce using rule 70 (variableB -> empty .)
    DIVOP           reduce using rule 70 (variableB -> empty .)
    SUMOP           reduce using rule 70 (variableB -> empty .)
    SUBOP           reduce using rule 70 (variableB -> empty .)
    LESSTHANOP      reduce using rule 70 (variableB -> empty .)
    GREATERTHANOP   reduce using rule 70 (variableB -> empty .)
    DIFFERENTOP     reduce using rule 70 (variableB -> empty .)
    EQUALOP         reduce using rule 70 (variableB -> empty .)
    ANDOP           reduce using rule 70 (variableB -> empty .)
    OROP            reduce using rule 70 (variableB -> empty .)
    TO              reduce using rule 70 (variableB -> empty .)
    ID              reduce using rule 70 (variableB -> empty .)
    READ            reduce using rule 70 (variableB -> empty .)
    WRITE           reduce using rule 70 (variableB -> empty .)
    IF              reduce using rule 70 (variableB -> empty .)
    FROM            reduce using rule 70 (variableB -> empty .)
    RIGHTCURLY      reduce using rule 70 (variableB -> empty .)
    COMMA           reduce using rule 70 (variableB -> empty .)
    RIGHTPAR        reduce using rule 70 (variableB -> empty .)
    RIGHTBRACKET    reduce using rule 70 (variableB -> empty .)
    DO              reduce using rule 70 (variableB -> empty .)


state 152

    (57) escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR .

    ID              reduce using rule 57 (escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR .)
    READ            reduce using rule 57 (escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR .)
    WRITE           reduce using rule 57 (escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR .)
    IF              reduce using rule 57 (escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR .)
    FROM            reduce using rule 57 (escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR .)
    RIGHTCURLY      reduce using rule 57 (escritura -> WRITE LEFTPAR escrituraA escrituraB RIGHTPAR .)


state 153

    (60) escrituraB -> COMMA escrituraA . escrituraB
    (60) escrituraB -> . COMMA escrituraA escrituraB
    (61) escrituraB -> . empty
    (99) empty -> .

    COMMA           shift and go to state 133
    RIGHTPAR        reduce using rule 99 (empty -> .)

    escrituraB                     shift and go to state 168
    empty                          shift and go to state 134

state 154

    (62) condicion -> IF LEFTPAR exp RIGHTPAR bloque . condicionA
    (63) condicionA -> . ELSE bloque
    (64) condicionA -> . empty
    (99) empty -> .

    ELSE            shift and go to state 170
    ID              reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    FROM            reduce using rule 99 (empty -> .)
    RIGHTCURLY      reduce using rule 99 (empty -> .)

    condicionA                     shift and go to state 169
    empty                          shift and go to state 171

state 155

    (65) ciclo -> FROM exp TO exp DO . bloque
    (43) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 35

    bloque                         shift and go to state 172

state 156

    (72) expA -> OROP exp1 expA .

    TO              reduce using rule 72 (expA -> OROP exp1 expA .)
    ID              reduce using rule 72 (expA -> OROP exp1 expA .)
    READ            reduce using rule 72 (expA -> OROP exp1 expA .)
    WRITE           reduce using rule 72 (expA -> OROP exp1 expA .)
    IF              reduce using rule 72 (expA -> OROP exp1 expA .)
    FROM            reduce using rule 72 (expA -> OROP exp1 expA .)
    RIGHTCURLY      reduce using rule 72 (expA -> OROP exp1 expA .)
    COMMA           reduce using rule 72 (expA -> OROP exp1 expA .)
    RIGHTPAR        reduce using rule 72 (expA -> OROP exp1 expA .)
    RIGHTBRACKET    reduce using rule 72 (expA -> OROP exp1 expA .)
    DO              reduce using rule 72 (expA -> OROP exp1 expA .)


state 157

    (75) exp1A -> ANDOP exp2 exp1A .

    OROP            reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    TO              reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    ID              reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    READ            reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    WRITE           reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    IF              reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    FROM            reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    RIGHTCURLY      reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    COMMA           reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    RIGHTPAR        reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    RIGHTBRACKET    reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)
    DO              reduce using rule 75 (exp1A -> ANDOP exp2 exp1A .)


state 158

    (85) exp3A -> exp3B termino exp3A .

    LESSTHANOP      reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    GREATERTHANOP   reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    DIFFERENTOP     reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    EQUALOP         reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    ANDOP           reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    OROP            reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    TO              reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    ID              reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    READ            reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    WRITE           reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    IF              reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    FROM            reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    RIGHTCURLY      reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    COMMA           reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    RIGHTPAR        reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    RIGHTBRACKET    reduce using rule 85 (exp3A -> exp3B termino exp3A .)
    DO              reduce using rule 85 (exp3A -> exp3B termino exp3A .)


state 159

    (90) terminoA -> terminoB factor terminoA .

    SUMOP           reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    SUBOP           reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    LESSTHANOP      reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    GREATERTHANOP   reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    DIFFERENTOP     reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    EQUALOP         reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    ANDOP           reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    OROP            reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    TO              reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    ID              reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    READ            reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    WRITE           reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    IF              reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    FROM            reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    RIGHTCURLY      reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    COMMA           reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    RIGHTPAR        reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    RIGHTBRACKET    reduce using rule 90 (terminoA -> terminoB factor terminoA .)
    DO              reduce using rule 90 (terminoA -> terminoB factor terminoA .)


state 160

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON . funcionC bloque
    (34) funcionC -> . vars
    (35) funcionC -> . empty
    (8) vars -> . varsNP1 VAR varsA varsNP7
    (99) empty -> .
    (10) varsNP1 -> .

    LEFTCURLY       reduce using rule 99 (empty -> .)
    VAR             reduce using rule 10 (varsNP1 -> .)

    funcionC                       shift and go to state 173
    vars                           shift and go to state 174
    empty                          shift and go to state 175
    varsNP1                        shift and go to state 10

state 161

    (40) params -> tipoSimple ID paramsA .

    RIGHTPAR        reduce using rule 40 (params -> tipoSimple ID paramsA .)


state 162

    (41) paramsA -> COMMA . tipoSimple ID paramsA
    (38) tipoSimple -> . INT
    (39) tipoSimple -> . FLOAT

    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    tipoSimple                     shift and go to state 176

state 163

    (42) paramsA -> empty .

    RIGHTPAR        reduce using rule 42 (paramsA -> empty .)


state 164

    (22) varsE -> COMMA ID varsNP3 . varsE
    (22) varsE -> . COMMA ID varsNP3 varsE
    (23) varsE -> . empty
    (99) empty -> .

    COMMA           shift and go to state 124
    SEMICOLON       reduce using rule 99 (empty -> .)

    varsE                          shift and go to state 177
    empty                          shift and go to state 125

state 165

    (16) varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET . varsD
    (19) varsD -> . LEFTBRACKET CTI varsNP5 RIGHTBRACKET
    (20) varsD -> . empty
    (99) empty -> .

    LEFTBRACKET     shift and go to state 178
    SEMICOLON       reduce using rule 99 (empty -> .)

    varsD                          shift and go to state 179
    empty                          shift and go to state 180

state 166

    (54) llamadaA -> COMMA exp llamadaA .

    RIGHTPAR        reduce using rule 54 (llamadaA -> COMMA exp llamadaA .)


state 167

    (69) variableB -> LEFTBRACKET exp . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 181


state 168

    (60) escrituraB -> COMMA escrituraA escrituraB .

    RIGHTPAR        reduce using rule 60 (escrituraB -> COMMA escrituraA escrituraB .)


state 169

    (62) condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA .

    ID              reduce using rule 62 (condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA .)
    READ            reduce using rule 62 (condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA .)
    WRITE           reduce using rule 62 (condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA .)
    IF              reduce using rule 62 (condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA .)
    FROM            reduce using rule 62 (condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA .)
    RIGHTCURLY      reduce using rule 62 (condicion -> IF LEFTPAR exp RIGHTPAR bloque condicionA .)


state 170

    (63) condicionA -> ELSE . bloque
    (43) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 35

    bloque                         shift and go to state 182

state 171

    (64) condicionA -> empty .

    ID              reduce using rule 64 (condicionA -> empty .)
    READ            reduce using rule 64 (condicionA -> empty .)
    WRITE           reduce using rule 64 (condicionA -> empty .)
    IF              reduce using rule 64 (condicionA -> empty .)
    FROM            reduce using rule 64 (condicionA -> empty .)
    RIGHTCURLY      reduce using rule 64 (condicionA -> empty .)


state 172

    (65) ciclo -> FROM exp TO exp DO bloque .

    ID              reduce using rule 65 (ciclo -> FROM exp TO exp DO bloque .)
    READ            reduce using rule 65 (ciclo -> FROM exp TO exp DO bloque .)
    WRITE           reduce using rule 65 (ciclo -> FROM exp TO exp DO bloque .)
    IF              reduce using rule 65 (ciclo -> FROM exp TO exp DO bloque .)
    FROM            reduce using rule 65 (ciclo -> FROM exp TO exp DO bloque .)
    RIGHTCURLY      reduce using rule 65 (ciclo -> FROM exp TO exp DO bloque .)


state 173

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC . bloque
    (43) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 35

    bloque                         shift and go to state 183

state 174

    (34) funcionC -> vars .

    LEFTCURLY       reduce using rule 34 (funcionC -> vars .)


state 175

    (35) funcionC -> empty .

    LEFTCURLY       reduce using rule 35 (funcionC -> empty .)


state 176

    (41) paramsA -> COMMA tipoSimple . ID paramsA

    ID              shift and go to state 184


state 177

    (22) varsE -> COMMA ID varsNP3 varsE .

    SEMICOLON       reduce using rule 22 (varsE -> COMMA ID varsNP3 varsE .)


state 178

    (19) varsD -> LEFTBRACKET . CTI varsNP5 RIGHTBRACKET

    CTI             shift and go to state 185


state 179

    (16) varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD .

    SEMICOLON       reduce using rule 16 (varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD .)


state 180

    (20) varsD -> empty .

    SEMICOLON       reduce using rule 20 (varsD -> empty .)


state 181

    (69) variableB -> LEFTBRACKET exp RIGHTBRACKET .

    ASSIGNOP        reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    MULOP           reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DIVOP           reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    SUMOP           reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    SUBOP           reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    LESSTHANOP      reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    GREATERTHANOP   reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DIFFERENTOP     reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    EQUALOP         reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    ANDOP           reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    OROP            reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    TO              reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    ID              reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    READ            reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    WRITE           reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    IF              reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    FROM            reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTCURLY      reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    COMMA           reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DO              reduce using rule 69 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)


state 182

    (63) condicionA -> ELSE bloque .

    ID              reduce using rule 63 (condicionA -> ELSE bloque .)
    READ            reduce using rule 63 (condicionA -> ELSE bloque .)
    WRITE           reduce using rule 63 (condicionA -> ELSE bloque .)
    IF              reduce using rule 63 (condicionA -> ELSE bloque .)
    FROM            reduce using rule 63 (condicionA -> ELSE bloque .)
    RIGHTCURLY      reduce using rule 63 (condicionA -> ELSE bloque .)


state 183

    (27) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque .

    FUNC            reduce using rule 27 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque .)
    MAINSTART       reduce using rule 27 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC bloque .)


state 184

    (41) paramsA -> COMMA tipoSimple ID . paramsA
    (41) paramsA -> . COMMA tipoSimple ID paramsA
    (42) paramsA -> . empty
    (99) empty -> .

    COMMA           shift and go to state 162
    RIGHTPAR        reduce using rule 99 (empty -> .)

    paramsA                        shift and go to state 186
    empty                          shift and go to state 163

state 185

    (19) varsD -> LEFTBRACKET CTI . varsNP5 RIGHTBRACKET
    (21) varsNP5 -> .

    RIGHTBRACKET    reduce using rule 21 (varsNP5 -> .)

    varsNP5                        shift and go to state 187

state 186

    (41) paramsA -> COMMA tipoSimple ID paramsA .

    RIGHTPAR        reduce using rule 41 (paramsA -> COMMA tipoSimple ID paramsA .)


state 187

    (19) varsD -> LEFTBRACKET CTI varsNP5 . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 188


state 188

    (19) varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET .

    SEMICOLON       reduce using rule 19 (varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET .)

