Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main
Rule 2     programNP1 -> <empty>
Rule 3     programNP2 -> <empty>
Rule 4     programA -> vars
Rule 5     programA -> empty
Rule 6     programB -> funcion programB
Rule 7     programB -> empty
Rule 8     vars -> VAR varsA
Rule 9     varsA -> varsB SEMICOLON varsF
Rule 10    varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE
Rule 11    varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6
Rule 12    varsNP2 -> <empty>
Rule 13    varsNP6 -> <empty>
Rule 14    varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD
Rule 15    varsC -> empty
Rule 16    varsNP4 -> <empty>
Rule 17    varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET
Rule 18    varsD -> empty
Rule 19    varsNP5 -> <empty>
Rule 20    varsE -> COMMA ID varsNP3 varsNP6 varsE
Rule 21    varsE -> empty
Rule 22    varsNP3 -> <empty>
Rule 23    varsF -> varsA
Rule 24    varsF -> empty
Rule 25    funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
Rule 26    quadStart -> <empty>
Rule 27    genMemReqs -> <empty>
Rule 28    funcionNP1 -> <empty>
Rule 29    funcionNP2 -> <empty>
Rule 30    funcionA -> tipoSimple funcionANP1
Rule 31    funcionA -> VOID funcionANP1
Rule 32    funcionANP1 -> <empty>
Rule 33    funcionB -> params
Rule 34    funcionB -> empty
Rule 35    funcionC -> vars
Rule 36    funcionC -> empty
Rule 37    main -> MAINSTART mainNP1 bloque
Rule 38    mainNP1 -> <empty>
Rule 39    tipoSimple -> INT tipoSimpleNP1
Rule 40    tipoSimple -> FLOAT tipoSimpleNP1
Rule 41    tipoSimpleNP1 -> <empty>
Rule 42    params -> tipoSimple paramsNP1 ID paramsNP2 paramsA
Rule 43    paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
Rule 44    paramsA -> empty
Rule 45    paramsNP1 -> <empty>
Rule 46    paramsNP2 -> <empty>
Rule 47    bloque -> LEFTCURLY bloqueA RIGHTCURLY
Rule 48    bloqueA -> estatuto bloqueA
Rule 49    bloqueA -> empty
Rule 50    estatuto -> estatutoNP1 estatutoA
Rule 51    estatutoA -> asignacion
Rule 52    estatutoA -> llamada checkIfVoid
Rule 53    estatutoA -> read
Rule 54    estatutoA -> escritura
Rule 55    estatutoA -> return
Rule 56    estatutoA -> condicion
Rule 57    estatutoA -> ciclo
Rule 58    checkIfVoid -> <empty>
Rule 59    estatutoNP1 -> <empty>
Rule 60    asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2
Rule 61    asignacionNP1 -> <empty>
Rule 62    asignacionNP2 -> <empty>
Rule 63    llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
Rule 64    primerparam -> exp loeNP1
Rule 65    primerparam -> empty
Rule 66    llamadaA -> COMMA exp loeNP1 llamadaA
Rule 67    llamadaA -> empty
Rule 68    llamadaNP1 -> <empty>
Rule 69    llamadaNP3 -> <empty>
Rule 70    read -> READ ID readNP1
Rule 71    readNP1 -> <empty>
Rule 72    escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
Rule 73    escrituraNP1 -> <empty>
Rule 74    escrituraNP3 -> <empty>
Rule 75    loeNP2 -> <empty>
Rule 76    escrituraA -> exp loeNP1
Rule 77    escrituraA -> CTSTRING escrituraNP2
Rule 78    loeNP1 -> <empty>
Rule 79    escrituraNP2 -> <empty>
Rule 80    escrituraB -> COMMA escrituraA escrituraB
Rule 81    escrituraB -> empty
Rule 82    return -> RETURN exp returnNP1
Rule 83    returnNP1 -> <empty>
Rule 84    condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA
Rule 85    condicionNP1 -> <empty>
Rule 86    condicionA -> ELSE condicionANP1 bloque condicionANP2
Rule 87    condicionA -> empty
Rule 88    condicionANP1 -> <empty>
Rule 89    condicionANP2 -> <empty>
Rule 90    ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2
Rule 91    cicloNP1 -> <empty>
Rule 92    cicloNP2 -> <empty>
Rule 93    variable -> ID variableNP1 variableA
Rule 94    variableNP1 -> <empty>
Rule 95    variableA -> LEFTBRACKET exp RIGHTBRACKET variableB
Rule 96    variableA -> empty
Rule 97    variableB -> LEFTBRACKET exp RIGHTBRACKET
Rule 98    variableB -> empty
Rule 99    exp -> exp1 expA
Rule 100   expNP1 -> <empty>
Rule 101   expA -> OROP operNP1 exp1 expNP1 expA
Rule 102   expA -> empty
Rule 103   exp1 -> exp2 exp1A
Rule 104   exp1NP1 -> <empty>
Rule 105   exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A
Rule 106   exp1A -> empty
Rule 107   exp2 -> exp3 exp2A
Rule 108   exp2A -> exp2B operNP1 exp3 exp2ANP1
Rule 109   exp2A -> empty
Rule 110   exp2ANP1 -> <empty>
Rule 111   exp2B -> LESSTHANOP
Rule 112   exp2B -> GREATERTHANOP
Rule 113   exp2B -> DIFFERENTOP
Rule 114   exp2B -> EQUALOP
Rule 115   exp3 -> termino exp3A
Rule 116   exp3NP1 -> <empty>
Rule 117   exp3A -> exp3B operNP1 termino exp3NP1 exp3A
Rule 118   exp3A -> empty
Rule 119   exp3B -> SUMOP
Rule 120   exp3B -> SUBOP
Rule 121   termino -> terminoC terminoA
Rule 122   terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA
Rule 123   terminoA -> empty
Rule 124   terminoANP1 -> <empty>
Rule 125   terminoB -> MULOP
Rule 126   terminoB -> DIVOP
Rule 127   terminoC -> factor
Rule 128   terminoC -> llamada checkIfNotVoid
Rule 129   checkIfNotVoid -> <empty>
Rule 130   factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1
Rule 131   factor -> CTI factorNP2
Rule 132   factor -> CTF factorNP3
Rule 133   factor -> variable
Rule 134   operNP1 -> <empty>
Rule 135   factorNP1 -> <empty>
Rule 136   factorNP2 -> <empty>
Rule 137   factorNP3 -> <empty>
Rule 138   empty -> <empty>

Terminals, with rules where they appear

ANDOP                : 105
ASSIGNOP             : 60
COMMA                : 20 43 66 80
CTF                  : 132
CTI                  : 14 17 131
CTSTRING             : 77
DIFFERENTOP          : 113
DIVOP                : 126
DO                   : 90
ELSE                 : 86
EQUALOP              : 114
FILE                 : 10
FLOAT                : 40
FROM                 : 90
FUNC                 : 25
GREATERTHANOP        : 112
ID                   : 1 10 11 20 25 42 43 63 70 93
IF                   : 84
INT                  : 39
LEFTBRACKET          : 14 17 95 97
LEFTCURLY            : 47
LEFTPAR              : 25 63 72 84 130
LESSTHANOP           : 111
MAINSTART            : 37
MULOP                : 125
OROP                 : 101
PROGRAM              : 1
READ                 : 70
RETURN               : 82
RIGHTBRACKET         : 14 17 95 97
RIGHTCURLY           : 47
RIGHTPAR             : 25 63 72 84 130
SEMICOLON            : 1 9 25
SUBOP                : 120
SUMOP                : 119
TO                   : 90
VAR                  : 8
VOID                 : 31
WRITE                : 72
error                : 

Nonterminals, with rules where they appear

asignacion           : 51
asignacionNP1        : 60
asignacionNP2        : 60
bloque               : 25 37 84 86 90
bloqueA              : 47 48
checkIfNotVoid       : 128
checkIfVoid          : 52
ciclo                : 57
cicloNP1             : 90
cicloNP2             : 90
condicion            : 56
condicionA           : 84
condicionANP1        : 86
condicionANP2        : 86
condicionNP1         : 84
empty                : 5 7 15 18 21 24 34 36 44 49 65 67 81 87 96 98 102 106 109 118 123
escritura            : 54
escrituraA           : 72 80
escrituraB           : 72 80
escrituraNP1         : 72
escrituraNP2         : 77
escrituraNP3         : 72
estatuto             : 48
estatutoA            : 50
estatutoNP1          : 50
exp                  : 60 64 66 76 82 84 90 90 95 97 130
exp1                 : 99 101
exp1A                : 103 105
exp1NP1              : 105
exp2                 : 103 105
exp2A                : 107
exp2ANP1             : 108
exp2B                : 108
exp3                 : 107 108
exp3A                : 115 117
exp3B                : 117
exp3NP1              : 117
expA                 : 99 101
expNP1               : 101
factor               : 127
factorNP1            : 130
factorNP2            : 131
factorNP3            : 132
funcion              : 6
funcionA             : 25
funcionANP1          : 30 31
funcionB             : 25
funcionC             : 25
funcionNP1           : 25
funcionNP2           : 25
genMemReqs           : 25
llamada              : 52 128
llamadaA             : 63 66
llamadaNP1           : 63
llamadaNP3           : 63
loeNP1               : 64 66 76
loeNP2               : 63 72
main                 : 1
mainNP1              : 37
operNP1              : 101 105 108 117 122 130
params               : 33
paramsA              : 42 43
paramsNP1            : 42 43
paramsNP2            : 42 43
primerparam          : 63
program              : 0
programA             : 1
programB             : 1 6
programNP1           : 1
programNP2           : 1
quadStart            : 25
read                 : 53
readNP1              : 70
return               : 55
returnNP1            : 82
termino              : 115 117
terminoA             : 121 122
terminoANP1          : 122
terminoB             : 122
terminoC             : 121 122
tipoSimple           : 11 30 42 43
tipoSimpleNP1        : 39 40
variable             : 60 133
variableA            : 93
variableB            : 95
variableNP1          : 93
vars                 : 4 35
varsA                : 8 23
varsB                : 9
varsC                : 11
varsD                : 14
varsE                : 10 20
varsF                : 9
varsNP2              : 10 11
varsNP3              : 10 11 20
varsNP4              : 14
varsNP5              : 17
varsNP6              : 10 11 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . programNP1 ID programNP2 SEMICOLON programA programB main
    (2) programNP1 -> .

    ID              reduce using rule 2 (programNP1 -> .)

    programNP1                     shift and go to state 3

state 3

    (1) program -> PROGRAM programNP1 . ID programNP2 SEMICOLON programA programB main

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM programNP1 ID . programNP2 SEMICOLON programA programB main
    (3) programNP2 -> .

    SEMICOLON       reduce using rule 3 (programNP2 -> .)

    programNP2                     shift and go to state 5

state 5

    (1) program -> PROGRAM programNP1 ID programNP2 . SEMICOLON programA programB main

    SEMICOLON       shift and go to state 6


state 6

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON . programA programB main
    (4) programA -> . vars
    (5) programA -> . empty
    (8) vars -> . VAR varsA
    (138) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 138 (empty -> .)
    MAINSTART       reduce using rule 138 (empty -> .)

    programA                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 7

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA . programB main
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (25) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (138) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 138 (empty -> .)

    programB                       shift and go to state 11
    funcion                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) programA -> vars .

    FUNC            reduce using rule 4 (programA -> vars .)
    MAINSTART       reduce using rule 4 (programA -> vars .)


state 9

    (5) programA -> empty .

    FUNC            reduce using rule 5 (programA -> empty .)
    MAINSTART       reduce using rule 5 (programA -> empty .)


state 10

    (8) vars -> VAR . varsA
    (9) varsA -> . varsB SEMICOLON varsF
    (10) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (11) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (39) tipoSimple -> . INT tipoSimpleNP1
    (40) tipoSimple -> . FLOAT tipoSimpleNP1

    FILE            shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    varsA                          shift and go to state 15
    varsB                          shift and go to state 16
    tipoSimple                     shift and go to state 18

state 11

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB . main
    (37) main -> . MAINSTART mainNP1 bloque

    MAINSTART       shift and go to state 22

    main                           shift and go to state 21

state 12

    (6) programB -> funcion . programB
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (25) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (138) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 138 (empty -> .)

    funcion                        shift and go to state 12
    programB                       shift and go to state 23
    empty                          shift and go to state 13

state 13

    (7) programB -> empty .

    MAINSTART       reduce using rule 7 (programB -> empty .)


state 14

    (25) funcion -> FUNC . funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (30) funcionA -> . tipoSimple funcionANP1
    (31) funcionA -> . VOID funcionANP1
    (39) tipoSimple -> . INT tipoSimpleNP1
    (40) tipoSimple -> . FLOAT tipoSimpleNP1

    VOID            shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    funcionA                       shift and go to state 24
    tipoSimple                     shift and go to state 25

state 15

    (8) vars -> VAR varsA .

    FUNC            reduce using rule 8 (vars -> VAR varsA .)
    MAINSTART       reduce using rule 8 (vars -> VAR varsA .)
    LEFTCURLY       reduce using rule 8 (vars -> VAR varsA .)


state 16

    (9) varsA -> varsB . SEMICOLON varsF

    SEMICOLON       shift and go to state 27


state 17

    (10) varsB -> FILE . varsNP2 ID varsNP3 varsNP6 varsE
    (12) varsNP2 -> .

    ID              reduce using rule 12 (varsNP2 -> .)

    varsNP2                        shift and go to state 28

state 18

    (11) varsB -> tipoSimple . varsNP2 ID varsNP3 varsC varsNP6
    (12) varsNP2 -> .

    ID              reduce using rule 12 (varsNP2 -> .)

    varsNP2                        shift and go to state 29

state 19

    (39) tipoSimple -> INT . tipoSimpleNP1
    (41) tipoSimpleNP1 -> .

    ID              reduce using rule 41 (tipoSimpleNP1 -> .)

    tipoSimpleNP1                  shift and go to state 30

state 20

    (40) tipoSimple -> FLOAT . tipoSimpleNP1
    (41) tipoSimpleNP1 -> .

    ID              reduce using rule 41 (tipoSimpleNP1 -> .)

    tipoSimpleNP1                  shift and go to state 31

state 21

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .

    $end            reduce using rule 1 (program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .)


state 22

    (37) main -> MAINSTART . mainNP1 bloque
    (38) mainNP1 -> .

    LEFTCURLY       reduce using rule 38 (mainNP1 -> .)

    mainNP1                        shift and go to state 32

state 23

    (6) programB -> funcion programB .

    MAINSTART       reduce using rule 6 (programB -> funcion programB .)


state 24

    (25) funcion -> FUNC funcionA . funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (28) funcionNP1 -> .

    ID              reduce using rule 28 (funcionNP1 -> .)

    funcionNP1                     shift and go to state 33

state 25

    (30) funcionA -> tipoSimple . funcionANP1
    (32) funcionANP1 -> .

    ID              reduce using rule 32 (funcionANP1 -> .)

    funcionANP1                    shift and go to state 34

state 26

    (31) funcionA -> VOID . funcionANP1
    (32) funcionANP1 -> .

    ID              reduce using rule 32 (funcionANP1 -> .)

    funcionANP1                    shift and go to state 35

state 27

    (9) varsA -> varsB SEMICOLON . varsF
    (23) varsF -> . varsA
    (24) varsF -> . empty
    (9) varsA -> . varsB SEMICOLON varsF
    (138) empty -> .
    (10) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (11) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (39) tipoSimple -> . INT tipoSimpleNP1
    (40) tipoSimple -> . FLOAT tipoSimpleNP1

    FUNC            reduce using rule 138 (empty -> .)
    MAINSTART       reduce using rule 138 (empty -> .)
    LEFTCURLY       reduce using rule 138 (empty -> .)
    FILE            shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    varsB                          shift and go to state 16
    varsF                          shift and go to state 36
    varsA                          shift and go to state 37
    empty                          shift and go to state 38
    tipoSimple                     shift and go to state 18

state 28

    (10) varsB -> FILE varsNP2 . ID varsNP3 varsNP6 varsE

    ID              shift and go to state 39


state 29

    (11) varsB -> tipoSimple varsNP2 . ID varsNP3 varsC varsNP6

    ID              shift and go to state 40


state 30

    (39) tipoSimple -> INT tipoSimpleNP1 .

    ID              reduce using rule 39 (tipoSimple -> INT tipoSimpleNP1 .)


state 31

    (40) tipoSimple -> FLOAT tipoSimpleNP1 .

    ID              reduce using rule 40 (tipoSimple -> FLOAT tipoSimpleNP1 .)


state 32

    (37) main -> MAINSTART mainNP1 . bloque
    (47) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 41

state 33

    (25) funcion -> FUNC funcionA funcionNP1 . ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    ID              shift and go to state 43


state 34

    (30) funcionA -> tipoSimple funcionANP1 .

    ID              reduce using rule 30 (funcionA -> tipoSimple funcionANP1 .)


state 35

    (31) funcionA -> VOID funcionANP1 .

    ID              reduce using rule 31 (funcionA -> VOID funcionANP1 .)


state 36

    (9) varsA -> varsB SEMICOLON varsF .

    FUNC            reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)
    MAINSTART       reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)
    LEFTCURLY       reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)


state 37

    (23) varsF -> varsA .

    FUNC            reduce using rule 23 (varsF -> varsA .)
    MAINSTART       reduce using rule 23 (varsF -> varsA .)
    LEFTCURLY       reduce using rule 23 (varsF -> varsA .)


state 38

    (24) varsF -> empty .

    FUNC            reduce using rule 24 (varsF -> empty .)
    MAINSTART       reduce using rule 24 (varsF -> empty .)
    LEFTCURLY       reduce using rule 24 (varsF -> empty .)


state 39

    (10) varsB -> FILE varsNP2 ID . varsNP3 varsNP6 varsE
    (22) varsNP3 -> .

    COMMA           reduce using rule 22 (varsNP3 -> .)
    SEMICOLON       reduce using rule 22 (varsNP3 -> .)

    varsNP3                        shift and go to state 44

state 40

    (11) varsB -> tipoSimple varsNP2 ID . varsNP3 varsC varsNP6
    (22) varsNP3 -> .

    LEFTBRACKET     reduce using rule 22 (varsNP3 -> .)
    SEMICOLON       reduce using rule 22 (varsNP3 -> .)

    varsNP3                        shift and go to state 45

state 41

    (37) main -> MAINSTART mainNP1 bloque .

    $end            reduce using rule 37 (main -> MAINSTART mainNP1 bloque .)


state 42

    (47) bloque -> LEFTCURLY . bloqueA RIGHTCURLY
    (48) bloqueA -> . estatuto bloqueA
    (49) bloqueA -> . empty
    (50) estatuto -> . estatutoNP1 estatutoA
    (138) empty -> .
    (59) estatutoNP1 -> .

    RIGHTCURLY      reduce using rule 138 (empty -> .)
    ID              reduce using rule 59 (estatutoNP1 -> .)
    READ            reduce using rule 59 (estatutoNP1 -> .)
    WRITE           reduce using rule 59 (estatutoNP1 -> .)
    RETURN          reduce using rule 59 (estatutoNP1 -> .)
    IF              reduce using rule 59 (estatutoNP1 -> .)
    FROM            reduce using rule 59 (estatutoNP1 -> .)

    bloqueA                        shift and go to state 46
    estatuto                       shift and go to state 47
    empty                          shift and go to state 48
    estatutoNP1                    shift and go to state 49

state 43

    (25) funcion -> FUNC funcionA funcionNP1 ID . funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (29) funcionNP2 -> .

    LEFTPAR         reduce using rule 29 (funcionNP2 -> .)

    funcionNP2                     shift and go to state 50

state 44

    (10) varsB -> FILE varsNP2 ID varsNP3 . varsNP6 varsE
    (13) varsNP6 -> .

    COMMA           reduce using rule 13 (varsNP6 -> .)
    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 51

state 45

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 . varsC varsNP6
    (14) varsC -> . LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD
    (15) varsC -> . empty
    (138) empty -> .

    LEFTBRACKET     shift and go to state 53
    SEMICOLON       reduce using rule 138 (empty -> .)

    varsC                          shift and go to state 52
    empty                          shift and go to state 54

state 46

    (47) bloque -> LEFTCURLY bloqueA . RIGHTCURLY

    RIGHTCURLY      shift and go to state 55


state 47

    (48) bloqueA -> estatuto . bloqueA
    (48) bloqueA -> . estatuto bloqueA
    (49) bloqueA -> . empty
    (50) estatuto -> . estatutoNP1 estatutoA
    (138) empty -> .
    (59) estatutoNP1 -> .

    RIGHTCURLY      reduce using rule 138 (empty -> .)
    ID              reduce using rule 59 (estatutoNP1 -> .)
    READ            reduce using rule 59 (estatutoNP1 -> .)
    WRITE           reduce using rule 59 (estatutoNP1 -> .)
    RETURN          reduce using rule 59 (estatutoNP1 -> .)
    IF              reduce using rule 59 (estatutoNP1 -> .)
    FROM            reduce using rule 59 (estatutoNP1 -> .)

    estatuto                       shift and go to state 47
    bloqueA                        shift and go to state 56
    empty                          shift and go to state 48
    estatutoNP1                    shift and go to state 49

state 48

    (49) bloqueA -> empty .

    RIGHTCURLY      reduce using rule 49 (bloqueA -> empty .)


state 49

    (50) estatuto -> estatutoNP1 . estatutoA
    (51) estatutoA -> . asignacion
    (52) estatutoA -> . llamada checkIfVoid
    (53) estatutoA -> . read
    (54) estatutoA -> . escritura
    (55) estatutoA -> . return
    (56) estatutoA -> . condicion
    (57) estatutoA -> . ciclo
    (60) asignacion -> . variable ASSIGNOP asignacionNP1 exp asignacionNP2
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (70) read -> . READ ID readNP1
    (72) escritura -> . WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (82) return -> . RETURN exp returnNP1
    (84) condicion -> . IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA
    (90) ciclo -> . FROM exp TO exp DO cicloNP1 bloque cicloNP2
    (93) variable -> . ID variableNP1 variableA

    ID              shift and go to state 66
    READ            shift and go to state 67
    WRITE           shift and go to state 68
    RETURN          shift and go to state 69
    IF              shift and go to state 70
    FROM            shift and go to state 71

    estatutoA                      shift and go to state 57
    asignacion                     shift and go to state 58
    llamada                        shift and go to state 59
    read                           shift and go to state 60
    escritura                      shift and go to state 61
    return                         shift and go to state 62
    condicion                      shift and go to state 63
    ciclo                          shift and go to state 64
    variable                       shift and go to state 65

state 50

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 . LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    LEFTPAR         shift and go to state 72


state 51

    (10) varsB -> FILE varsNP2 ID varsNP3 varsNP6 . varsE
    (20) varsE -> . COMMA ID varsNP3 varsNP6 varsE
    (21) varsE -> . empty
    (138) empty -> .

    COMMA           shift and go to state 74
    SEMICOLON       reduce using rule 138 (empty -> .)

    varsE                          shift and go to state 73
    empty                          shift and go to state 75

state 52

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 varsC . varsNP6
    (13) varsNP6 -> .

    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 76

state 53

    (14) varsC -> LEFTBRACKET . CTI varsNP4 RIGHTBRACKET varsD

    CTI             shift and go to state 77


state 54

    (15) varsC -> empty .

    SEMICOLON       reduce using rule 15 (varsC -> empty .)


state 55

    (47) bloque -> LEFTCURLY bloqueA RIGHTCURLY .

    $end            reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ELSE            reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ID              reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    READ            reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    WRITE           reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    RETURN          reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    IF              reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FROM            reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    RIGHTCURLY      reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FUNC            reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    MAINSTART       reduce using rule 47 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)


state 56

    (48) bloqueA -> estatuto bloqueA .

    RIGHTCURLY      reduce using rule 48 (bloqueA -> estatuto bloqueA .)


state 57

    (50) estatuto -> estatutoNP1 estatutoA .

    ID              reduce using rule 50 (estatuto -> estatutoNP1 estatutoA .)
    READ            reduce using rule 50 (estatuto -> estatutoNP1 estatutoA .)
    WRITE           reduce using rule 50 (estatuto -> estatutoNP1 estatutoA .)
    RETURN          reduce using rule 50 (estatuto -> estatutoNP1 estatutoA .)
    IF              reduce using rule 50 (estatuto -> estatutoNP1 estatutoA .)
    FROM            reduce using rule 50 (estatuto -> estatutoNP1 estatutoA .)
    RIGHTCURLY      reduce using rule 50 (estatuto -> estatutoNP1 estatutoA .)


state 58

    (51) estatutoA -> asignacion .

    ID              reduce using rule 51 (estatutoA -> asignacion .)
    READ            reduce using rule 51 (estatutoA -> asignacion .)
    WRITE           reduce using rule 51 (estatutoA -> asignacion .)
    RETURN          reduce using rule 51 (estatutoA -> asignacion .)
    IF              reduce using rule 51 (estatutoA -> asignacion .)
    FROM            reduce using rule 51 (estatutoA -> asignacion .)
    RIGHTCURLY      reduce using rule 51 (estatutoA -> asignacion .)


state 59

    (52) estatutoA -> llamada . checkIfVoid
    (58) checkIfVoid -> .

    ID              reduce using rule 58 (checkIfVoid -> .)
    READ            reduce using rule 58 (checkIfVoid -> .)
    WRITE           reduce using rule 58 (checkIfVoid -> .)
    RETURN          reduce using rule 58 (checkIfVoid -> .)
    IF              reduce using rule 58 (checkIfVoid -> .)
    FROM            reduce using rule 58 (checkIfVoid -> .)
    RIGHTCURLY      reduce using rule 58 (checkIfVoid -> .)

    checkIfVoid                    shift and go to state 78

state 60

    (53) estatutoA -> read .

    ID              reduce using rule 53 (estatutoA -> read .)
    READ            reduce using rule 53 (estatutoA -> read .)
    WRITE           reduce using rule 53 (estatutoA -> read .)
    RETURN          reduce using rule 53 (estatutoA -> read .)
    IF              reduce using rule 53 (estatutoA -> read .)
    FROM            reduce using rule 53 (estatutoA -> read .)
    RIGHTCURLY      reduce using rule 53 (estatutoA -> read .)


state 61

    (54) estatutoA -> escritura .

    ID              reduce using rule 54 (estatutoA -> escritura .)
    READ            reduce using rule 54 (estatutoA -> escritura .)
    WRITE           reduce using rule 54 (estatutoA -> escritura .)
    RETURN          reduce using rule 54 (estatutoA -> escritura .)
    IF              reduce using rule 54 (estatutoA -> escritura .)
    FROM            reduce using rule 54 (estatutoA -> escritura .)
    RIGHTCURLY      reduce using rule 54 (estatutoA -> escritura .)


state 62

    (55) estatutoA -> return .

    ID              reduce using rule 55 (estatutoA -> return .)
    READ            reduce using rule 55 (estatutoA -> return .)
    WRITE           reduce using rule 55 (estatutoA -> return .)
    RETURN          reduce using rule 55 (estatutoA -> return .)
    IF              reduce using rule 55 (estatutoA -> return .)
    FROM            reduce using rule 55 (estatutoA -> return .)
    RIGHTCURLY      reduce using rule 55 (estatutoA -> return .)


state 63

    (56) estatutoA -> condicion .

    ID              reduce using rule 56 (estatutoA -> condicion .)
    READ            reduce using rule 56 (estatutoA -> condicion .)
    WRITE           reduce using rule 56 (estatutoA -> condicion .)
    RETURN          reduce using rule 56 (estatutoA -> condicion .)
    IF              reduce using rule 56 (estatutoA -> condicion .)
    FROM            reduce using rule 56 (estatutoA -> condicion .)
    RIGHTCURLY      reduce using rule 56 (estatutoA -> condicion .)


state 64

    (57) estatutoA -> ciclo .

    ID              reduce using rule 57 (estatutoA -> ciclo .)
    READ            reduce using rule 57 (estatutoA -> ciclo .)
    WRITE           reduce using rule 57 (estatutoA -> ciclo .)
    RETURN          reduce using rule 57 (estatutoA -> ciclo .)
    IF              reduce using rule 57 (estatutoA -> ciclo .)
    FROM            reduce using rule 57 (estatutoA -> ciclo .)
    RIGHTCURLY      reduce using rule 57 (estatutoA -> ciclo .)


state 65

    (60) asignacion -> variable . ASSIGNOP asignacionNP1 exp asignacionNP2

    ASSIGNOP        shift and go to state 79


state 66

    (63) llamada -> ID . llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> ID . variableNP1 variableA
    (68) llamadaNP1 -> .
    (94) variableNP1 -> .

    LEFTPAR         reduce using rule 68 (llamadaNP1 -> .)
    LEFTBRACKET     reduce using rule 94 (variableNP1 -> .)
    ASSIGNOP        reduce using rule 94 (variableNP1 -> .)
    MULOP           reduce using rule 94 (variableNP1 -> .)
    DIVOP           reduce using rule 94 (variableNP1 -> .)
    SUMOP           reduce using rule 94 (variableNP1 -> .)
    SUBOP           reduce using rule 94 (variableNP1 -> .)
    LESSTHANOP      reduce using rule 94 (variableNP1 -> .)
    GREATERTHANOP   reduce using rule 94 (variableNP1 -> .)
    DIFFERENTOP     reduce using rule 94 (variableNP1 -> .)
    EQUALOP         reduce using rule 94 (variableNP1 -> .)
    ANDOP           reduce using rule 94 (variableNP1 -> .)
    OROP            reduce using rule 94 (variableNP1 -> .)
    ID              reduce using rule 94 (variableNP1 -> .)
    READ            reduce using rule 94 (variableNP1 -> .)
    WRITE           reduce using rule 94 (variableNP1 -> .)
    RETURN          reduce using rule 94 (variableNP1 -> .)
    IF              reduce using rule 94 (variableNP1 -> .)
    FROM            reduce using rule 94 (variableNP1 -> .)
    RIGHTCURLY      reduce using rule 94 (variableNP1 -> .)
    TO              reduce using rule 94 (variableNP1 -> .)
    RIGHTPAR        reduce using rule 94 (variableNP1 -> .)
    RIGHTBRACKET    reduce using rule 94 (variableNP1 -> .)
    DO              reduce using rule 94 (variableNP1 -> .)
    COMMA           reduce using rule 94 (variableNP1 -> .)

    llamadaNP1                     shift and go to state 80
    variableNP1                    shift and go to state 81

state 67

    (70) read -> READ . ID readNP1

    ID              shift and go to state 82


state 68

    (72) escritura -> WRITE . escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (73) escrituraNP1 -> .

    LEFTPAR         reduce using rule 73 (escrituraNP1 -> .)

    escrituraNP1                   shift and go to state 83

state 69

    (82) return -> RETURN . exp returnNP1
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 84
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 70

    (84) condicion -> IF . LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA

    LEFTPAR         shift and go to state 96


state 71

    (90) ciclo -> FROM . exp TO exp DO cicloNP1 bloque cicloNP2
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 97
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 72

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR . funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (33) funcionB -> . params
    (34) funcionB -> . empty
    (42) params -> . tipoSimple paramsNP1 ID paramsNP2 paramsA
    (138) empty -> .
    (39) tipoSimple -> . INT tipoSimpleNP1
    (40) tipoSimple -> . FLOAT tipoSimpleNP1

    RIGHTPAR        reduce using rule 138 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    funcionB                       shift and go to state 98
    params                         shift and go to state 99
    empty                          shift and go to state 100
    tipoSimple                     shift and go to state 101

state 73

    (10) varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .

    SEMICOLON       reduce using rule 10 (varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .)


state 74

    (20) varsE -> COMMA . ID varsNP3 varsNP6 varsE

    ID              shift and go to state 102


state 75

    (21) varsE -> empty .

    SEMICOLON       reduce using rule 21 (varsE -> empty .)


state 76

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .

    SEMICOLON       reduce using rule 11 (varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .)


state 77

    (14) varsC -> LEFTBRACKET CTI . varsNP4 RIGHTBRACKET varsD
    (16) varsNP4 -> .

    RIGHTBRACKET    reduce using rule 16 (varsNP4 -> .)

    varsNP4                        shift and go to state 103

state 78

    (52) estatutoA -> llamada checkIfVoid .

    ID              reduce using rule 52 (estatutoA -> llamada checkIfVoid .)
    READ            reduce using rule 52 (estatutoA -> llamada checkIfVoid .)
    WRITE           reduce using rule 52 (estatutoA -> llamada checkIfVoid .)
    RETURN          reduce using rule 52 (estatutoA -> llamada checkIfVoid .)
    IF              reduce using rule 52 (estatutoA -> llamada checkIfVoid .)
    FROM            reduce using rule 52 (estatutoA -> llamada checkIfVoid .)
    RIGHTCURLY      reduce using rule 52 (estatutoA -> llamada checkIfVoid .)


state 79

    (60) asignacion -> variable ASSIGNOP . asignacionNP1 exp asignacionNP2
    (61) asignacionNP1 -> .

    LEFTPAR         reduce using rule 61 (asignacionNP1 -> .)
    CTI             reduce using rule 61 (asignacionNP1 -> .)
    CTF             reduce using rule 61 (asignacionNP1 -> .)
    ID              reduce using rule 61 (asignacionNP1 -> .)

    asignacionNP1                  shift and go to state 104

state 80

    (63) llamada -> ID llamadaNP1 . LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3

    LEFTPAR         shift and go to state 105


state 81

    (93) variable -> ID variableNP1 . variableA
    (95) variableA -> . LEFTBRACKET exp RIGHTBRACKET variableB
    (96) variableA -> . empty
    (138) empty -> .

    LEFTBRACKET     shift and go to state 107
    ASSIGNOP        reduce using rule 138 (empty -> .)
    MULOP           reduce using rule 138 (empty -> .)
    DIVOP           reduce using rule 138 (empty -> .)
    SUMOP           reduce using rule 138 (empty -> .)
    SUBOP           reduce using rule 138 (empty -> .)
    LESSTHANOP      reduce using rule 138 (empty -> .)
    GREATERTHANOP   reduce using rule 138 (empty -> .)
    DIFFERENTOP     reduce using rule 138 (empty -> .)
    EQUALOP         reduce using rule 138 (empty -> .)
    ANDOP           reduce using rule 138 (empty -> .)
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    variableA                      shift and go to state 106
    empty                          shift and go to state 108

state 82

    (70) read -> READ ID . readNP1
    (71) readNP1 -> .

    ID              reduce using rule 71 (readNP1 -> .)
    READ            reduce using rule 71 (readNP1 -> .)
    WRITE           reduce using rule 71 (readNP1 -> .)
    RETURN          reduce using rule 71 (readNP1 -> .)
    IF              reduce using rule 71 (readNP1 -> .)
    FROM            reduce using rule 71 (readNP1 -> .)
    RIGHTCURLY      reduce using rule 71 (readNP1 -> .)

    readNP1                        shift and go to state 109

state 83

    (72) escritura -> WRITE escrituraNP1 . LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3

    LEFTPAR         shift and go to state 110


state 84

    (82) return -> RETURN exp . returnNP1
    (83) returnNP1 -> .

    ID              reduce using rule 83 (returnNP1 -> .)
    READ            reduce using rule 83 (returnNP1 -> .)
    WRITE           reduce using rule 83 (returnNP1 -> .)
    RETURN          reduce using rule 83 (returnNP1 -> .)
    IF              reduce using rule 83 (returnNP1 -> .)
    FROM            reduce using rule 83 (returnNP1 -> .)
    RIGHTCURLY      reduce using rule 83 (returnNP1 -> .)

    returnNP1                      shift and go to state 111

state 85

    (99) exp -> exp1 . expA
    (101) expA -> . OROP operNP1 exp1 expNP1 expA
    (102) expA -> . empty
    (138) empty -> .

    OROP            shift and go to state 113
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    expA                           shift and go to state 112
    empty                          shift and go to state 114

state 86

    (103) exp1 -> exp2 . exp1A
    (105) exp1A -> . ANDOP operNP1 exp2 exp1NP1 exp1A
    (106) exp1A -> . empty
    (138) empty -> .

    ANDOP           shift and go to state 116
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    exp1A                          shift and go to state 115
    empty                          shift and go to state 117

state 87

    (107) exp2 -> exp3 . exp2A
    (108) exp2A -> . exp2B operNP1 exp3 exp2ANP1
    (109) exp2A -> . empty
    (111) exp2B -> . LESSTHANOP
    (112) exp2B -> . GREATERTHANOP
    (113) exp2B -> . DIFFERENTOP
    (114) exp2B -> . EQUALOP
    (138) empty -> .

    LESSTHANOP      shift and go to state 121
    GREATERTHANOP   shift and go to state 122
    DIFFERENTOP     shift and go to state 123
    EQUALOP         shift and go to state 124
    ANDOP           reduce using rule 138 (empty -> .)
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    exp2A                          shift and go to state 118
    exp2B                          shift and go to state 119
    empty                          shift and go to state 120

state 88

    (115) exp3 -> termino . exp3A
    (117) exp3A -> . exp3B operNP1 termino exp3NP1 exp3A
    (118) exp3A -> . empty
    (119) exp3B -> . SUMOP
    (120) exp3B -> . SUBOP
    (138) empty -> .

    SUMOP           shift and go to state 128
    SUBOP           shift and go to state 129
    LESSTHANOP      reduce using rule 138 (empty -> .)
    GREATERTHANOP   reduce using rule 138 (empty -> .)
    DIFFERENTOP     reduce using rule 138 (empty -> .)
    EQUALOP         reduce using rule 138 (empty -> .)
    ANDOP           reduce using rule 138 (empty -> .)
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    exp3A                          shift and go to state 125
    exp3B                          shift and go to state 126
    empty                          shift and go to state 127

state 89

    (121) termino -> terminoC . terminoA
    (122) terminoA -> . terminoB operNP1 terminoC terminoANP1 terminoA
    (123) terminoA -> . empty
    (125) terminoB -> . MULOP
    (126) terminoB -> . DIVOP
    (138) empty -> .

    MULOP           shift and go to state 133
    DIVOP           shift and go to state 134
    SUMOP           reduce using rule 138 (empty -> .)
    SUBOP           reduce using rule 138 (empty -> .)
    LESSTHANOP      reduce using rule 138 (empty -> .)
    GREATERTHANOP   reduce using rule 138 (empty -> .)
    DIFFERENTOP     reduce using rule 138 (empty -> .)
    EQUALOP         reduce using rule 138 (empty -> .)
    ANDOP           reduce using rule 138 (empty -> .)
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    terminoA                       shift and go to state 130
    terminoB                       shift and go to state 131
    empty                          shift and go to state 132

state 90

    (127) terminoC -> factor .

    MULOP           reduce using rule 127 (terminoC -> factor .)
    DIVOP           reduce using rule 127 (terminoC -> factor .)
    SUMOP           reduce using rule 127 (terminoC -> factor .)
    SUBOP           reduce using rule 127 (terminoC -> factor .)
    LESSTHANOP      reduce using rule 127 (terminoC -> factor .)
    GREATERTHANOP   reduce using rule 127 (terminoC -> factor .)
    DIFFERENTOP     reduce using rule 127 (terminoC -> factor .)
    EQUALOP         reduce using rule 127 (terminoC -> factor .)
    ANDOP           reduce using rule 127 (terminoC -> factor .)
    OROP            reduce using rule 127 (terminoC -> factor .)
    ID              reduce using rule 127 (terminoC -> factor .)
    READ            reduce using rule 127 (terminoC -> factor .)
    WRITE           reduce using rule 127 (terminoC -> factor .)
    RETURN          reduce using rule 127 (terminoC -> factor .)
    IF              reduce using rule 127 (terminoC -> factor .)
    FROM            reduce using rule 127 (terminoC -> factor .)
    RIGHTCURLY      reduce using rule 127 (terminoC -> factor .)
    TO              reduce using rule 127 (terminoC -> factor .)
    RIGHTPAR        reduce using rule 127 (terminoC -> factor .)
    RIGHTBRACKET    reduce using rule 127 (terminoC -> factor .)
    DO              reduce using rule 127 (terminoC -> factor .)
    COMMA           reduce using rule 127 (terminoC -> factor .)


state 91

    (128) terminoC -> llamada . checkIfNotVoid
    (129) checkIfNotVoid -> .

    MULOP           reduce using rule 129 (checkIfNotVoid -> .)
    DIVOP           reduce using rule 129 (checkIfNotVoid -> .)
    SUMOP           reduce using rule 129 (checkIfNotVoid -> .)
    SUBOP           reduce using rule 129 (checkIfNotVoid -> .)
    LESSTHANOP      reduce using rule 129 (checkIfNotVoid -> .)
    GREATERTHANOP   reduce using rule 129 (checkIfNotVoid -> .)
    DIFFERENTOP     reduce using rule 129 (checkIfNotVoid -> .)
    EQUALOP         reduce using rule 129 (checkIfNotVoid -> .)
    ANDOP           reduce using rule 129 (checkIfNotVoid -> .)
    OROP            reduce using rule 129 (checkIfNotVoid -> .)
    ID              reduce using rule 129 (checkIfNotVoid -> .)
    READ            reduce using rule 129 (checkIfNotVoid -> .)
    WRITE           reduce using rule 129 (checkIfNotVoid -> .)
    RETURN          reduce using rule 129 (checkIfNotVoid -> .)
    IF              reduce using rule 129 (checkIfNotVoid -> .)
    FROM            reduce using rule 129 (checkIfNotVoid -> .)
    RIGHTCURLY      reduce using rule 129 (checkIfNotVoid -> .)
    TO              reduce using rule 129 (checkIfNotVoid -> .)
    RIGHTPAR        reduce using rule 129 (checkIfNotVoid -> .)
    RIGHTBRACKET    reduce using rule 129 (checkIfNotVoid -> .)
    DO              reduce using rule 129 (checkIfNotVoid -> .)
    COMMA           reduce using rule 129 (checkIfNotVoid -> .)

    checkIfNotVoid                 shift and go to state 135

state 92

    (130) factor -> LEFTPAR . operNP1 exp RIGHTPAR factorNP1
    (134) operNP1 -> .

    LEFTPAR         reduce using rule 134 (operNP1 -> .)
    CTI             reduce using rule 134 (operNP1 -> .)
    CTF             reduce using rule 134 (operNP1 -> .)
    ID              reduce using rule 134 (operNP1 -> .)

    operNP1                        shift and go to state 136

state 93

    (131) factor -> CTI . factorNP2
    (136) factorNP2 -> .

    MULOP           reduce using rule 136 (factorNP2 -> .)
    DIVOP           reduce using rule 136 (factorNP2 -> .)
    SUMOP           reduce using rule 136 (factorNP2 -> .)
    SUBOP           reduce using rule 136 (factorNP2 -> .)
    LESSTHANOP      reduce using rule 136 (factorNP2 -> .)
    GREATERTHANOP   reduce using rule 136 (factorNP2 -> .)
    DIFFERENTOP     reduce using rule 136 (factorNP2 -> .)
    EQUALOP         reduce using rule 136 (factorNP2 -> .)
    ANDOP           reduce using rule 136 (factorNP2 -> .)
    OROP            reduce using rule 136 (factorNP2 -> .)
    ID              reduce using rule 136 (factorNP2 -> .)
    READ            reduce using rule 136 (factorNP2 -> .)
    WRITE           reduce using rule 136 (factorNP2 -> .)
    RETURN          reduce using rule 136 (factorNP2 -> .)
    IF              reduce using rule 136 (factorNP2 -> .)
    FROM            reduce using rule 136 (factorNP2 -> .)
    RIGHTCURLY      reduce using rule 136 (factorNP2 -> .)
    TO              reduce using rule 136 (factorNP2 -> .)
    RIGHTPAR        reduce using rule 136 (factorNP2 -> .)
    RIGHTBRACKET    reduce using rule 136 (factorNP2 -> .)
    DO              reduce using rule 136 (factorNP2 -> .)
    COMMA           reduce using rule 136 (factorNP2 -> .)

    factorNP2                      shift and go to state 137

state 94

    (132) factor -> CTF . factorNP3
    (137) factorNP3 -> .

    MULOP           reduce using rule 137 (factorNP3 -> .)
    DIVOP           reduce using rule 137 (factorNP3 -> .)
    SUMOP           reduce using rule 137 (factorNP3 -> .)
    SUBOP           reduce using rule 137 (factorNP3 -> .)
    LESSTHANOP      reduce using rule 137 (factorNP3 -> .)
    GREATERTHANOP   reduce using rule 137 (factorNP3 -> .)
    DIFFERENTOP     reduce using rule 137 (factorNP3 -> .)
    EQUALOP         reduce using rule 137 (factorNP3 -> .)
    ANDOP           reduce using rule 137 (factorNP3 -> .)
    OROP            reduce using rule 137 (factorNP3 -> .)
    ID              reduce using rule 137 (factorNP3 -> .)
    READ            reduce using rule 137 (factorNP3 -> .)
    WRITE           reduce using rule 137 (factorNP3 -> .)
    RETURN          reduce using rule 137 (factorNP3 -> .)
    IF              reduce using rule 137 (factorNP3 -> .)
    FROM            reduce using rule 137 (factorNP3 -> .)
    RIGHTCURLY      reduce using rule 137 (factorNP3 -> .)
    TO              reduce using rule 137 (factorNP3 -> .)
    RIGHTPAR        reduce using rule 137 (factorNP3 -> .)
    RIGHTBRACKET    reduce using rule 137 (factorNP3 -> .)
    DO              reduce using rule 137 (factorNP3 -> .)
    COMMA           reduce using rule 137 (factorNP3 -> .)

    factorNP3                      shift and go to state 138

state 95

    (133) factor -> variable .

    MULOP           reduce using rule 133 (factor -> variable .)
    DIVOP           reduce using rule 133 (factor -> variable .)
    SUMOP           reduce using rule 133 (factor -> variable .)
    SUBOP           reduce using rule 133 (factor -> variable .)
    LESSTHANOP      reduce using rule 133 (factor -> variable .)
    GREATERTHANOP   reduce using rule 133 (factor -> variable .)
    DIFFERENTOP     reduce using rule 133 (factor -> variable .)
    EQUALOP         reduce using rule 133 (factor -> variable .)
    ANDOP           reduce using rule 133 (factor -> variable .)
    OROP            reduce using rule 133 (factor -> variable .)
    ID              reduce using rule 133 (factor -> variable .)
    READ            reduce using rule 133 (factor -> variable .)
    WRITE           reduce using rule 133 (factor -> variable .)
    RETURN          reduce using rule 133 (factor -> variable .)
    IF              reduce using rule 133 (factor -> variable .)
    FROM            reduce using rule 133 (factor -> variable .)
    RIGHTCURLY      reduce using rule 133 (factor -> variable .)
    TO              reduce using rule 133 (factor -> variable .)
    RIGHTPAR        reduce using rule 133 (factor -> variable .)
    RIGHTBRACKET    reduce using rule 133 (factor -> variable .)
    DO              reduce using rule 133 (factor -> variable .)
    COMMA           reduce using rule 133 (factor -> variable .)


state 96

    (84) condicion -> IF LEFTPAR . exp condicionNP1 RIGHTPAR bloque condicionA
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 139
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 97

    (90) ciclo -> FROM exp . TO exp DO cicloNP1 bloque cicloNP2

    TO              shift and go to state 140


state 98

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB . RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    RIGHTPAR        shift and go to state 141


state 99

    (33) funcionB -> params .

    RIGHTPAR        reduce using rule 33 (funcionB -> params .)


state 100

    (34) funcionB -> empty .

    RIGHTPAR        reduce using rule 34 (funcionB -> empty .)


state 101

    (42) params -> tipoSimple . paramsNP1 ID paramsNP2 paramsA
    (45) paramsNP1 -> .

    ID              reduce using rule 45 (paramsNP1 -> .)

    paramsNP1                      shift and go to state 142

state 102

    (20) varsE -> COMMA ID . varsNP3 varsNP6 varsE
    (22) varsNP3 -> .

    COMMA           reduce using rule 22 (varsNP3 -> .)
    SEMICOLON       reduce using rule 22 (varsNP3 -> .)

    varsNP3                        shift and go to state 143

state 103

    (14) varsC -> LEFTBRACKET CTI varsNP4 . RIGHTBRACKET varsD

    RIGHTBRACKET    shift and go to state 144


state 104

    (60) asignacion -> variable ASSIGNOP asignacionNP1 . exp asignacionNP2
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    variable                       shift and go to state 95
    exp                            shift and go to state 145
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91

state 105

    (63) llamada -> ID llamadaNP1 LEFTPAR . loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (75) loeNP2 -> .

    LEFTPAR         reduce using rule 75 (loeNP2 -> .)
    CTI             reduce using rule 75 (loeNP2 -> .)
    CTF             reduce using rule 75 (loeNP2 -> .)
    ID              reduce using rule 75 (loeNP2 -> .)
    COMMA           reduce using rule 75 (loeNP2 -> .)
    RIGHTPAR        reduce using rule 75 (loeNP2 -> .)

    loeNP2                         shift and go to state 146

state 106

    (93) variable -> ID variableNP1 variableA .

    ASSIGNOP        reduce using rule 93 (variable -> ID variableNP1 variableA .)
    MULOP           reduce using rule 93 (variable -> ID variableNP1 variableA .)
    DIVOP           reduce using rule 93 (variable -> ID variableNP1 variableA .)
    SUMOP           reduce using rule 93 (variable -> ID variableNP1 variableA .)
    SUBOP           reduce using rule 93 (variable -> ID variableNP1 variableA .)
    LESSTHANOP      reduce using rule 93 (variable -> ID variableNP1 variableA .)
    GREATERTHANOP   reduce using rule 93 (variable -> ID variableNP1 variableA .)
    DIFFERENTOP     reduce using rule 93 (variable -> ID variableNP1 variableA .)
    EQUALOP         reduce using rule 93 (variable -> ID variableNP1 variableA .)
    ANDOP           reduce using rule 93 (variable -> ID variableNP1 variableA .)
    OROP            reduce using rule 93 (variable -> ID variableNP1 variableA .)
    ID              reduce using rule 93 (variable -> ID variableNP1 variableA .)
    READ            reduce using rule 93 (variable -> ID variableNP1 variableA .)
    WRITE           reduce using rule 93 (variable -> ID variableNP1 variableA .)
    RETURN          reduce using rule 93 (variable -> ID variableNP1 variableA .)
    IF              reduce using rule 93 (variable -> ID variableNP1 variableA .)
    FROM            reduce using rule 93 (variable -> ID variableNP1 variableA .)
    RIGHTCURLY      reduce using rule 93 (variable -> ID variableNP1 variableA .)
    TO              reduce using rule 93 (variable -> ID variableNP1 variableA .)
    RIGHTPAR        reduce using rule 93 (variable -> ID variableNP1 variableA .)
    RIGHTBRACKET    reduce using rule 93 (variable -> ID variableNP1 variableA .)
    DO              reduce using rule 93 (variable -> ID variableNP1 variableA .)
    COMMA           reduce using rule 93 (variable -> ID variableNP1 variableA .)


state 107

    (95) variableA -> LEFTBRACKET . exp RIGHTBRACKET variableB
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 147
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 108

    (96) variableA -> empty .

    ASSIGNOP        reduce using rule 96 (variableA -> empty .)
    MULOP           reduce using rule 96 (variableA -> empty .)
    DIVOP           reduce using rule 96 (variableA -> empty .)
    SUMOP           reduce using rule 96 (variableA -> empty .)
    SUBOP           reduce using rule 96 (variableA -> empty .)
    LESSTHANOP      reduce using rule 96 (variableA -> empty .)
    GREATERTHANOP   reduce using rule 96 (variableA -> empty .)
    DIFFERENTOP     reduce using rule 96 (variableA -> empty .)
    EQUALOP         reduce using rule 96 (variableA -> empty .)
    ANDOP           reduce using rule 96 (variableA -> empty .)
    OROP            reduce using rule 96 (variableA -> empty .)
    ID              reduce using rule 96 (variableA -> empty .)
    READ            reduce using rule 96 (variableA -> empty .)
    WRITE           reduce using rule 96 (variableA -> empty .)
    RETURN          reduce using rule 96 (variableA -> empty .)
    IF              reduce using rule 96 (variableA -> empty .)
    FROM            reduce using rule 96 (variableA -> empty .)
    RIGHTCURLY      reduce using rule 96 (variableA -> empty .)
    TO              reduce using rule 96 (variableA -> empty .)
    RIGHTPAR        reduce using rule 96 (variableA -> empty .)
    RIGHTBRACKET    reduce using rule 96 (variableA -> empty .)
    DO              reduce using rule 96 (variableA -> empty .)
    COMMA           reduce using rule 96 (variableA -> empty .)


state 109

    (70) read -> READ ID readNP1 .

    ID              reduce using rule 70 (read -> READ ID readNP1 .)
    READ            reduce using rule 70 (read -> READ ID readNP1 .)
    WRITE           reduce using rule 70 (read -> READ ID readNP1 .)
    RETURN          reduce using rule 70 (read -> READ ID readNP1 .)
    IF              reduce using rule 70 (read -> READ ID readNP1 .)
    FROM            reduce using rule 70 (read -> READ ID readNP1 .)
    RIGHTCURLY      reduce using rule 70 (read -> READ ID readNP1 .)


state 110

    (72) escritura -> WRITE escrituraNP1 LEFTPAR . loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (75) loeNP2 -> .

    CTSTRING        reduce using rule 75 (loeNP2 -> .)
    LEFTPAR         reduce using rule 75 (loeNP2 -> .)
    CTI             reduce using rule 75 (loeNP2 -> .)
    CTF             reduce using rule 75 (loeNP2 -> .)
    ID              reduce using rule 75 (loeNP2 -> .)

    loeNP2                         shift and go to state 148

state 111

    (82) return -> RETURN exp returnNP1 .

    ID              reduce using rule 82 (return -> RETURN exp returnNP1 .)
    READ            reduce using rule 82 (return -> RETURN exp returnNP1 .)
    WRITE           reduce using rule 82 (return -> RETURN exp returnNP1 .)
    RETURN          reduce using rule 82 (return -> RETURN exp returnNP1 .)
    IF              reduce using rule 82 (return -> RETURN exp returnNP1 .)
    FROM            reduce using rule 82 (return -> RETURN exp returnNP1 .)
    RIGHTCURLY      reduce using rule 82 (return -> RETURN exp returnNP1 .)


state 112

    (99) exp -> exp1 expA .

    ID              reduce using rule 99 (exp -> exp1 expA .)
    READ            reduce using rule 99 (exp -> exp1 expA .)
    WRITE           reduce using rule 99 (exp -> exp1 expA .)
    RETURN          reduce using rule 99 (exp -> exp1 expA .)
    IF              reduce using rule 99 (exp -> exp1 expA .)
    FROM            reduce using rule 99 (exp -> exp1 expA .)
    RIGHTCURLY      reduce using rule 99 (exp -> exp1 expA .)
    TO              reduce using rule 99 (exp -> exp1 expA .)
    RIGHTPAR        reduce using rule 99 (exp -> exp1 expA .)
    RIGHTBRACKET    reduce using rule 99 (exp -> exp1 expA .)
    DO              reduce using rule 99 (exp -> exp1 expA .)
    COMMA           reduce using rule 99 (exp -> exp1 expA .)


state 113

    (101) expA -> OROP . operNP1 exp1 expNP1 expA
    (134) operNP1 -> .

    LEFTPAR         reduce using rule 134 (operNP1 -> .)
    CTI             reduce using rule 134 (operNP1 -> .)
    CTF             reduce using rule 134 (operNP1 -> .)
    ID              reduce using rule 134 (operNP1 -> .)

    operNP1                        shift and go to state 149

state 114

    (102) expA -> empty .

    ID              reduce using rule 102 (expA -> empty .)
    READ            reduce using rule 102 (expA -> empty .)
    WRITE           reduce using rule 102 (expA -> empty .)
    RETURN          reduce using rule 102 (expA -> empty .)
    IF              reduce using rule 102 (expA -> empty .)
    FROM            reduce using rule 102 (expA -> empty .)
    RIGHTCURLY      reduce using rule 102 (expA -> empty .)
    TO              reduce using rule 102 (expA -> empty .)
    RIGHTPAR        reduce using rule 102 (expA -> empty .)
    RIGHTBRACKET    reduce using rule 102 (expA -> empty .)
    DO              reduce using rule 102 (expA -> empty .)
    COMMA           reduce using rule 102 (expA -> empty .)


state 115

    (103) exp1 -> exp2 exp1A .

    OROP            reduce using rule 103 (exp1 -> exp2 exp1A .)
    ID              reduce using rule 103 (exp1 -> exp2 exp1A .)
    READ            reduce using rule 103 (exp1 -> exp2 exp1A .)
    WRITE           reduce using rule 103 (exp1 -> exp2 exp1A .)
    RETURN          reduce using rule 103 (exp1 -> exp2 exp1A .)
    IF              reduce using rule 103 (exp1 -> exp2 exp1A .)
    FROM            reduce using rule 103 (exp1 -> exp2 exp1A .)
    RIGHTCURLY      reduce using rule 103 (exp1 -> exp2 exp1A .)
    TO              reduce using rule 103 (exp1 -> exp2 exp1A .)
    RIGHTPAR        reduce using rule 103 (exp1 -> exp2 exp1A .)
    RIGHTBRACKET    reduce using rule 103 (exp1 -> exp2 exp1A .)
    DO              reduce using rule 103 (exp1 -> exp2 exp1A .)
    COMMA           reduce using rule 103 (exp1 -> exp2 exp1A .)


state 116

    (105) exp1A -> ANDOP . operNP1 exp2 exp1NP1 exp1A
    (134) operNP1 -> .

    LEFTPAR         reduce using rule 134 (operNP1 -> .)
    CTI             reduce using rule 134 (operNP1 -> .)
    CTF             reduce using rule 134 (operNP1 -> .)
    ID              reduce using rule 134 (operNP1 -> .)

    operNP1                        shift and go to state 150

state 117

    (106) exp1A -> empty .

    OROP            reduce using rule 106 (exp1A -> empty .)
    ID              reduce using rule 106 (exp1A -> empty .)
    READ            reduce using rule 106 (exp1A -> empty .)
    WRITE           reduce using rule 106 (exp1A -> empty .)
    RETURN          reduce using rule 106 (exp1A -> empty .)
    IF              reduce using rule 106 (exp1A -> empty .)
    FROM            reduce using rule 106 (exp1A -> empty .)
    RIGHTCURLY      reduce using rule 106 (exp1A -> empty .)
    TO              reduce using rule 106 (exp1A -> empty .)
    RIGHTPAR        reduce using rule 106 (exp1A -> empty .)
    RIGHTBRACKET    reduce using rule 106 (exp1A -> empty .)
    DO              reduce using rule 106 (exp1A -> empty .)
    COMMA           reduce using rule 106 (exp1A -> empty .)


state 118

    (107) exp2 -> exp3 exp2A .

    ANDOP           reduce using rule 107 (exp2 -> exp3 exp2A .)
    OROP            reduce using rule 107 (exp2 -> exp3 exp2A .)
    ID              reduce using rule 107 (exp2 -> exp3 exp2A .)
    READ            reduce using rule 107 (exp2 -> exp3 exp2A .)
    WRITE           reduce using rule 107 (exp2 -> exp3 exp2A .)
    RETURN          reduce using rule 107 (exp2 -> exp3 exp2A .)
    IF              reduce using rule 107 (exp2 -> exp3 exp2A .)
    FROM            reduce using rule 107 (exp2 -> exp3 exp2A .)
    RIGHTCURLY      reduce using rule 107 (exp2 -> exp3 exp2A .)
    TO              reduce using rule 107 (exp2 -> exp3 exp2A .)
    RIGHTPAR        reduce using rule 107 (exp2 -> exp3 exp2A .)
    RIGHTBRACKET    reduce using rule 107 (exp2 -> exp3 exp2A .)
    DO              reduce using rule 107 (exp2 -> exp3 exp2A .)
    COMMA           reduce using rule 107 (exp2 -> exp3 exp2A .)


state 119

    (108) exp2A -> exp2B . operNP1 exp3 exp2ANP1
    (134) operNP1 -> .

    LEFTPAR         reduce using rule 134 (operNP1 -> .)
    CTI             reduce using rule 134 (operNP1 -> .)
    CTF             reduce using rule 134 (operNP1 -> .)
    ID              reduce using rule 134 (operNP1 -> .)

    operNP1                        shift and go to state 151

state 120

    (109) exp2A -> empty .

    ANDOP           reduce using rule 109 (exp2A -> empty .)
    OROP            reduce using rule 109 (exp2A -> empty .)
    ID              reduce using rule 109 (exp2A -> empty .)
    READ            reduce using rule 109 (exp2A -> empty .)
    WRITE           reduce using rule 109 (exp2A -> empty .)
    RETURN          reduce using rule 109 (exp2A -> empty .)
    IF              reduce using rule 109 (exp2A -> empty .)
    FROM            reduce using rule 109 (exp2A -> empty .)
    RIGHTCURLY      reduce using rule 109 (exp2A -> empty .)
    TO              reduce using rule 109 (exp2A -> empty .)
    RIGHTPAR        reduce using rule 109 (exp2A -> empty .)
    RIGHTBRACKET    reduce using rule 109 (exp2A -> empty .)
    DO              reduce using rule 109 (exp2A -> empty .)
    COMMA           reduce using rule 109 (exp2A -> empty .)


state 121

    (111) exp2B -> LESSTHANOP .

    LEFTPAR         reduce using rule 111 (exp2B -> LESSTHANOP .)
    CTI             reduce using rule 111 (exp2B -> LESSTHANOP .)
    CTF             reduce using rule 111 (exp2B -> LESSTHANOP .)
    ID              reduce using rule 111 (exp2B -> LESSTHANOP .)


state 122

    (112) exp2B -> GREATERTHANOP .

    LEFTPAR         reduce using rule 112 (exp2B -> GREATERTHANOP .)
    CTI             reduce using rule 112 (exp2B -> GREATERTHANOP .)
    CTF             reduce using rule 112 (exp2B -> GREATERTHANOP .)
    ID              reduce using rule 112 (exp2B -> GREATERTHANOP .)


state 123

    (113) exp2B -> DIFFERENTOP .

    LEFTPAR         reduce using rule 113 (exp2B -> DIFFERENTOP .)
    CTI             reduce using rule 113 (exp2B -> DIFFERENTOP .)
    CTF             reduce using rule 113 (exp2B -> DIFFERENTOP .)
    ID              reduce using rule 113 (exp2B -> DIFFERENTOP .)


state 124

    (114) exp2B -> EQUALOP .

    LEFTPAR         reduce using rule 114 (exp2B -> EQUALOP .)
    CTI             reduce using rule 114 (exp2B -> EQUALOP .)
    CTF             reduce using rule 114 (exp2B -> EQUALOP .)
    ID              reduce using rule 114 (exp2B -> EQUALOP .)


state 125

    (115) exp3 -> termino exp3A .

    LESSTHANOP      reduce using rule 115 (exp3 -> termino exp3A .)
    GREATERTHANOP   reduce using rule 115 (exp3 -> termino exp3A .)
    DIFFERENTOP     reduce using rule 115 (exp3 -> termino exp3A .)
    EQUALOP         reduce using rule 115 (exp3 -> termino exp3A .)
    ANDOP           reduce using rule 115 (exp3 -> termino exp3A .)
    OROP            reduce using rule 115 (exp3 -> termino exp3A .)
    ID              reduce using rule 115 (exp3 -> termino exp3A .)
    READ            reduce using rule 115 (exp3 -> termino exp3A .)
    WRITE           reduce using rule 115 (exp3 -> termino exp3A .)
    RETURN          reduce using rule 115 (exp3 -> termino exp3A .)
    IF              reduce using rule 115 (exp3 -> termino exp3A .)
    FROM            reduce using rule 115 (exp3 -> termino exp3A .)
    RIGHTCURLY      reduce using rule 115 (exp3 -> termino exp3A .)
    TO              reduce using rule 115 (exp3 -> termino exp3A .)
    RIGHTPAR        reduce using rule 115 (exp3 -> termino exp3A .)
    RIGHTBRACKET    reduce using rule 115 (exp3 -> termino exp3A .)
    DO              reduce using rule 115 (exp3 -> termino exp3A .)
    COMMA           reduce using rule 115 (exp3 -> termino exp3A .)


state 126

    (117) exp3A -> exp3B . operNP1 termino exp3NP1 exp3A
    (134) operNP1 -> .

    LEFTPAR         reduce using rule 134 (operNP1 -> .)
    CTI             reduce using rule 134 (operNP1 -> .)
    CTF             reduce using rule 134 (operNP1 -> .)
    ID              reduce using rule 134 (operNP1 -> .)

    operNP1                        shift and go to state 152

state 127

    (118) exp3A -> empty .

    LESSTHANOP      reduce using rule 118 (exp3A -> empty .)
    GREATERTHANOP   reduce using rule 118 (exp3A -> empty .)
    DIFFERENTOP     reduce using rule 118 (exp3A -> empty .)
    EQUALOP         reduce using rule 118 (exp3A -> empty .)
    ANDOP           reduce using rule 118 (exp3A -> empty .)
    OROP            reduce using rule 118 (exp3A -> empty .)
    ID              reduce using rule 118 (exp3A -> empty .)
    READ            reduce using rule 118 (exp3A -> empty .)
    WRITE           reduce using rule 118 (exp3A -> empty .)
    RETURN          reduce using rule 118 (exp3A -> empty .)
    IF              reduce using rule 118 (exp3A -> empty .)
    FROM            reduce using rule 118 (exp3A -> empty .)
    RIGHTCURLY      reduce using rule 118 (exp3A -> empty .)
    TO              reduce using rule 118 (exp3A -> empty .)
    RIGHTPAR        reduce using rule 118 (exp3A -> empty .)
    RIGHTBRACKET    reduce using rule 118 (exp3A -> empty .)
    DO              reduce using rule 118 (exp3A -> empty .)
    COMMA           reduce using rule 118 (exp3A -> empty .)


state 128

    (119) exp3B -> SUMOP .

    LEFTPAR         reduce using rule 119 (exp3B -> SUMOP .)
    CTI             reduce using rule 119 (exp3B -> SUMOP .)
    CTF             reduce using rule 119 (exp3B -> SUMOP .)
    ID              reduce using rule 119 (exp3B -> SUMOP .)


state 129

    (120) exp3B -> SUBOP .

    LEFTPAR         reduce using rule 120 (exp3B -> SUBOP .)
    CTI             reduce using rule 120 (exp3B -> SUBOP .)
    CTF             reduce using rule 120 (exp3B -> SUBOP .)
    ID              reduce using rule 120 (exp3B -> SUBOP .)


state 130

    (121) termino -> terminoC terminoA .

    SUMOP           reduce using rule 121 (termino -> terminoC terminoA .)
    SUBOP           reduce using rule 121 (termino -> terminoC terminoA .)
    LESSTHANOP      reduce using rule 121 (termino -> terminoC terminoA .)
    GREATERTHANOP   reduce using rule 121 (termino -> terminoC terminoA .)
    DIFFERENTOP     reduce using rule 121 (termino -> terminoC terminoA .)
    EQUALOP         reduce using rule 121 (termino -> terminoC terminoA .)
    ANDOP           reduce using rule 121 (termino -> terminoC terminoA .)
    OROP            reduce using rule 121 (termino -> terminoC terminoA .)
    ID              reduce using rule 121 (termino -> terminoC terminoA .)
    READ            reduce using rule 121 (termino -> terminoC terminoA .)
    WRITE           reduce using rule 121 (termino -> terminoC terminoA .)
    RETURN          reduce using rule 121 (termino -> terminoC terminoA .)
    IF              reduce using rule 121 (termino -> terminoC terminoA .)
    FROM            reduce using rule 121 (termino -> terminoC terminoA .)
    RIGHTCURLY      reduce using rule 121 (termino -> terminoC terminoA .)
    TO              reduce using rule 121 (termino -> terminoC terminoA .)
    RIGHTPAR        reduce using rule 121 (termino -> terminoC terminoA .)
    RIGHTBRACKET    reduce using rule 121 (termino -> terminoC terminoA .)
    DO              reduce using rule 121 (termino -> terminoC terminoA .)
    COMMA           reduce using rule 121 (termino -> terminoC terminoA .)


state 131

    (122) terminoA -> terminoB . operNP1 terminoC terminoANP1 terminoA
    (134) operNP1 -> .

    LEFTPAR         reduce using rule 134 (operNP1 -> .)
    CTI             reduce using rule 134 (operNP1 -> .)
    CTF             reduce using rule 134 (operNP1 -> .)
    ID              reduce using rule 134 (operNP1 -> .)

    operNP1                        shift and go to state 153

state 132

    (123) terminoA -> empty .

    SUMOP           reduce using rule 123 (terminoA -> empty .)
    SUBOP           reduce using rule 123 (terminoA -> empty .)
    LESSTHANOP      reduce using rule 123 (terminoA -> empty .)
    GREATERTHANOP   reduce using rule 123 (terminoA -> empty .)
    DIFFERENTOP     reduce using rule 123 (terminoA -> empty .)
    EQUALOP         reduce using rule 123 (terminoA -> empty .)
    ANDOP           reduce using rule 123 (terminoA -> empty .)
    OROP            reduce using rule 123 (terminoA -> empty .)
    ID              reduce using rule 123 (terminoA -> empty .)
    READ            reduce using rule 123 (terminoA -> empty .)
    WRITE           reduce using rule 123 (terminoA -> empty .)
    RETURN          reduce using rule 123 (terminoA -> empty .)
    IF              reduce using rule 123 (terminoA -> empty .)
    FROM            reduce using rule 123 (terminoA -> empty .)
    RIGHTCURLY      reduce using rule 123 (terminoA -> empty .)
    TO              reduce using rule 123 (terminoA -> empty .)
    RIGHTPAR        reduce using rule 123 (terminoA -> empty .)
    RIGHTBRACKET    reduce using rule 123 (terminoA -> empty .)
    DO              reduce using rule 123 (terminoA -> empty .)
    COMMA           reduce using rule 123 (terminoA -> empty .)


state 133

    (125) terminoB -> MULOP .

    LEFTPAR         reduce using rule 125 (terminoB -> MULOP .)
    CTI             reduce using rule 125 (terminoB -> MULOP .)
    CTF             reduce using rule 125 (terminoB -> MULOP .)
    ID              reduce using rule 125 (terminoB -> MULOP .)


state 134

    (126) terminoB -> DIVOP .

    LEFTPAR         reduce using rule 126 (terminoB -> DIVOP .)
    CTI             reduce using rule 126 (terminoB -> DIVOP .)
    CTF             reduce using rule 126 (terminoB -> DIVOP .)
    ID              reduce using rule 126 (terminoB -> DIVOP .)


state 135

    (128) terminoC -> llamada checkIfNotVoid .

    MULOP           reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    DIVOP           reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    SUMOP           reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    SUBOP           reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    LESSTHANOP      reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    GREATERTHANOP   reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    DIFFERENTOP     reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    EQUALOP         reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    ANDOP           reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    OROP            reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    ID              reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    READ            reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    WRITE           reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    RETURN          reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    IF              reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    FROM            reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    RIGHTCURLY      reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    TO              reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    RIGHTPAR        reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    RIGHTBRACKET    reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    DO              reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)
    COMMA           reduce using rule 128 (terminoC -> llamada checkIfNotVoid .)


state 136

    (130) factor -> LEFTPAR operNP1 . exp RIGHTPAR factorNP1
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 154
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 137

    (131) factor -> CTI factorNP2 .

    MULOP           reduce using rule 131 (factor -> CTI factorNP2 .)
    DIVOP           reduce using rule 131 (factor -> CTI factorNP2 .)
    SUMOP           reduce using rule 131 (factor -> CTI factorNP2 .)
    SUBOP           reduce using rule 131 (factor -> CTI factorNP2 .)
    LESSTHANOP      reduce using rule 131 (factor -> CTI factorNP2 .)
    GREATERTHANOP   reduce using rule 131 (factor -> CTI factorNP2 .)
    DIFFERENTOP     reduce using rule 131 (factor -> CTI factorNP2 .)
    EQUALOP         reduce using rule 131 (factor -> CTI factorNP2 .)
    ANDOP           reduce using rule 131 (factor -> CTI factorNP2 .)
    OROP            reduce using rule 131 (factor -> CTI factorNP2 .)
    ID              reduce using rule 131 (factor -> CTI factorNP2 .)
    READ            reduce using rule 131 (factor -> CTI factorNP2 .)
    WRITE           reduce using rule 131 (factor -> CTI factorNP2 .)
    RETURN          reduce using rule 131 (factor -> CTI factorNP2 .)
    IF              reduce using rule 131 (factor -> CTI factorNP2 .)
    FROM            reduce using rule 131 (factor -> CTI factorNP2 .)
    RIGHTCURLY      reduce using rule 131 (factor -> CTI factorNP2 .)
    TO              reduce using rule 131 (factor -> CTI factorNP2 .)
    RIGHTPAR        reduce using rule 131 (factor -> CTI factorNP2 .)
    RIGHTBRACKET    reduce using rule 131 (factor -> CTI factorNP2 .)
    DO              reduce using rule 131 (factor -> CTI factorNP2 .)
    COMMA           reduce using rule 131 (factor -> CTI factorNP2 .)


state 138

    (132) factor -> CTF factorNP3 .

    MULOP           reduce using rule 132 (factor -> CTF factorNP3 .)
    DIVOP           reduce using rule 132 (factor -> CTF factorNP3 .)
    SUMOP           reduce using rule 132 (factor -> CTF factorNP3 .)
    SUBOP           reduce using rule 132 (factor -> CTF factorNP3 .)
    LESSTHANOP      reduce using rule 132 (factor -> CTF factorNP3 .)
    GREATERTHANOP   reduce using rule 132 (factor -> CTF factorNP3 .)
    DIFFERENTOP     reduce using rule 132 (factor -> CTF factorNP3 .)
    EQUALOP         reduce using rule 132 (factor -> CTF factorNP3 .)
    ANDOP           reduce using rule 132 (factor -> CTF factorNP3 .)
    OROP            reduce using rule 132 (factor -> CTF factorNP3 .)
    ID              reduce using rule 132 (factor -> CTF factorNP3 .)
    READ            reduce using rule 132 (factor -> CTF factorNP3 .)
    WRITE           reduce using rule 132 (factor -> CTF factorNP3 .)
    RETURN          reduce using rule 132 (factor -> CTF factorNP3 .)
    IF              reduce using rule 132 (factor -> CTF factorNP3 .)
    FROM            reduce using rule 132 (factor -> CTF factorNP3 .)
    RIGHTCURLY      reduce using rule 132 (factor -> CTF factorNP3 .)
    TO              reduce using rule 132 (factor -> CTF factorNP3 .)
    RIGHTPAR        reduce using rule 132 (factor -> CTF factorNP3 .)
    RIGHTBRACKET    reduce using rule 132 (factor -> CTF factorNP3 .)
    DO              reduce using rule 132 (factor -> CTF factorNP3 .)
    COMMA           reduce using rule 132 (factor -> CTF factorNP3 .)


state 139

    (84) condicion -> IF LEFTPAR exp . condicionNP1 RIGHTPAR bloque condicionA
    (85) condicionNP1 -> .

    RIGHTPAR        reduce using rule 85 (condicionNP1 -> .)

    condicionNP1                   shift and go to state 155

state 140

    (90) ciclo -> FROM exp TO . exp DO cicloNP1 bloque cicloNP2
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 156
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 141

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR . SEMICOLON funcionC quadStart bloque genMemReqs

    SEMICOLON       shift and go to state 157


state 142

    (42) params -> tipoSimple paramsNP1 . ID paramsNP2 paramsA

    ID              shift and go to state 158


state 143

    (20) varsE -> COMMA ID varsNP3 . varsNP6 varsE
    (13) varsNP6 -> .

    COMMA           reduce using rule 13 (varsNP6 -> .)
    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 159

state 144

    (14) varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET . varsD
    (17) varsD -> . LEFTBRACKET CTI varsNP5 RIGHTBRACKET
    (18) varsD -> . empty
    (138) empty -> .

    LEFTBRACKET     shift and go to state 160
    SEMICOLON       reduce using rule 138 (empty -> .)

    varsD                          shift and go to state 161
    empty                          shift and go to state 162

state 145

    (60) asignacion -> variable ASSIGNOP asignacionNP1 exp . asignacionNP2
    (62) asignacionNP2 -> .

    ID              reduce using rule 62 (asignacionNP2 -> .)
    READ            reduce using rule 62 (asignacionNP2 -> .)
    WRITE           reduce using rule 62 (asignacionNP2 -> .)
    RETURN          reduce using rule 62 (asignacionNP2 -> .)
    IF              reduce using rule 62 (asignacionNP2 -> .)
    FROM            reduce using rule 62 (asignacionNP2 -> .)
    RIGHTCURLY      reduce using rule 62 (asignacionNP2 -> .)

    asignacionNP2                  shift and go to state 163

state 146

    (63) llamada -> ID llamadaNP1 LEFTPAR loeNP2 . primerparam llamadaA RIGHTPAR llamadaNP3
    (64) primerparam -> . exp loeNP1
    (65) primerparam -> . empty
    (99) exp -> . exp1 expA
    (138) empty -> .
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    COMMA           reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    primerparam                    shift and go to state 164
    exp                            shift and go to state 165
    empty                          shift and go to state 166
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 147

    (95) variableA -> LEFTBRACKET exp . RIGHTBRACKET variableB

    RIGHTBRACKET    shift and go to state 167


state 148

    (72) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 . escrituraA escrituraB RIGHTPAR escrituraNP3
    (76) escrituraA -> . exp loeNP1
    (77) escrituraA -> . CTSTRING escrituraNP2
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    CTSTRING        shift and go to state 170
    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    escrituraA                     shift and go to state 168
    exp                            shift and go to state 169
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 149

    (101) expA -> OROP operNP1 . exp1 expNP1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp1                           shift and go to state 171
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 150

    (105) exp1A -> ANDOP operNP1 . exp2 exp1NP1 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp2                           shift and go to state 172
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 151

    (108) exp2A -> exp2B operNP1 . exp3 exp2ANP1
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp3                           shift and go to state 173
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 152

    (117) exp3A -> exp3B operNP1 . termino exp3NP1 exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    termino                        shift and go to state 174
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 153

    (122) terminoA -> terminoB operNP1 . terminoC terminoANP1 terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    terminoC                       shift and go to state 175
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 154

    (130) factor -> LEFTPAR operNP1 exp . RIGHTPAR factorNP1

    RIGHTPAR        shift and go to state 176


state 155

    (84) condicion -> IF LEFTPAR exp condicionNP1 . RIGHTPAR bloque condicionA

    RIGHTPAR        shift and go to state 177


state 156

    (90) ciclo -> FROM exp TO exp . DO cicloNP1 bloque cicloNP2

    DO              shift and go to state 178


state 157

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON . funcionC quadStart bloque genMemReqs
    (35) funcionC -> . vars
    (36) funcionC -> . empty
    (8) vars -> . VAR varsA
    (138) empty -> .

    VAR             shift and go to state 10
    LEFTCURLY       reduce using rule 138 (empty -> .)

    funcionC                       shift and go to state 179
    vars                           shift and go to state 180
    empty                          shift and go to state 181

state 158

    (42) params -> tipoSimple paramsNP1 ID . paramsNP2 paramsA
    (46) paramsNP2 -> .

    COMMA           reduce using rule 46 (paramsNP2 -> .)
    RIGHTPAR        reduce using rule 46 (paramsNP2 -> .)

    paramsNP2                      shift and go to state 182

state 159

    (20) varsE -> COMMA ID varsNP3 varsNP6 . varsE
    (20) varsE -> . COMMA ID varsNP3 varsNP6 varsE
    (21) varsE -> . empty
    (138) empty -> .

    COMMA           shift and go to state 74
    SEMICOLON       reduce using rule 138 (empty -> .)

    varsE                          shift and go to state 183
    empty                          shift and go to state 75

state 160

    (17) varsD -> LEFTBRACKET . CTI varsNP5 RIGHTBRACKET

    CTI             shift and go to state 184


state 161

    (14) varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD .

    SEMICOLON       reduce using rule 14 (varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD .)


state 162

    (18) varsD -> empty .

    SEMICOLON       reduce using rule 18 (varsD -> empty .)


state 163

    (60) asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .

    ID              reduce using rule 60 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    READ            reduce using rule 60 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    WRITE           reduce using rule 60 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    RETURN          reduce using rule 60 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    IF              reduce using rule 60 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    FROM            reduce using rule 60 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    RIGHTCURLY      reduce using rule 60 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)


state 164

    (63) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam . llamadaA RIGHTPAR llamadaNP3
    (66) llamadaA -> . COMMA exp loeNP1 llamadaA
    (67) llamadaA -> . empty
    (138) empty -> .

    COMMA           shift and go to state 186
    RIGHTPAR        reduce using rule 138 (empty -> .)

    llamadaA                       shift and go to state 185
    empty                          shift and go to state 187

state 165

    (64) primerparam -> exp . loeNP1
    (78) loeNP1 -> .

    COMMA           reduce using rule 78 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 78 (loeNP1 -> .)

    loeNP1                         shift and go to state 188

state 166

    (65) primerparam -> empty .

    COMMA           reduce using rule 65 (primerparam -> empty .)
    RIGHTPAR        reduce using rule 65 (primerparam -> empty .)


state 167

    (95) variableA -> LEFTBRACKET exp RIGHTBRACKET . variableB
    (97) variableB -> . LEFTBRACKET exp RIGHTBRACKET
    (98) variableB -> . empty
    (138) empty -> .

    LEFTBRACKET     shift and go to state 189
    ASSIGNOP        reduce using rule 138 (empty -> .)
    MULOP           reduce using rule 138 (empty -> .)
    DIVOP           reduce using rule 138 (empty -> .)
    SUMOP           reduce using rule 138 (empty -> .)
    SUBOP           reduce using rule 138 (empty -> .)
    LESSTHANOP      reduce using rule 138 (empty -> .)
    GREATERTHANOP   reduce using rule 138 (empty -> .)
    DIFFERENTOP     reduce using rule 138 (empty -> .)
    EQUALOP         reduce using rule 138 (empty -> .)
    ANDOP           reduce using rule 138 (empty -> .)
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    variableB                      shift and go to state 190
    empty                          shift and go to state 191

state 168

    (72) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA . escrituraB RIGHTPAR escrituraNP3
    (80) escrituraB -> . COMMA escrituraA escrituraB
    (81) escrituraB -> . empty
    (138) empty -> .

    COMMA           shift and go to state 193
    RIGHTPAR        reduce using rule 138 (empty -> .)

    escrituraB                     shift and go to state 192
    empty                          shift and go to state 194

state 169

    (76) escrituraA -> exp . loeNP1
    (78) loeNP1 -> .

    COMMA           reduce using rule 78 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 78 (loeNP1 -> .)

    loeNP1                         shift and go to state 195

state 170

    (77) escrituraA -> CTSTRING . escrituraNP2
    (79) escrituraNP2 -> .

    COMMA           reduce using rule 79 (escrituraNP2 -> .)
    RIGHTPAR        reduce using rule 79 (escrituraNP2 -> .)

    escrituraNP2                   shift and go to state 196

state 171

    (101) expA -> OROP operNP1 exp1 . expNP1 expA
    (100) expNP1 -> .

    OROP            reduce using rule 100 (expNP1 -> .)
    ID              reduce using rule 100 (expNP1 -> .)
    READ            reduce using rule 100 (expNP1 -> .)
    WRITE           reduce using rule 100 (expNP1 -> .)
    RETURN          reduce using rule 100 (expNP1 -> .)
    IF              reduce using rule 100 (expNP1 -> .)
    FROM            reduce using rule 100 (expNP1 -> .)
    RIGHTCURLY      reduce using rule 100 (expNP1 -> .)
    TO              reduce using rule 100 (expNP1 -> .)
    RIGHTPAR        reduce using rule 100 (expNP1 -> .)
    RIGHTBRACKET    reduce using rule 100 (expNP1 -> .)
    DO              reduce using rule 100 (expNP1 -> .)
    COMMA           reduce using rule 100 (expNP1 -> .)

    expNP1                         shift and go to state 197

state 172

    (105) exp1A -> ANDOP operNP1 exp2 . exp1NP1 exp1A
    (104) exp1NP1 -> .

    ANDOP           reduce using rule 104 (exp1NP1 -> .)
    OROP            reduce using rule 104 (exp1NP1 -> .)
    ID              reduce using rule 104 (exp1NP1 -> .)
    READ            reduce using rule 104 (exp1NP1 -> .)
    WRITE           reduce using rule 104 (exp1NP1 -> .)
    RETURN          reduce using rule 104 (exp1NP1 -> .)
    IF              reduce using rule 104 (exp1NP1 -> .)
    FROM            reduce using rule 104 (exp1NP1 -> .)
    RIGHTCURLY      reduce using rule 104 (exp1NP1 -> .)
    TO              reduce using rule 104 (exp1NP1 -> .)
    RIGHTPAR        reduce using rule 104 (exp1NP1 -> .)
    RIGHTBRACKET    reduce using rule 104 (exp1NP1 -> .)
    DO              reduce using rule 104 (exp1NP1 -> .)
    COMMA           reduce using rule 104 (exp1NP1 -> .)

    exp1NP1                        shift and go to state 198

state 173

    (108) exp2A -> exp2B operNP1 exp3 . exp2ANP1
    (110) exp2ANP1 -> .

    ANDOP           reduce using rule 110 (exp2ANP1 -> .)
    OROP            reduce using rule 110 (exp2ANP1 -> .)
    ID              reduce using rule 110 (exp2ANP1 -> .)
    READ            reduce using rule 110 (exp2ANP1 -> .)
    WRITE           reduce using rule 110 (exp2ANP1 -> .)
    RETURN          reduce using rule 110 (exp2ANP1 -> .)
    IF              reduce using rule 110 (exp2ANP1 -> .)
    FROM            reduce using rule 110 (exp2ANP1 -> .)
    RIGHTCURLY      reduce using rule 110 (exp2ANP1 -> .)
    TO              reduce using rule 110 (exp2ANP1 -> .)
    RIGHTPAR        reduce using rule 110 (exp2ANP1 -> .)
    RIGHTBRACKET    reduce using rule 110 (exp2ANP1 -> .)
    DO              reduce using rule 110 (exp2ANP1 -> .)
    COMMA           reduce using rule 110 (exp2ANP1 -> .)

    exp2ANP1                       shift and go to state 199

state 174

    (117) exp3A -> exp3B operNP1 termino . exp3NP1 exp3A
    (116) exp3NP1 -> .

    SUMOP           reduce using rule 116 (exp3NP1 -> .)
    SUBOP           reduce using rule 116 (exp3NP1 -> .)
    LESSTHANOP      reduce using rule 116 (exp3NP1 -> .)
    GREATERTHANOP   reduce using rule 116 (exp3NP1 -> .)
    DIFFERENTOP     reduce using rule 116 (exp3NP1 -> .)
    EQUALOP         reduce using rule 116 (exp3NP1 -> .)
    ANDOP           reduce using rule 116 (exp3NP1 -> .)
    OROP            reduce using rule 116 (exp3NP1 -> .)
    ID              reduce using rule 116 (exp3NP1 -> .)
    READ            reduce using rule 116 (exp3NP1 -> .)
    WRITE           reduce using rule 116 (exp3NP1 -> .)
    RETURN          reduce using rule 116 (exp3NP1 -> .)
    IF              reduce using rule 116 (exp3NP1 -> .)
    FROM            reduce using rule 116 (exp3NP1 -> .)
    RIGHTCURLY      reduce using rule 116 (exp3NP1 -> .)
    TO              reduce using rule 116 (exp3NP1 -> .)
    RIGHTPAR        reduce using rule 116 (exp3NP1 -> .)
    RIGHTBRACKET    reduce using rule 116 (exp3NP1 -> .)
    DO              reduce using rule 116 (exp3NP1 -> .)
    COMMA           reduce using rule 116 (exp3NP1 -> .)

    exp3NP1                        shift and go to state 200

state 175

    (122) terminoA -> terminoB operNP1 terminoC . terminoANP1 terminoA
    (124) terminoANP1 -> .

    MULOP           reduce using rule 124 (terminoANP1 -> .)
    DIVOP           reduce using rule 124 (terminoANP1 -> .)
    SUMOP           reduce using rule 124 (terminoANP1 -> .)
    SUBOP           reduce using rule 124 (terminoANP1 -> .)
    LESSTHANOP      reduce using rule 124 (terminoANP1 -> .)
    GREATERTHANOP   reduce using rule 124 (terminoANP1 -> .)
    DIFFERENTOP     reduce using rule 124 (terminoANP1 -> .)
    EQUALOP         reduce using rule 124 (terminoANP1 -> .)
    ANDOP           reduce using rule 124 (terminoANP1 -> .)
    OROP            reduce using rule 124 (terminoANP1 -> .)
    ID              reduce using rule 124 (terminoANP1 -> .)
    READ            reduce using rule 124 (terminoANP1 -> .)
    WRITE           reduce using rule 124 (terminoANP1 -> .)
    RETURN          reduce using rule 124 (terminoANP1 -> .)
    IF              reduce using rule 124 (terminoANP1 -> .)
    FROM            reduce using rule 124 (terminoANP1 -> .)
    RIGHTCURLY      reduce using rule 124 (terminoANP1 -> .)
    TO              reduce using rule 124 (terminoANP1 -> .)
    RIGHTPAR        reduce using rule 124 (terminoANP1 -> .)
    RIGHTBRACKET    reduce using rule 124 (terminoANP1 -> .)
    DO              reduce using rule 124 (terminoANP1 -> .)
    COMMA           reduce using rule 124 (terminoANP1 -> .)

    terminoANP1                    shift and go to state 201

state 176

    (130) factor -> LEFTPAR operNP1 exp RIGHTPAR . factorNP1
    (135) factorNP1 -> .

    MULOP           reduce using rule 135 (factorNP1 -> .)
    DIVOP           reduce using rule 135 (factorNP1 -> .)
    SUMOP           reduce using rule 135 (factorNP1 -> .)
    SUBOP           reduce using rule 135 (factorNP1 -> .)
    LESSTHANOP      reduce using rule 135 (factorNP1 -> .)
    GREATERTHANOP   reduce using rule 135 (factorNP1 -> .)
    DIFFERENTOP     reduce using rule 135 (factorNP1 -> .)
    EQUALOP         reduce using rule 135 (factorNP1 -> .)
    ANDOP           reduce using rule 135 (factorNP1 -> .)
    OROP            reduce using rule 135 (factorNP1 -> .)
    ID              reduce using rule 135 (factorNP1 -> .)
    READ            reduce using rule 135 (factorNP1 -> .)
    WRITE           reduce using rule 135 (factorNP1 -> .)
    RETURN          reduce using rule 135 (factorNP1 -> .)
    IF              reduce using rule 135 (factorNP1 -> .)
    FROM            reduce using rule 135 (factorNP1 -> .)
    RIGHTCURLY      reduce using rule 135 (factorNP1 -> .)
    TO              reduce using rule 135 (factorNP1 -> .)
    RIGHTPAR        reduce using rule 135 (factorNP1 -> .)
    RIGHTBRACKET    reduce using rule 135 (factorNP1 -> .)
    DO              reduce using rule 135 (factorNP1 -> .)
    COMMA           reduce using rule 135 (factorNP1 -> .)

    factorNP1                      shift and go to state 202

state 177

    (84) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR . bloque condicionA
    (47) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 203

state 178

    (90) ciclo -> FROM exp TO exp DO . cicloNP1 bloque cicloNP2
    (91) cicloNP1 -> .

    LEFTCURLY       reduce using rule 91 (cicloNP1 -> .)

    cicloNP1                       shift and go to state 204

state 179

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC . quadStart bloque genMemReqs
    (26) quadStart -> .

    LEFTCURLY       reduce using rule 26 (quadStart -> .)

    quadStart                      shift and go to state 205

state 180

    (35) funcionC -> vars .

    LEFTCURLY       reduce using rule 35 (funcionC -> vars .)


state 181

    (36) funcionC -> empty .

    LEFTCURLY       reduce using rule 36 (funcionC -> empty .)


state 182

    (42) params -> tipoSimple paramsNP1 ID paramsNP2 . paramsA
    (43) paramsA -> . COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
    (44) paramsA -> . empty
    (138) empty -> .

    COMMA           shift and go to state 207
    RIGHTPAR        reduce using rule 138 (empty -> .)

    paramsA                        shift and go to state 206
    empty                          shift and go to state 208

state 183

    (20) varsE -> COMMA ID varsNP3 varsNP6 varsE .

    SEMICOLON       reduce using rule 20 (varsE -> COMMA ID varsNP3 varsNP6 varsE .)


state 184

    (17) varsD -> LEFTBRACKET CTI . varsNP5 RIGHTBRACKET
    (19) varsNP5 -> .

    RIGHTBRACKET    reduce using rule 19 (varsNP5 -> .)

    varsNP5                        shift and go to state 209

state 185

    (63) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA . RIGHTPAR llamadaNP3

    RIGHTPAR        shift and go to state 210


state 186

    (66) llamadaA -> COMMA . exp loeNP1 llamadaA
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 211
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 187

    (67) llamadaA -> empty .

    RIGHTPAR        reduce using rule 67 (llamadaA -> empty .)


state 188

    (64) primerparam -> exp loeNP1 .

    COMMA           reduce using rule 64 (primerparam -> exp loeNP1 .)
    RIGHTPAR        reduce using rule 64 (primerparam -> exp loeNP1 .)


state 189

    (97) variableB -> LEFTBRACKET . exp RIGHTBRACKET
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    exp                            shift and go to state 212
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 190

    (95) variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .

    ASSIGNOP        reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    MULOP           reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DIVOP           reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    SUMOP           reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    SUBOP           reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    LESSTHANOP      reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    GREATERTHANOP   reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DIFFERENTOP     reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    EQUALOP         reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    ANDOP           reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    OROP            reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    ID              reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    READ            reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    WRITE           reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RETURN          reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    IF              reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    FROM            reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTCURLY      reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    TO              reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTPAR        reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTBRACKET    reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DO              reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    COMMA           reduce using rule 95 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)


state 191

    (98) variableB -> empty .

    ASSIGNOP        reduce using rule 98 (variableB -> empty .)
    MULOP           reduce using rule 98 (variableB -> empty .)
    DIVOP           reduce using rule 98 (variableB -> empty .)
    SUMOP           reduce using rule 98 (variableB -> empty .)
    SUBOP           reduce using rule 98 (variableB -> empty .)
    LESSTHANOP      reduce using rule 98 (variableB -> empty .)
    GREATERTHANOP   reduce using rule 98 (variableB -> empty .)
    DIFFERENTOP     reduce using rule 98 (variableB -> empty .)
    EQUALOP         reduce using rule 98 (variableB -> empty .)
    ANDOP           reduce using rule 98 (variableB -> empty .)
    OROP            reduce using rule 98 (variableB -> empty .)
    ID              reduce using rule 98 (variableB -> empty .)
    READ            reduce using rule 98 (variableB -> empty .)
    WRITE           reduce using rule 98 (variableB -> empty .)
    RETURN          reduce using rule 98 (variableB -> empty .)
    IF              reduce using rule 98 (variableB -> empty .)
    FROM            reduce using rule 98 (variableB -> empty .)
    RIGHTCURLY      reduce using rule 98 (variableB -> empty .)
    TO              reduce using rule 98 (variableB -> empty .)
    RIGHTPAR        reduce using rule 98 (variableB -> empty .)
    RIGHTBRACKET    reduce using rule 98 (variableB -> empty .)
    DO              reduce using rule 98 (variableB -> empty .)
    COMMA           reduce using rule 98 (variableB -> empty .)


state 192

    (72) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB . RIGHTPAR escrituraNP3

    RIGHTPAR        shift and go to state 213


state 193

    (80) escrituraB -> COMMA . escrituraA escrituraB
    (76) escrituraA -> . exp loeNP1
    (77) escrituraA -> . CTSTRING escrituraNP2
    (99) exp -> . exp1 expA
    (103) exp1 -> . exp2 exp1A
    (107) exp2 -> . exp3 exp2A
    (115) exp3 -> . termino exp3A
    (121) termino -> . terminoC terminoA
    (127) terminoC -> . factor
    (128) terminoC -> . llamada checkIfNotVoid
    (130) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (131) factor -> . CTI factorNP2
    (132) factor -> . CTF factorNP3
    (133) factor -> . variable
    (63) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (93) variable -> . ID variableNP1 variableA

    CTSTRING        shift and go to state 170
    LEFTPAR         shift and go to state 92
    CTI             shift and go to state 93
    CTF             shift and go to state 94
    ID              shift and go to state 66

    escrituraA                     shift and go to state 214
    exp                            shift and go to state 169
    exp1                           shift and go to state 85
    exp2                           shift and go to state 86
    exp3                           shift and go to state 87
    termino                        shift and go to state 88
    terminoC                       shift and go to state 89
    factor                         shift and go to state 90
    llamada                        shift and go to state 91
    variable                       shift and go to state 95

state 194

    (81) escrituraB -> empty .

    RIGHTPAR        reduce using rule 81 (escrituraB -> empty .)


state 195

    (76) escrituraA -> exp loeNP1 .

    COMMA           reduce using rule 76 (escrituraA -> exp loeNP1 .)
    RIGHTPAR        reduce using rule 76 (escrituraA -> exp loeNP1 .)


state 196

    (77) escrituraA -> CTSTRING escrituraNP2 .

    COMMA           reduce using rule 77 (escrituraA -> CTSTRING escrituraNP2 .)
    RIGHTPAR        reduce using rule 77 (escrituraA -> CTSTRING escrituraNP2 .)


state 197

    (101) expA -> OROP operNP1 exp1 expNP1 . expA
    (101) expA -> . OROP operNP1 exp1 expNP1 expA
    (102) expA -> . empty
    (138) empty -> .

    OROP            shift and go to state 113
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    expA                           shift and go to state 215
    empty                          shift and go to state 114

state 198

    (105) exp1A -> ANDOP operNP1 exp2 exp1NP1 . exp1A
    (105) exp1A -> . ANDOP operNP1 exp2 exp1NP1 exp1A
    (106) exp1A -> . empty
    (138) empty -> .

    ANDOP           shift and go to state 116
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    exp1A                          shift and go to state 216
    empty                          shift and go to state 117

state 199

    (108) exp2A -> exp2B operNP1 exp3 exp2ANP1 .

    ANDOP           reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    OROP            reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    ID              reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    READ            reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    WRITE           reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RETURN          reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    IF              reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    FROM            reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTCURLY      reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    TO              reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTPAR        reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTBRACKET    reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    DO              reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    COMMA           reduce using rule 108 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)


state 200

    (117) exp3A -> exp3B operNP1 termino exp3NP1 . exp3A
    (117) exp3A -> . exp3B operNP1 termino exp3NP1 exp3A
    (118) exp3A -> . empty
    (119) exp3B -> . SUMOP
    (120) exp3B -> . SUBOP
    (138) empty -> .

    SUMOP           shift and go to state 128
    SUBOP           shift and go to state 129
    LESSTHANOP      reduce using rule 138 (empty -> .)
    GREATERTHANOP   reduce using rule 138 (empty -> .)
    DIFFERENTOP     reduce using rule 138 (empty -> .)
    EQUALOP         reduce using rule 138 (empty -> .)
    ANDOP           reduce using rule 138 (empty -> .)
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    exp3B                          shift and go to state 126
    exp3A                          shift and go to state 217
    empty                          shift and go to state 127

state 201

    (122) terminoA -> terminoB operNP1 terminoC terminoANP1 . terminoA
    (122) terminoA -> . terminoB operNP1 terminoC terminoANP1 terminoA
    (123) terminoA -> . empty
    (125) terminoB -> . MULOP
    (126) terminoB -> . DIVOP
    (138) empty -> .

    MULOP           shift and go to state 133
    DIVOP           shift and go to state 134
    SUMOP           reduce using rule 138 (empty -> .)
    SUBOP           reduce using rule 138 (empty -> .)
    LESSTHANOP      reduce using rule 138 (empty -> .)
    GREATERTHANOP   reduce using rule 138 (empty -> .)
    DIFFERENTOP     reduce using rule 138 (empty -> .)
    EQUALOP         reduce using rule 138 (empty -> .)
    ANDOP           reduce using rule 138 (empty -> .)
    OROP            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    RIGHTPAR        reduce using rule 138 (empty -> .)
    RIGHTBRACKET    reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    terminoB                       shift and go to state 131
    terminoA                       shift and go to state 218
    empty                          shift and go to state 132

state 202

    (130) factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .

    MULOP           reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DIVOP           reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    SUMOP           reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    SUBOP           reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    LESSTHANOP      reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    GREATERTHANOP   reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DIFFERENTOP     reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    EQUALOP         reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    ANDOP           reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    OROP            reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    ID              reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    READ            reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    WRITE           reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RETURN          reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    IF              reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    FROM            reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTCURLY      reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    TO              reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTPAR        reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTBRACKET    reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DO              reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    COMMA           reduce using rule 130 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)


state 203

    (84) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque . condicionA
    (86) condicionA -> . ELSE condicionANP1 bloque condicionANP2
    (87) condicionA -> . empty
    (138) empty -> .

    ELSE            shift and go to state 220
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    WRITE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    FROM            reduce using rule 138 (empty -> .)
    RIGHTCURLY      reduce using rule 138 (empty -> .)

    condicionA                     shift and go to state 219
    empty                          shift and go to state 221

state 204

    (90) ciclo -> FROM exp TO exp DO cicloNP1 . bloque cicloNP2
    (47) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 222

state 205

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart . bloque genMemReqs
    (47) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 223

state 206

    (42) params -> tipoSimple paramsNP1 ID paramsNP2 paramsA .

    RIGHTPAR        reduce using rule 42 (params -> tipoSimple paramsNP1 ID paramsNP2 paramsA .)


state 207

    (43) paramsA -> COMMA . tipoSimple paramsNP1 ID paramsNP2 paramsA
    (39) tipoSimple -> . INT tipoSimpleNP1
    (40) tipoSimple -> . FLOAT tipoSimpleNP1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    tipoSimple                     shift and go to state 224

state 208

    (44) paramsA -> empty .

    RIGHTPAR        reduce using rule 44 (paramsA -> empty .)


state 209

    (17) varsD -> LEFTBRACKET CTI varsNP5 . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 225


state 210

    (63) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR . llamadaNP3
    (69) llamadaNP3 -> .

    ID              reduce using rule 69 (llamadaNP3 -> .)
    READ            reduce using rule 69 (llamadaNP3 -> .)
    WRITE           reduce using rule 69 (llamadaNP3 -> .)
    RETURN          reduce using rule 69 (llamadaNP3 -> .)
    IF              reduce using rule 69 (llamadaNP3 -> .)
    FROM            reduce using rule 69 (llamadaNP3 -> .)
    RIGHTCURLY      reduce using rule 69 (llamadaNP3 -> .)
    MULOP           reduce using rule 69 (llamadaNP3 -> .)
    DIVOP           reduce using rule 69 (llamadaNP3 -> .)
    SUMOP           reduce using rule 69 (llamadaNP3 -> .)
    SUBOP           reduce using rule 69 (llamadaNP3 -> .)
    LESSTHANOP      reduce using rule 69 (llamadaNP3 -> .)
    GREATERTHANOP   reduce using rule 69 (llamadaNP3 -> .)
    DIFFERENTOP     reduce using rule 69 (llamadaNP3 -> .)
    EQUALOP         reduce using rule 69 (llamadaNP3 -> .)
    ANDOP           reduce using rule 69 (llamadaNP3 -> .)
    OROP            reduce using rule 69 (llamadaNP3 -> .)
    TO              reduce using rule 69 (llamadaNP3 -> .)
    RIGHTPAR        reduce using rule 69 (llamadaNP3 -> .)
    RIGHTBRACKET    reduce using rule 69 (llamadaNP3 -> .)
    DO              reduce using rule 69 (llamadaNP3 -> .)
    COMMA           reduce using rule 69 (llamadaNP3 -> .)

    llamadaNP3                     shift and go to state 226

state 211

    (66) llamadaA -> COMMA exp . loeNP1 llamadaA
    (78) loeNP1 -> .

    COMMA           reduce using rule 78 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 78 (loeNP1 -> .)

    loeNP1                         shift and go to state 227

state 212

    (97) variableB -> LEFTBRACKET exp . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 228


state 213

    (72) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR . escrituraNP3
    (74) escrituraNP3 -> .

    ID              reduce using rule 74 (escrituraNP3 -> .)
    READ            reduce using rule 74 (escrituraNP3 -> .)
    WRITE           reduce using rule 74 (escrituraNP3 -> .)
    RETURN          reduce using rule 74 (escrituraNP3 -> .)
    IF              reduce using rule 74 (escrituraNP3 -> .)
    FROM            reduce using rule 74 (escrituraNP3 -> .)
    RIGHTCURLY      reduce using rule 74 (escrituraNP3 -> .)

    escrituraNP3                   shift and go to state 229

state 214

    (80) escrituraB -> COMMA escrituraA . escrituraB
    (80) escrituraB -> . COMMA escrituraA escrituraB
    (81) escrituraB -> . empty
    (138) empty -> .

    COMMA           shift and go to state 193
    RIGHTPAR        reduce using rule 138 (empty -> .)

    escrituraB                     shift and go to state 230
    empty                          shift and go to state 194

state 215

    (101) expA -> OROP operNP1 exp1 expNP1 expA .

    ID              reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    READ            reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    WRITE           reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RETURN          reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    IF              reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    FROM            reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTCURLY      reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    TO              reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTPAR        reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTBRACKET    reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    DO              reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)
    COMMA           reduce using rule 101 (expA -> OROP operNP1 exp1 expNP1 expA .)


state 216

    (105) exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .

    OROP            reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    ID              reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    READ            reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    WRITE           reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RETURN          reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    IF              reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    FROM            reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTCURLY      reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    TO              reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTPAR        reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTBRACKET    reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    DO              reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    COMMA           reduce using rule 105 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)


state 217

    (117) exp3A -> exp3B operNP1 termino exp3NP1 exp3A .

    LESSTHANOP      reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    GREATERTHANOP   reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    DIFFERENTOP     reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    EQUALOP         reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    ANDOP           reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    OROP            reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    ID              reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    READ            reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    WRITE           reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RETURN          reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    IF              reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    FROM            reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTCURLY      reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    TO              reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTPAR        reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTBRACKET    reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    DO              reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    COMMA           reduce using rule 117 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)


state 218

    (122) terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .

    SUMOP           reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    SUBOP           reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    LESSTHANOP      reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    GREATERTHANOP   reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    DIFFERENTOP     reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    EQUALOP         reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    ANDOP           reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    OROP            reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    ID              reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    READ            reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    WRITE           reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RETURN          reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    IF              reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    FROM            reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTCURLY      reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    TO              reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTPAR        reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTBRACKET    reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    DO              reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    COMMA           reduce using rule 122 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)


state 219

    (84) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .

    ID              reduce using rule 84 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .)
    READ            reduce using rule 84 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .)
    WRITE           reduce using rule 84 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .)
    RETURN          reduce using rule 84 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .)
    IF              reduce using rule 84 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .)
    FROM            reduce using rule 84 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .)
    RIGHTCURLY      reduce using rule 84 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA .)


state 220

    (86) condicionA -> ELSE . condicionANP1 bloque condicionANP2
    (88) condicionANP1 -> .

    LEFTCURLY       reduce using rule 88 (condicionANP1 -> .)

    condicionANP1                  shift and go to state 231

state 221

    (87) condicionA -> empty .

    ID              reduce using rule 87 (condicionA -> empty .)
    READ            reduce using rule 87 (condicionA -> empty .)
    WRITE           reduce using rule 87 (condicionA -> empty .)
    RETURN          reduce using rule 87 (condicionA -> empty .)
    IF              reduce using rule 87 (condicionA -> empty .)
    FROM            reduce using rule 87 (condicionA -> empty .)
    RIGHTCURLY      reduce using rule 87 (condicionA -> empty .)


state 222

    (90) ciclo -> FROM exp TO exp DO cicloNP1 bloque . cicloNP2
    (92) cicloNP2 -> .

    ID              reduce using rule 92 (cicloNP2 -> .)
    READ            reduce using rule 92 (cicloNP2 -> .)
    WRITE           reduce using rule 92 (cicloNP2 -> .)
    RETURN          reduce using rule 92 (cicloNP2 -> .)
    IF              reduce using rule 92 (cicloNP2 -> .)
    FROM            reduce using rule 92 (cicloNP2 -> .)
    RIGHTCURLY      reduce using rule 92 (cicloNP2 -> .)

    cicloNP2                       shift and go to state 232

state 223

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque . genMemReqs
    (27) genMemReqs -> .

    FUNC            reduce using rule 27 (genMemReqs -> .)
    MAINSTART       reduce using rule 27 (genMemReqs -> .)

    genMemReqs                     shift and go to state 233

state 224

    (43) paramsA -> COMMA tipoSimple . paramsNP1 ID paramsNP2 paramsA
    (45) paramsNP1 -> .

    ID              reduce using rule 45 (paramsNP1 -> .)

    paramsNP1                      shift and go to state 234

state 225

    (17) varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET .

    SEMICOLON       reduce using rule 17 (varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET .)


state 226

    (63) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .

    ID              reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    READ            reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    WRITE           reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RETURN          reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    IF              reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    FROM            reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTCURLY      reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    MULOP           reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DIVOP           reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    SUMOP           reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    SUBOP           reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    LESSTHANOP      reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    GREATERTHANOP   reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DIFFERENTOP     reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    EQUALOP         reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    ANDOP           reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    OROP            reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    TO              reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTPAR        reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTBRACKET    reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DO              reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    COMMA           reduce using rule 63 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)


state 227

    (66) llamadaA -> COMMA exp loeNP1 . llamadaA
    (66) llamadaA -> . COMMA exp loeNP1 llamadaA
    (67) llamadaA -> . empty
    (138) empty -> .

    COMMA           shift and go to state 186
    RIGHTPAR        reduce using rule 138 (empty -> .)

    llamadaA                       shift and go to state 235
    empty                          shift and go to state 187

state 228

    (97) variableB -> LEFTBRACKET exp RIGHTBRACKET .

    ASSIGNOP        reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    MULOP           reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DIVOP           reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    SUMOP           reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    SUBOP           reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    LESSTHANOP      reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    GREATERTHANOP   reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DIFFERENTOP     reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    EQUALOP         reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    ANDOP           reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    OROP            reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    ID              reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    READ            reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    WRITE           reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RETURN          reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    IF              reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    FROM            reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTCURLY      reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    TO              reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DO              reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    COMMA           reduce using rule 97 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)


state 229

    (72) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .

    ID              reduce using rule 72 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    READ            reduce using rule 72 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    WRITE           reduce using rule 72 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    RETURN          reduce using rule 72 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    IF              reduce using rule 72 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    FROM            reduce using rule 72 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    RIGHTCURLY      reduce using rule 72 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)


state 230

    (80) escrituraB -> COMMA escrituraA escrituraB .

    RIGHTPAR        reduce using rule 80 (escrituraB -> COMMA escrituraA escrituraB .)


state 231

    (86) condicionA -> ELSE condicionANP1 . bloque condicionANP2
    (47) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 236

state 232

    (90) ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .

    ID              reduce using rule 90 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    READ            reduce using rule 90 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    WRITE           reduce using rule 90 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    RETURN          reduce using rule 90 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    IF              reduce using rule 90 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    FROM            reduce using rule 90 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    RIGHTCURLY      reduce using rule 90 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)


state 233

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .

    FUNC            reduce using rule 25 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .)
    MAINSTART       reduce using rule 25 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .)


state 234

    (43) paramsA -> COMMA tipoSimple paramsNP1 . ID paramsNP2 paramsA

    ID              shift and go to state 237


state 235

    (66) llamadaA -> COMMA exp loeNP1 llamadaA .

    RIGHTPAR        reduce using rule 66 (llamadaA -> COMMA exp loeNP1 llamadaA .)


state 236

    (86) condicionA -> ELSE condicionANP1 bloque . condicionANP2
    (89) condicionANP2 -> .

    ID              reduce using rule 89 (condicionANP2 -> .)
    READ            reduce using rule 89 (condicionANP2 -> .)
    WRITE           reduce using rule 89 (condicionANP2 -> .)
    RETURN          reduce using rule 89 (condicionANP2 -> .)
    IF              reduce using rule 89 (condicionANP2 -> .)
    FROM            reduce using rule 89 (condicionANP2 -> .)
    RIGHTCURLY      reduce using rule 89 (condicionANP2 -> .)

    condicionANP2                  shift and go to state 238

state 237

    (43) paramsA -> COMMA tipoSimple paramsNP1 ID . paramsNP2 paramsA
    (46) paramsNP2 -> .

    COMMA           reduce using rule 46 (paramsNP2 -> .)
    RIGHTPAR        reduce using rule 46 (paramsNP2 -> .)

    paramsNP2                      shift and go to state 239

state 238

    (86) condicionA -> ELSE condicionANP1 bloque condicionANP2 .

    ID              reduce using rule 86 (condicionA -> ELSE condicionANP1 bloque condicionANP2 .)
    READ            reduce using rule 86 (condicionA -> ELSE condicionANP1 bloque condicionANP2 .)
    WRITE           reduce using rule 86 (condicionA -> ELSE condicionANP1 bloque condicionANP2 .)
    RETURN          reduce using rule 86 (condicionA -> ELSE condicionANP1 bloque condicionANP2 .)
    IF              reduce using rule 86 (condicionA -> ELSE condicionANP1 bloque condicionANP2 .)
    FROM            reduce using rule 86 (condicionA -> ELSE condicionANP1 bloque condicionANP2 .)
    RIGHTCURLY      reduce using rule 86 (condicionA -> ELSE condicionANP1 bloque condicionANP2 .)


state 239

    (43) paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 . paramsA
    (43) paramsA -> . COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
    (44) paramsA -> . empty
    (138) empty -> .

    COMMA           shift and go to state 207
    RIGHTPAR        reduce using rule 138 (empty -> .)

    paramsA                        shift and go to state 240
    empty                          shift and go to state 208

state 240

    (43) paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA .

    RIGHTPAR        reduce using rule 43 (paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA .)

