Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main
Rule 2     programNP1 -> <empty>
Rule 3     programNP2 -> <empty>
Rule 4     programA -> vars
Rule 5     programA -> empty
Rule 6     programB -> funcion programB
Rule 7     programB -> empty
Rule 8     vars -> VAR varsA
Rule 9     varsA -> varsB SEMICOLON varsF
Rule 10    varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE
Rule 11    varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6
Rule 12    varsNP2 -> <empty>
Rule 13    varsNP6 -> <empty>
Rule 14    varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD
Rule 15    varsC -> empty
Rule 16    varsNP4 -> <empty>
Rule 17    varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET
Rule 18    varsD -> empty
Rule 19    varsNP5 -> <empty>
Rule 20    varsE -> COMMA ID varsNP3 varsNP6 varsE
Rule 21    varsE -> empty
Rule 22    varsNP3 -> <empty>
Rule 23    varsF -> varsA
Rule 24    varsF -> empty
Rule 25    funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
Rule 26    quadStart -> <empty>
Rule 27    genMemReqs -> <empty>
Rule 28    funcionNP1 -> <empty>
Rule 29    funcionNP2 -> <empty>
Rule 30    funcionA -> tipoSimple funcionANP1
Rule 31    funcionA -> VOID funcionANP1
Rule 32    funcionANP1 -> <empty>
Rule 33    funcionB -> params
Rule 34    funcionB -> empty
Rule 35    funcionC -> vars
Rule 36    funcionC -> empty
Rule 37    main -> MAINSTART mainNP1 bloque getGlobalMemReqs
Rule 38    getGlobalMemReqs -> <empty>
Rule 39    mainNP1 -> <empty>
Rule 40    tipoSimple -> INT tipoSimpleNP1
Rule 41    tipoSimple -> FLOAT tipoSimpleNP1
Rule 42    tipoSimpleNP1 -> <empty>
Rule 43    params -> tipoSimple paramsNP1 ID paramsNP2 paramsA
Rule 44    paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
Rule 45    paramsA -> empty
Rule 46    paramsNP1 -> <empty>
Rule 47    paramsNP2 -> <empty>
Rule 48    bloque -> LEFTCURLY bloqueA RIGHTCURLY
Rule 49    bloqueA -> estatuto bloqueA
Rule 50    bloqueA -> empty
Rule 51    estatuto -> estatutoNP1 estatutoA
Rule 52    estatutoA -> asignacion
Rule 53    estatutoA -> llamada checkIfVoid
Rule 54    estatutoA -> read
Rule 55    estatutoA -> escritura
Rule 56    estatutoA -> return
Rule 57    estatutoA -> condicion
Rule 58    estatutoA -> ciclo
Rule 59    checkIfVoid -> <empty>
Rule 60    estatutoNP1 -> <empty>
Rule 61    asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2
Rule 62    asignacionNP1 -> <empty>
Rule 63    asignacionNP2 -> <empty>
Rule 64    llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
Rule 65    primerparam -> exp loeNP1
Rule 66    primerparam -> empty
Rule 67    llamadaA -> COMMA exp loeNP1 llamadaA
Rule 68    llamadaA -> empty
Rule 69    llamadaNP1 -> <empty>
Rule 70    llamadaNP3 -> <empty>
Rule 71    read -> READ ID readNP1
Rule 72    readNP1 -> <empty>
Rule 73    escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
Rule 74    escrituraNP1 -> <empty>
Rule 75    escrituraNP3 -> <empty>
Rule 76    loeNP2 -> <empty>
Rule 77    escrituraA -> exp loeNP1
Rule 78    escrituraA -> CTSTRING escrituraNP2
Rule 79    loeNP1 -> <empty>
Rule 80    escrituraNP2 -> <empty>
Rule 81    escrituraB -> COMMA escrituraA escrituraB
Rule 82    escrituraB -> empty
Rule 83    return -> RETURN exp returnNP1
Rule 84    returnNP1 -> <empty>
Rule 85    condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2
Rule 86    condicionNP1 -> <empty>
Rule 87    condicionA -> ELSE condicionANP1 bloque
Rule 88    condicionA -> empty
Rule 89    condicionANP1 -> <empty>
Rule 90    condicionANP2 -> <empty>
Rule 91    ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2
Rule 92    cicloNP1 -> <empty>
Rule 93    cicloNP2 -> <empty>
Rule 94    variable -> ID variableNP1 variableA
Rule 95    variableNP1 -> <empty>
Rule 96    variableA -> LEFTBRACKET exp RIGHTBRACKET variableB
Rule 97    variableA -> empty
Rule 98    variableB -> LEFTBRACKET exp RIGHTBRACKET
Rule 99    variableB -> empty
Rule 100   exp -> exp1 expA
Rule 101   expNP1 -> <empty>
Rule 102   expA -> OROP operNP1 exp1 expNP1 expA
Rule 103   expA -> empty
Rule 104   exp1 -> exp2 exp1A
Rule 105   exp1NP1 -> <empty>
Rule 106   exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A
Rule 107   exp1A -> empty
Rule 108   exp2 -> exp3 exp2A
Rule 109   exp2A -> exp2B operNP1 exp3 exp2ANP1
Rule 110   exp2A -> empty
Rule 111   exp2ANP1 -> <empty>
Rule 112   exp2B -> LESSTHANOP
Rule 113   exp2B -> GREATERTHANOP
Rule 114   exp2B -> DIFFERENTOP
Rule 115   exp2B -> EQUALOP
Rule 116   exp3 -> termino exp3A
Rule 117   exp3NP1 -> <empty>
Rule 118   exp3A -> exp3B operNP1 termino exp3NP1 exp3A
Rule 119   exp3A -> empty
Rule 120   exp3B -> SUMOP
Rule 121   exp3B -> SUBOP
Rule 122   termino -> terminoC terminoA
Rule 123   terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA
Rule 124   terminoA -> empty
Rule 125   terminoANP1 -> <empty>
Rule 126   terminoB -> MULOP
Rule 127   terminoB -> DIVOP
Rule 128   terminoC -> factor
Rule 129   terminoC -> llamada checkIfNotVoid
Rule 130   checkIfNotVoid -> <empty>
Rule 131   factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1
Rule 132   factor -> CTI factorNP2
Rule 133   factor -> CTF factorNP3
Rule 134   factor -> variable
Rule 135   operNP1 -> <empty>
Rule 136   factorNP1 -> <empty>
Rule 137   factorNP2 -> <empty>
Rule 138   factorNP3 -> <empty>
Rule 139   empty -> <empty>

Terminals, with rules where they appear

ANDOP                : 106
ASSIGNOP             : 61
COMMA                : 20 44 67 81
CTF                  : 133
CTI                  : 14 17 132
CTSTRING             : 78
DIFFERENTOP          : 114
DIVOP                : 127
DO                   : 91
ELSE                 : 87
EQUALOP              : 115
FILE                 : 10
FLOAT                : 41
FROM                 : 91
FUNC                 : 25
GREATERTHANOP        : 113
ID                   : 1 10 11 20 25 43 44 64 71 94
IF                   : 85
INT                  : 40
LEFTBRACKET          : 14 17 96 98
LEFTCURLY            : 48
LEFTPAR              : 25 64 73 85 131
LESSTHANOP           : 112
MAINSTART            : 37
MULOP                : 126
OROP                 : 102
PROGRAM              : 1
READ                 : 71
RETURN               : 83
RIGHTBRACKET         : 14 17 96 98
RIGHTCURLY           : 48
RIGHTPAR             : 25 64 73 85 131
SEMICOLON            : 1 9 25
SUBOP                : 121
SUMOP                : 120
TO                   : 91
VAR                  : 8
VOID                 : 31
WRITE                : 73
error                : 

Nonterminals, with rules where they appear

asignacion           : 52
asignacionNP1        : 61
asignacionNP2        : 61
bloque               : 25 37 85 87 91
bloqueA              : 48 49
checkIfNotVoid       : 129
checkIfVoid          : 53
ciclo                : 58
cicloNP1             : 91
cicloNP2             : 91
condicion            : 57
condicionA           : 85
condicionANP1        : 87
condicionANP2        : 85
condicionNP1         : 85
empty                : 5 7 15 18 21 24 34 36 45 50 66 68 82 88 97 99 103 107 110 119 124
escritura            : 55
escrituraA           : 73 81
escrituraB           : 73 81
escrituraNP1         : 73
escrituraNP2         : 78
escrituraNP3         : 73
estatuto             : 49
estatutoA            : 51
estatutoNP1          : 51
exp                  : 61 65 67 77 83 85 91 91 96 98 131
exp1                 : 100 102
exp1A                : 104 106
exp1NP1              : 106
exp2                 : 104 106
exp2A                : 108
exp2ANP1             : 109
exp2B                : 109
exp3                 : 108 109
exp3A                : 116 118
exp3B                : 118
exp3NP1              : 118
expA                 : 100 102
expNP1               : 102
factor               : 128
factorNP1            : 131
factorNP2            : 132
factorNP3            : 133
funcion              : 6
funcionA             : 25
funcionANP1          : 30 31
funcionB             : 25
funcionC             : 25
funcionNP1           : 25
funcionNP2           : 25
genMemReqs           : 25
getGlobalMemReqs     : 37
llamada              : 53 129
llamadaA             : 64 67
llamadaNP1           : 64
llamadaNP3           : 64
loeNP1               : 65 67 77
loeNP2               : 64 73
main                 : 1
mainNP1              : 37
operNP1              : 102 106 109 118 123 131
params               : 33
paramsA              : 43 44
paramsNP1            : 43 44
paramsNP2            : 43 44
primerparam          : 64
program              : 0
programA             : 1
programB             : 1 6
programNP1           : 1
programNP2           : 1
quadStart            : 25
read                 : 54
readNP1              : 71
return               : 56
returnNP1            : 83
termino              : 116 118
terminoA             : 122 123
terminoANP1          : 123
terminoB             : 123
terminoC             : 122 123
tipoSimple           : 11 30 43 44
tipoSimpleNP1        : 40 41
variable             : 61 134
variableA            : 94
variableB            : 96
variableNP1          : 94
vars                 : 4 35
varsA                : 8 23
varsB                : 9
varsC                : 11
varsD                : 14
varsE                : 10 20
varsF                : 9
varsNP2              : 10 11
varsNP3              : 10 11 20
varsNP4              : 14
varsNP5              : 17
varsNP6              : 10 11 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . programNP1 ID programNP2 SEMICOLON programA programB main
    (2) programNP1 -> .

    ID              reduce using rule 2 (programNP1 -> .)

    programNP1                     shift and go to state 3

state 3

    (1) program -> PROGRAM programNP1 . ID programNP2 SEMICOLON programA programB main

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM programNP1 ID . programNP2 SEMICOLON programA programB main
    (3) programNP2 -> .

    SEMICOLON       reduce using rule 3 (programNP2 -> .)

    programNP2                     shift and go to state 5

state 5

    (1) program -> PROGRAM programNP1 ID programNP2 . SEMICOLON programA programB main

    SEMICOLON       shift and go to state 6


state 6

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON . programA programB main
    (4) programA -> . vars
    (5) programA -> . empty
    (8) vars -> . VAR varsA
    (139) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 139 (empty -> .)
    MAINSTART       reduce using rule 139 (empty -> .)

    programA                       shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 7

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA . programB main
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (25) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (139) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 139 (empty -> .)

    programB                       shift and go to state 11
    funcion                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (4) programA -> vars .

    FUNC            reduce using rule 4 (programA -> vars .)
    MAINSTART       reduce using rule 4 (programA -> vars .)


state 9

    (5) programA -> empty .

    FUNC            reduce using rule 5 (programA -> empty .)
    MAINSTART       reduce using rule 5 (programA -> empty .)


state 10

    (8) vars -> VAR . varsA
    (9) varsA -> . varsB SEMICOLON varsF
    (10) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (11) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (40) tipoSimple -> . INT tipoSimpleNP1
    (41) tipoSimple -> . FLOAT tipoSimpleNP1

    FILE            shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    varsA                          shift and go to state 15
    varsB                          shift and go to state 16
    tipoSimple                     shift and go to state 18

state 11

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB . main
    (37) main -> . MAINSTART mainNP1 bloque getGlobalMemReqs

    MAINSTART       shift and go to state 22

    main                           shift and go to state 21

state 12

    (6) programB -> funcion . programB
    (6) programB -> . funcion programB
    (7) programB -> . empty
    (25) funcion -> . FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (139) empty -> .

    FUNC            shift and go to state 14
    MAINSTART       reduce using rule 139 (empty -> .)

    funcion                        shift and go to state 12
    programB                       shift and go to state 23
    empty                          shift and go to state 13

state 13

    (7) programB -> empty .

    MAINSTART       reduce using rule 7 (programB -> empty .)


state 14

    (25) funcion -> FUNC . funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (30) funcionA -> . tipoSimple funcionANP1
    (31) funcionA -> . VOID funcionANP1
    (40) tipoSimple -> . INT tipoSimpleNP1
    (41) tipoSimple -> . FLOAT tipoSimpleNP1

    VOID            shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    funcionA                       shift and go to state 24
    tipoSimple                     shift and go to state 25

state 15

    (8) vars -> VAR varsA .

    FUNC            reduce using rule 8 (vars -> VAR varsA .)
    MAINSTART       reduce using rule 8 (vars -> VAR varsA .)
    LEFTCURLY       reduce using rule 8 (vars -> VAR varsA .)


state 16

    (9) varsA -> varsB . SEMICOLON varsF

    SEMICOLON       shift and go to state 27


state 17

    (10) varsB -> FILE . varsNP2 ID varsNP3 varsNP6 varsE
    (12) varsNP2 -> .

    ID              reduce using rule 12 (varsNP2 -> .)

    varsNP2                        shift and go to state 28

state 18

    (11) varsB -> tipoSimple . varsNP2 ID varsNP3 varsC varsNP6
    (12) varsNP2 -> .

    ID              reduce using rule 12 (varsNP2 -> .)

    varsNP2                        shift and go to state 29

state 19

    (40) tipoSimple -> INT . tipoSimpleNP1
    (42) tipoSimpleNP1 -> .

    ID              reduce using rule 42 (tipoSimpleNP1 -> .)

    tipoSimpleNP1                  shift and go to state 30

state 20

    (41) tipoSimple -> FLOAT . tipoSimpleNP1
    (42) tipoSimpleNP1 -> .

    ID              reduce using rule 42 (tipoSimpleNP1 -> .)

    tipoSimpleNP1                  shift and go to state 31

state 21

    (1) program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .

    $end            reduce using rule 1 (program -> PROGRAM programNP1 ID programNP2 SEMICOLON programA programB main .)


state 22

    (37) main -> MAINSTART . mainNP1 bloque getGlobalMemReqs
    (39) mainNP1 -> .

    LEFTCURLY       reduce using rule 39 (mainNP1 -> .)

    mainNP1                        shift and go to state 32

state 23

    (6) programB -> funcion programB .

    MAINSTART       reduce using rule 6 (programB -> funcion programB .)


state 24

    (25) funcion -> FUNC funcionA . funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (28) funcionNP1 -> .

    ID              reduce using rule 28 (funcionNP1 -> .)

    funcionNP1                     shift and go to state 33

state 25

    (30) funcionA -> tipoSimple . funcionANP1
    (32) funcionANP1 -> .

    ID              reduce using rule 32 (funcionANP1 -> .)

    funcionANP1                    shift and go to state 34

state 26

    (31) funcionA -> VOID . funcionANP1
    (32) funcionANP1 -> .

    ID              reduce using rule 32 (funcionANP1 -> .)

    funcionANP1                    shift and go to state 35

state 27

    (9) varsA -> varsB SEMICOLON . varsF
    (23) varsF -> . varsA
    (24) varsF -> . empty
    (9) varsA -> . varsB SEMICOLON varsF
    (139) empty -> .
    (10) varsB -> . FILE varsNP2 ID varsNP3 varsNP6 varsE
    (11) varsB -> . tipoSimple varsNP2 ID varsNP3 varsC varsNP6
    (40) tipoSimple -> . INT tipoSimpleNP1
    (41) tipoSimple -> . FLOAT tipoSimpleNP1

    FUNC            reduce using rule 139 (empty -> .)
    MAINSTART       reduce using rule 139 (empty -> .)
    LEFTCURLY       reduce using rule 139 (empty -> .)
    FILE            shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    varsB                          shift and go to state 16
    varsF                          shift and go to state 36
    varsA                          shift and go to state 37
    empty                          shift and go to state 38
    tipoSimple                     shift and go to state 18

state 28

    (10) varsB -> FILE varsNP2 . ID varsNP3 varsNP6 varsE

    ID              shift and go to state 39


state 29

    (11) varsB -> tipoSimple varsNP2 . ID varsNP3 varsC varsNP6

    ID              shift and go to state 40


state 30

    (40) tipoSimple -> INT tipoSimpleNP1 .

    ID              reduce using rule 40 (tipoSimple -> INT tipoSimpleNP1 .)


state 31

    (41) tipoSimple -> FLOAT tipoSimpleNP1 .

    ID              reduce using rule 41 (tipoSimple -> FLOAT tipoSimpleNP1 .)


state 32

    (37) main -> MAINSTART mainNP1 . bloque getGlobalMemReqs
    (48) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 41

state 33

    (25) funcion -> FUNC funcionA funcionNP1 . ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    ID              shift and go to state 43


state 34

    (30) funcionA -> tipoSimple funcionANP1 .

    ID              reduce using rule 30 (funcionA -> tipoSimple funcionANP1 .)


state 35

    (31) funcionA -> VOID funcionANP1 .

    ID              reduce using rule 31 (funcionA -> VOID funcionANP1 .)


state 36

    (9) varsA -> varsB SEMICOLON varsF .

    FUNC            reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)
    MAINSTART       reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)
    LEFTCURLY       reduce using rule 9 (varsA -> varsB SEMICOLON varsF .)


state 37

    (23) varsF -> varsA .

    FUNC            reduce using rule 23 (varsF -> varsA .)
    MAINSTART       reduce using rule 23 (varsF -> varsA .)
    LEFTCURLY       reduce using rule 23 (varsF -> varsA .)


state 38

    (24) varsF -> empty .

    FUNC            reduce using rule 24 (varsF -> empty .)
    MAINSTART       reduce using rule 24 (varsF -> empty .)
    LEFTCURLY       reduce using rule 24 (varsF -> empty .)


state 39

    (10) varsB -> FILE varsNP2 ID . varsNP3 varsNP6 varsE
    (22) varsNP3 -> .

    COMMA           reduce using rule 22 (varsNP3 -> .)
    SEMICOLON       reduce using rule 22 (varsNP3 -> .)

    varsNP3                        shift and go to state 44

state 40

    (11) varsB -> tipoSimple varsNP2 ID . varsNP3 varsC varsNP6
    (22) varsNP3 -> .

    LEFTBRACKET     reduce using rule 22 (varsNP3 -> .)
    SEMICOLON       reduce using rule 22 (varsNP3 -> .)

    varsNP3                        shift and go to state 45

state 41

    (37) main -> MAINSTART mainNP1 bloque . getGlobalMemReqs
    (38) getGlobalMemReqs -> .

    $end            reduce using rule 38 (getGlobalMemReqs -> .)

    getGlobalMemReqs               shift and go to state 46

state 42

    (48) bloque -> LEFTCURLY . bloqueA RIGHTCURLY
    (49) bloqueA -> . estatuto bloqueA
    (50) bloqueA -> . empty
    (51) estatuto -> . estatutoNP1 estatutoA
    (139) empty -> .
    (60) estatutoNP1 -> .

    RIGHTCURLY      reduce using rule 139 (empty -> .)
    ID              reduce using rule 60 (estatutoNP1 -> .)
    READ            reduce using rule 60 (estatutoNP1 -> .)
    WRITE           reduce using rule 60 (estatutoNP1 -> .)
    RETURN          reduce using rule 60 (estatutoNP1 -> .)
    IF              reduce using rule 60 (estatutoNP1 -> .)
    FROM            reduce using rule 60 (estatutoNP1 -> .)

    bloqueA                        shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    estatutoNP1                    shift and go to state 50

state 43

    (25) funcion -> FUNC funcionA funcionNP1 ID . funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (29) funcionNP2 -> .

    LEFTPAR         reduce using rule 29 (funcionNP2 -> .)

    funcionNP2                     shift and go to state 51

state 44

    (10) varsB -> FILE varsNP2 ID varsNP3 . varsNP6 varsE
    (13) varsNP6 -> .

    COMMA           reduce using rule 13 (varsNP6 -> .)
    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 52

state 45

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 . varsC varsNP6
    (14) varsC -> . LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD
    (15) varsC -> . empty
    (139) empty -> .

    LEFTBRACKET     shift and go to state 54
    SEMICOLON       reduce using rule 139 (empty -> .)

    varsC                          shift and go to state 53
    empty                          shift and go to state 55

state 46

    (37) main -> MAINSTART mainNP1 bloque getGlobalMemReqs .

    $end            reduce using rule 37 (main -> MAINSTART mainNP1 bloque getGlobalMemReqs .)


state 47

    (48) bloque -> LEFTCURLY bloqueA . RIGHTCURLY

    RIGHTCURLY      shift and go to state 56


state 48

    (49) bloqueA -> estatuto . bloqueA
    (49) bloqueA -> . estatuto bloqueA
    (50) bloqueA -> . empty
    (51) estatuto -> . estatutoNP1 estatutoA
    (139) empty -> .
    (60) estatutoNP1 -> .

    RIGHTCURLY      reduce using rule 139 (empty -> .)
    ID              reduce using rule 60 (estatutoNP1 -> .)
    READ            reduce using rule 60 (estatutoNP1 -> .)
    WRITE           reduce using rule 60 (estatutoNP1 -> .)
    RETURN          reduce using rule 60 (estatutoNP1 -> .)
    IF              reduce using rule 60 (estatutoNP1 -> .)
    FROM            reduce using rule 60 (estatutoNP1 -> .)

    estatuto                       shift and go to state 48
    bloqueA                        shift and go to state 57
    empty                          shift and go to state 49
    estatutoNP1                    shift and go to state 50

state 49

    (50) bloqueA -> empty .

    RIGHTCURLY      reduce using rule 50 (bloqueA -> empty .)


state 50

    (51) estatuto -> estatutoNP1 . estatutoA
    (52) estatutoA -> . asignacion
    (53) estatutoA -> . llamada checkIfVoid
    (54) estatutoA -> . read
    (55) estatutoA -> . escritura
    (56) estatutoA -> . return
    (57) estatutoA -> . condicion
    (58) estatutoA -> . ciclo
    (61) asignacion -> . variable ASSIGNOP asignacionNP1 exp asignacionNP2
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (71) read -> . READ ID readNP1
    (73) escritura -> . WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (83) return -> . RETURN exp returnNP1
    (85) condicion -> . IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2
    (91) ciclo -> . FROM exp TO exp DO cicloNP1 bloque cicloNP2
    (94) variable -> . ID variableNP1 variableA

    ID              shift and go to state 67
    READ            shift and go to state 68
    WRITE           shift and go to state 69
    RETURN          shift and go to state 70
    IF              shift and go to state 71
    FROM            shift and go to state 72

    estatutoA                      shift and go to state 58
    asignacion                     shift and go to state 59
    llamada                        shift and go to state 60
    read                           shift and go to state 61
    escritura                      shift and go to state 62
    return                         shift and go to state 63
    condicion                      shift and go to state 64
    ciclo                          shift and go to state 65
    variable                       shift and go to state 66

state 51

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 . LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    LEFTPAR         shift and go to state 73


state 52

    (10) varsB -> FILE varsNP2 ID varsNP3 varsNP6 . varsE
    (20) varsE -> . COMMA ID varsNP3 varsNP6 varsE
    (21) varsE -> . empty
    (139) empty -> .

    COMMA           shift and go to state 75
    SEMICOLON       reduce using rule 139 (empty -> .)

    varsE                          shift and go to state 74
    empty                          shift and go to state 76

state 53

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 varsC . varsNP6
    (13) varsNP6 -> .

    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 77

state 54

    (14) varsC -> LEFTBRACKET . CTI varsNP4 RIGHTBRACKET varsD

    CTI             shift and go to state 78


state 55

    (15) varsC -> empty .

    SEMICOLON       reduce using rule 15 (varsC -> empty .)


state 56

    (48) bloque -> LEFTCURLY bloqueA RIGHTCURLY .

    $end            reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ELSE            reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    ID              reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    READ            reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    WRITE           reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    RETURN          reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    IF              reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FROM            reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    RIGHTCURLY      reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    FUNC            reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)
    MAINSTART       reduce using rule 48 (bloque -> LEFTCURLY bloqueA RIGHTCURLY .)


state 57

    (49) bloqueA -> estatuto bloqueA .

    RIGHTCURLY      reduce using rule 49 (bloqueA -> estatuto bloqueA .)


state 58

    (51) estatuto -> estatutoNP1 estatutoA .

    ID              reduce using rule 51 (estatuto -> estatutoNP1 estatutoA .)
    READ            reduce using rule 51 (estatuto -> estatutoNP1 estatutoA .)
    WRITE           reduce using rule 51 (estatuto -> estatutoNP1 estatutoA .)
    RETURN          reduce using rule 51 (estatuto -> estatutoNP1 estatutoA .)
    IF              reduce using rule 51 (estatuto -> estatutoNP1 estatutoA .)
    FROM            reduce using rule 51 (estatuto -> estatutoNP1 estatutoA .)
    RIGHTCURLY      reduce using rule 51 (estatuto -> estatutoNP1 estatutoA .)


state 59

    (52) estatutoA -> asignacion .

    ID              reduce using rule 52 (estatutoA -> asignacion .)
    READ            reduce using rule 52 (estatutoA -> asignacion .)
    WRITE           reduce using rule 52 (estatutoA -> asignacion .)
    RETURN          reduce using rule 52 (estatutoA -> asignacion .)
    IF              reduce using rule 52 (estatutoA -> asignacion .)
    FROM            reduce using rule 52 (estatutoA -> asignacion .)
    RIGHTCURLY      reduce using rule 52 (estatutoA -> asignacion .)


state 60

    (53) estatutoA -> llamada . checkIfVoid
    (59) checkIfVoid -> .

    ID              reduce using rule 59 (checkIfVoid -> .)
    READ            reduce using rule 59 (checkIfVoid -> .)
    WRITE           reduce using rule 59 (checkIfVoid -> .)
    RETURN          reduce using rule 59 (checkIfVoid -> .)
    IF              reduce using rule 59 (checkIfVoid -> .)
    FROM            reduce using rule 59 (checkIfVoid -> .)
    RIGHTCURLY      reduce using rule 59 (checkIfVoid -> .)

    checkIfVoid                    shift and go to state 79

state 61

    (54) estatutoA -> read .

    ID              reduce using rule 54 (estatutoA -> read .)
    READ            reduce using rule 54 (estatutoA -> read .)
    WRITE           reduce using rule 54 (estatutoA -> read .)
    RETURN          reduce using rule 54 (estatutoA -> read .)
    IF              reduce using rule 54 (estatutoA -> read .)
    FROM            reduce using rule 54 (estatutoA -> read .)
    RIGHTCURLY      reduce using rule 54 (estatutoA -> read .)


state 62

    (55) estatutoA -> escritura .

    ID              reduce using rule 55 (estatutoA -> escritura .)
    READ            reduce using rule 55 (estatutoA -> escritura .)
    WRITE           reduce using rule 55 (estatutoA -> escritura .)
    RETURN          reduce using rule 55 (estatutoA -> escritura .)
    IF              reduce using rule 55 (estatutoA -> escritura .)
    FROM            reduce using rule 55 (estatutoA -> escritura .)
    RIGHTCURLY      reduce using rule 55 (estatutoA -> escritura .)


state 63

    (56) estatutoA -> return .

    ID              reduce using rule 56 (estatutoA -> return .)
    READ            reduce using rule 56 (estatutoA -> return .)
    WRITE           reduce using rule 56 (estatutoA -> return .)
    RETURN          reduce using rule 56 (estatutoA -> return .)
    IF              reduce using rule 56 (estatutoA -> return .)
    FROM            reduce using rule 56 (estatutoA -> return .)
    RIGHTCURLY      reduce using rule 56 (estatutoA -> return .)


state 64

    (57) estatutoA -> condicion .

    ID              reduce using rule 57 (estatutoA -> condicion .)
    READ            reduce using rule 57 (estatutoA -> condicion .)
    WRITE           reduce using rule 57 (estatutoA -> condicion .)
    RETURN          reduce using rule 57 (estatutoA -> condicion .)
    IF              reduce using rule 57 (estatutoA -> condicion .)
    FROM            reduce using rule 57 (estatutoA -> condicion .)
    RIGHTCURLY      reduce using rule 57 (estatutoA -> condicion .)


state 65

    (58) estatutoA -> ciclo .

    ID              reduce using rule 58 (estatutoA -> ciclo .)
    READ            reduce using rule 58 (estatutoA -> ciclo .)
    WRITE           reduce using rule 58 (estatutoA -> ciclo .)
    RETURN          reduce using rule 58 (estatutoA -> ciclo .)
    IF              reduce using rule 58 (estatutoA -> ciclo .)
    FROM            reduce using rule 58 (estatutoA -> ciclo .)
    RIGHTCURLY      reduce using rule 58 (estatutoA -> ciclo .)


state 66

    (61) asignacion -> variable . ASSIGNOP asignacionNP1 exp asignacionNP2

    ASSIGNOP        shift and go to state 80


state 67

    (64) llamada -> ID . llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> ID . variableNP1 variableA
    (69) llamadaNP1 -> .
    (95) variableNP1 -> .

    LEFTPAR         reduce using rule 69 (llamadaNP1 -> .)
    LEFTBRACKET     reduce using rule 95 (variableNP1 -> .)
    ASSIGNOP        reduce using rule 95 (variableNP1 -> .)
    MULOP           reduce using rule 95 (variableNP1 -> .)
    DIVOP           reduce using rule 95 (variableNP1 -> .)
    SUMOP           reduce using rule 95 (variableNP1 -> .)
    SUBOP           reduce using rule 95 (variableNP1 -> .)
    LESSTHANOP      reduce using rule 95 (variableNP1 -> .)
    GREATERTHANOP   reduce using rule 95 (variableNP1 -> .)
    DIFFERENTOP     reduce using rule 95 (variableNP1 -> .)
    EQUALOP         reduce using rule 95 (variableNP1 -> .)
    ANDOP           reduce using rule 95 (variableNP1 -> .)
    OROP            reduce using rule 95 (variableNP1 -> .)
    ID              reduce using rule 95 (variableNP1 -> .)
    READ            reduce using rule 95 (variableNP1 -> .)
    WRITE           reduce using rule 95 (variableNP1 -> .)
    RETURN          reduce using rule 95 (variableNP1 -> .)
    IF              reduce using rule 95 (variableNP1 -> .)
    FROM            reduce using rule 95 (variableNP1 -> .)
    RIGHTCURLY      reduce using rule 95 (variableNP1 -> .)
    TO              reduce using rule 95 (variableNP1 -> .)
    RIGHTPAR        reduce using rule 95 (variableNP1 -> .)
    RIGHTBRACKET    reduce using rule 95 (variableNP1 -> .)
    DO              reduce using rule 95 (variableNP1 -> .)
    COMMA           reduce using rule 95 (variableNP1 -> .)

    llamadaNP1                     shift and go to state 81
    variableNP1                    shift and go to state 82

state 68

    (71) read -> READ . ID readNP1

    ID              shift and go to state 83


state 69

    (73) escritura -> WRITE . escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (74) escrituraNP1 -> .

    LEFTPAR         reduce using rule 74 (escrituraNP1 -> .)

    escrituraNP1                   shift and go to state 84

state 70

    (83) return -> RETURN . exp returnNP1
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 85
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 71

    (85) condicion -> IF . LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2

    LEFTPAR         shift and go to state 97


state 72

    (91) ciclo -> FROM . exp TO exp DO cicloNP1 bloque cicloNP2
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 98
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 73

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR . funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs
    (33) funcionB -> . params
    (34) funcionB -> . empty
    (43) params -> . tipoSimple paramsNP1 ID paramsNP2 paramsA
    (139) empty -> .
    (40) tipoSimple -> . INT tipoSimpleNP1
    (41) tipoSimple -> . FLOAT tipoSimpleNP1

    RIGHTPAR        reduce using rule 139 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    funcionB                       shift and go to state 99
    params                         shift and go to state 100
    empty                          shift and go to state 101
    tipoSimple                     shift and go to state 102

state 74

    (10) varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .

    SEMICOLON       reduce using rule 10 (varsB -> FILE varsNP2 ID varsNP3 varsNP6 varsE .)


state 75

    (20) varsE -> COMMA . ID varsNP3 varsNP6 varsE

    ID              shift and go to state 103


state 76

    (21) varsE -> empty .

    SEMICOLON       reduce using rule 21 (varsE -> empty .)


state 77

    (11) varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .

    SEMICOLON       reduce using rule 11 (varsB -> tipoSimple varsNP2 ID varsNP3 varsC varsNP6 .)


state 78

    (14) varsC -> LEFTBRACKET CTI . varsNP4 RIGHTBRACKET varsD
    (16) varsNP4 -> .

    RIGHTBRACKET    reduce using rule 16 (varsNP4 -> .)

    varsNP4                        shift and go to state 104

state 79

    (53) estatutoA -> llamada checkIfVoid .

    ID              reduce using rule 53 (estatutoA -> llamada checkIfVoid .)
    READ            reduce using rule 53 (estatutoA -> llamada checkIfVoid .)
    WRITE           reduce using rule 53 (estatutoA -> llamada checkIfVoid .)
    RETURN          reduce using rule 53 (estatutoA -> llamada checkIfVoid .)
    IF              reduce using rule 53 (estatutoA -> llamada checkIfVoid .)
    FROM            reduce using rule 53 (estatutoA -> llamada checkIfVoid .)
    RIGHTCURLY      reduce using rule 53 (estatutoA -> llamada checkIfVoid .)


state 80

    (61) asignacion -> variable ASSIGNOP . asignacionNP1 exp asignacionNP2
    (62) asignacionNP1 -> .

    LEFTPAR         reduce using rule 62 (asignacionNP1 -> .)
    CTI             reduce using rule 62 (asignacionNP1 -> .)
    CTF             reduce using rule 62 (asignacionNP1 -> .)
    ID              reduce using rule 62 (asignacionNP1 -> .)

    asignacionNP1                  shift and go to state 105

state 81

    (64) llamada -> ID llamadaNP1 . LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3

    LEFTPAR         shift and go to state 106


state 82

    (94) variable -> ID variableNP1 . variableA
    (96) variableA -> . LEFTBRACKET exp RIGHTBRACKET variableB
    (97) variableA -> . empty
    (139) empty -> .

    LEFTBRACKET     shift and go to state 108
    ASSIGNOP        reduce using rule 139 (empty -> .)
    MULOP           reduce using rule 139 (empty -> .)
    DIVOP           reduce using rule 139 (empty -> .)
    SUMOP           reduce using rule 139 (empty -> .)
    SUBOP           reduce using rule 139 (empty -> .)
    LESSTHANOP      reduce using rule 139 (empty -> .)
    GREATERTHANOP   reduce using rule 139 (empty -> .)
    DIFFERENTOP     reduce using rule 139 (empty -> .)
    EQUALOP         reduce using rule 139 (empty -> .)
    ANDOP           reduce using rule 139 (empty -> .)
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    variableA                      shift and go to state 107
    empty                          shift and go to state 109

state 83

    (71) read -> READ ID . readNP1
    (72) readNP1 -> .

    ID              reduce using rule 72 (readNP1 -> .)
    READ            reduce using rule 72 (readNP1 -> .)
    WRITE           reduce using rule 72 (readNP1 -> .)
    RETURN          reduce using rule 72 (readNP1 -> .)
    IF              reduce using rule 72 (readNP1 -> .)
    FROM            reduce using rule 72 (readNP1 -> .)
    RIGHTCURLY      reduce using rule 72 (readNP1 -> .)

    readNP1                        shift and go to state 110

state 84

    (73) escritura -> WRITE escrituraNP1 . LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3

    LEFTPAR         shift and go to state 111


state 85

    (83) return -> RETURN exp . returnNP1
    (84) returnNP1 -> .

    ID              reduce using rule 84 (returnNP1 -> .)
    READ            reduce using rule 84 (returnNP1 -> .)
    WRITE           reduce using rule 84 (returnNP1 -> .)
    RETURN          reduce using rule 84 (returnNP1 -> .)
    IF              reduce using rule 84 (returnNP1 -> .)
    FROM            reduce using rule 84 (returnNP1 -> .)
    RIGHTCURLY      reduce using rule 84 (returnNP1 -> .)

    returnNP1                      shift and go to state 112

state 86

    (100) exp -> exp1 . expA
    (102) expA -> . OROP operNP1 exp1 expNP1 expA
    (103) expA -> . empty
    (139) empty -> .

    OROP            shift and go to state 114
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    expA                           shift and go to state 113
    empty                          shift and go to state 115

state 87

    (104) exp1 -> exp2 . exp1A
    (106) exp1A -> . ANDOP operNP1 exp2 exp1NP1 exp1A
    (107) exp1A -> . empty
    (139) empty -> .

    ANDOP           shift and go to state 117
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    exp1A                          shift and go to state 116
    empty                          shift and go to state 118

state 88

    (108) exp2 -> exp3 . exp2A
    (109) exp2A -> . exp2B operNP1 exp3 exp2ANP1
    (110) exp2A -> . empty
    (112) exp2B -> . LESSTHANOP
    (113) exp2B -> . GREATERTHANOP
    (114) exp2B -> . DIFFERENTOP
    (115) exp2B -> . EQUALOP
    (139) empty -> .

    LESSTHANOP      shift and go to state 122
    GREATERTHANOP   shift and go to state 123
    DIFFERENTOP     shift and go to state 124
    EQUALOP         shift and go to state 125
    ANDOP           reduce using rule 139 (empty -> .)
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    exp2A                          shift and go to state 119
    exp2B                          shift and go to state 120
    empty                          shift and go to state 121

state 89

    (116) exp3 -> termino . exp3A
    (118) exp3A -> . exp3B operNP1 termino exp3NP1 exp3A
    (119) exp3A -> . empty
    (120) exp3B -> . SUMOP
    (121) exp3B -> . SUBOP
    (139) empty -> .

    SUMOP           shift and go to state 129
    SUBOP           shift and go to state 130
    LESSTHANOP      reduce using rule 139 (empty -> .)
    GREATERTHANOP   reduce using rule 139 (empty -> .)
    DIFFERENTOP     reduce using rule 139 (empty -> .)
    EQUALOP         reduce using rule 139 (empty -> .)
    ANDOP           reduce using rule 139 (empty -> .)
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    exp3A                          shift and go to state 126
    exp3B                          shift and go to state 127
    empty                          shift and go to state 128

state 90

    (122) termino -> terminoC . terminoA
    (123) terminoA -> . terminoB operNP1 terminoC terminoANP1 terminoA
    (124) terminoA -> . empty
    (126) terminoB -> . MULOP
    (127) terminoB -> . DIVOP
    (139) empty -> .

    MULOP           shift and go to state 134
    DIVOP           shift and go to state 135
    SUMOP           reduce using rule 139 (empty -> .)
    SUBOP           reduce using rule 139 (empty -> .)
    LESSTHANOP      reduce using rule 139 (empty -> .)
    GREATERTHANOP   reduce using rule 139 (empty -> .)
    DIFFERENTOP     reduce using rule 139 (empty -> .)
    EQUALOP         reduce using rule 139 (empty -> .)
    ANDOP           reduce using rule 139 (empty -> .)
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    terminoA                       shift and go to state 131
    terminoB                       shift and go to state 132
    empty                          shift and go to state 133

state 91

    (128) terminoC -> factor .

    MULOP           reduce using rule 128 (terminoC -> factor .)
    DIVOP           reduce using rule 128 (terminoC -> factor .)
    SUMOP           reduce using rule 128 (terminoC -> factor .)
    SUBOP           reduce using rule 128 (terminoC -> factor .)
    LESSTHANOP      reduce using rule 128 (terminoC -> factor .)
    GREATERTHANOP   reduce using rule 128 (terminoC -> factor .)
    DIFFERENTOP     reduce using rule 128 (terminoC -> factor .)
    EQUALOP         reduce using rule 128 (terminoC -> factor .)
    ANDOP           reduce using rule 128 (terminoC -> factor .)
    OROP            reduce using rule 128 (terminoC -> factor .)
    ID              reduce using rule 128 (terminoC -> factor .)
    READ            reduce using rule 128 (terminoC -> factor .)
    WRITE           reduce using rule 128 (terminoC -> factor .)
    RETURN          reduce using rule 128 (terminoC -> factor .)
    IF              reduce using rule 128 (terminoC -> factor .)
    FROM            reduce using rule 128 (terminoC -> factor .)
    RIGHTCURLY      reduce using rule 128 (terminoC -> factor .)
    TO              reduce using rule 128 (terminoC -> factor .)
    RIGHTPAR        reduce using rule 128 (terminoC -> factor .)
    RIGHTBRACKET    reduce using rule 128 (terminoC -> factor .)
    DO              reduce using rule 128 (terminoC -> factor .)
    COMMA           reduce using rule 128 (terminoC -> factor .)


state 92

    (129) terminoC -> llamada . checkIfNotVoid
    (130) checkIfNotVoid -> .

    MULOP           reduce using rule 130 (checkIfNotVoid -> .)
    DIVOP           reduce using rule 130 (checkIfNotVoid -> .)
    SUMOP           reduce using rule 130 (checkIfNotVoid -> .)
    SUBOP           reduce using rule 130 (checkIfNotVoid -> .)
    LESSTHANOP      reduce using rule 130 (checkIfNotVoid -> .)
    GREATERTHANOP   reduce using rule 130 (checkIfNotVoid -> .)
    DIFFERENTOP     reduce using rule 130 (checkIfNotVoid -> .)
    EQUALOP         reduce using rule 130 (checkIfNotVoid -> .)
    ANDOP           reduce using rule 130 (checkIfNotVoid -> .)
    OROP            reduce using rule 130 (checkIfNotVoid -> .)
    ID              reduce using rule 130 (checkIfNotVoid -> .)
    READ            reduce using rule 130 (checkIfNotVoid -> .)
    WRITE           reduce using rule 130 (checkIfNotVoid -> .)
    RETURN          reduce using rule 130 (checkIfNotVoid -> .)
    IF              reduce using rule 130 (checkIfNotVoid -> .)
    FROM            reduce using rule 130 (checkIfNotVoid -> .)
    RIGHTCURLY      reduce using rule 130 (checkIfNotVoid -> .)
    TO              reduce using rule 130 (checkIfNotVoid -> .)
    RIGHTPAR        reduce using rule 130 (checkIfNotVoid -> .)
    RIGHTBRACKET    reduce using rule 130 (checkIfNotVoid -> .)
    DO              reduce using rule 130 (checkIfNotVoid -> .)
    COMMA           reduce using rule 130 (checkIfNotVoid -> .)

    checkIfNotVoid                 shift and go to state 136

state 93

    (131) factor -> LEFTPAR . operNP1 exp RIGHTPAR factorNP1
    (135) operNP1 -> .

    LEFTPAR         reduce using rule 135 (operNP1 -> .)
    CTI             reduce using rule 135 (operNP1 -> .)
    CTF             reduce using rule 135 (operNP1 -> .)
    ID              reduce using rule 135 (operNP1 -> .)

    operNP1                        shift and go to state 137

state 94

    (132) factor -> CTI . factorNP2
    (137) factorNP2 -> .

    MULOP           reduce using rule 137 (factorNP2 -> .)
    DIVOP           reduce using rule 137 (factorNP2 -> .)
    SUMOP           reduce using rule 137 (factorNP2 -> .)
    SUBOP           reduce using rule 137 (factorNP2 -> .)
    LESSTHANOP      reduce using rule 137 (factorNP2 -> .)
    GREATERTHANOP   reduce using rule 137 (factorNP2 -> .)
    DIFFERENTOP     reduce using rule 137 (factorNP2 -> .)
    EQUALOP         reduce using rule 137 (factorNP2 -> .)
    ANDOP           reduce using rule 137 (factorNP2 -> .)
    OROP            reduce using rule 137 (factorNP2 -> .)
    ID              reduce using rule 137 (factorNP2 -> .)
    READ            reduce using rule 137 (factorNP2 -> .)
    WRITE           reduce using rule 137 (factorNP2 -> .)
    RETURN          reduce using rule 137 (factorNP2 -> .)
    IF              reduce using rule 137 (factorNP2 -> .)
    FROM            reduce using rule 137 (factorNP2 -> .)
    RIGHTCURLY      reduce using rule 137 (factorNP2 -> .)
    TO              reduce using rule 137 (factorNP2 -> .)
    RIGHTPAR        reduce using rule 137 (factorNP2 -> .)
    RIGHTBRACKET    reduce using rule 137 (factorNP2 -> .)
    DO              reduce using rule 137 (factorNP2 -> .)
    COMMA           reduce using rule 137 (factorNP2 -> .)

    factorNP2                      shift and go to state 138

state 95

    (133) factor -> CTF . factorNP3
    (138) factorNP3 -> .

    MULOP           reduce using rule 138 (factorNP3 -> .)
    DIVOP           reduce using rule 138 (factorNP3 -> .)
    SUMOP           reduce using rule 138 (factorNP3 -> .)
    SUBOP           reduce using rule 138 (factorNP3 -> .)
    LESSTHANOP      reduce using rule 138 (factorNP3 -> .)
    GREATERTHANOP   reduce using rule 138 (factorNP3 -> .)
    DIFFERENTOP     reduce using rule 138 (factorNP3 -> .)
    EQUALOP         reduce using rule 138 (factorNP3 -> .)
    ANDOP           reduce using rule 138 (factorNP3 -> .)
    OROP            reduce using rule 138 (factorNP3 -> .)
    ID              reduce using rule 138 (factorNP3 -> .)
    READ            reduce using rule 138 (factorNP3 -> .)
    WRITE           reduce using rule 138 (factorNP3 -> .)
    RETURN          reduce using rule 138 (factorNP3 -> .)
    IF              reduce using rule 138 (factorNP3 -> .)
    FROM            reduce using rule 138 (factorNP3 -> .)
    RIGHTCURLY      reduce using rule 138 (factorNP3 -> .)
    TO              reduce using rule 138 (factorNP3 -> .)
    RIGHTPAR        reduce using rule 138 (factorNP3 -> .)
    RIGHTBRACKET    reduce using rule 138 (factorNP3 -> .)
    DO              reduce using rule 138 (factorNP3 -> .)
    COMMA           reduce using rule 138 (factorNP3 -> .)

    factorNP3                      shift and go to state 139

state 96

    (134) factor -> variable .

    MULOP           reduce using rule 134 (factor -> variable .)
    DIVOP           reduce using rule 134 (factor -> variable .)
    SUMOP           reduce using rule 134 (factor -> variable .)
    SUBOP           reduce using rule 134 (factor -> variable .)
    LESSTHANOP      reduce using rule 134 (factor -> variable .)
    GREATERTHANOP   reduce using rule 134 (factor -> variable .)
    DIFFERENTOP     reduce using rule 134 (factor -> variable .)
    EQUALOP         reduce using rule 134 (factor -> variable .)
    ANDOP           reduce using rule 134 (factor -> variable .)
    OROP            reduce using rule 134 (factor -> variable .)
    ID              reduce using rule 134 (factor -> variable .)
    READ            reduce using rule 134 (factor -> variable .)
    WRITE           reduce using rule 134 (factor -> variable .)
    RETURN          reduce using rule 134 (factor -> variable .)
    IF              reduce using rule 134 (factor -> variable .)
    FROM            reduce using rule 134 (factor -> variable .)
    RIGHTCURLY      reduce using rule 134 (factor -> variable .)
    TO              reduce using rule 134 (factor -> variable .)
    RIGHTPAR        reduce using rule 134 (factor -> variable .)
    RIGHTBRACKET    reduce using rule 134 (factor -> variable .)
    DO              reduce using rule 134 (factor -> variable .)
    COMMA           reduce using rule 134 (factor -> variable .)


state 97

    (85) condicion -> IF LEFTPAR . exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 140
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 98

    (91) ciclo -> FROM exp . TO exp DO cicloNP1 bloque cicloNP2

    TO              shift and go to state 141


state 99

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB . RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs

    RIGHTPAR        shift and go to state 142


state 100

    (33) funcionB -> params .

    RIGHTPAR        reduce using rule 33 (funcionB -> params .)


state 101

    (34) funcionB -> empty .

    RIGHTPAR        reduce using rule 34 (funcionB -> empty .)


state 102

    (43) params -> tipoSimple . paramsNP1 ID paramsNP2 paramsA
    (46) paramsNP1 -> .

    ID              reduce using rule 46 (paramsNP1 -> .)

    paramsNP1                      shift and go to state 143

state 103

    (20) varsE -> COMMA ID . varsNP3 varsNP6 varsE
    (22) varsNP3 -> .

    COMMA           reduce using rule 22 (varsNP3 -> .)
    SEMICOLON       reduce using rule 22 (varsNP3 -> .)

    varsNP3                        shift and go to state 144

state 104

    (14) varsC -> LEFTBRACKET CTI varsNP4 . RIGHTBRACKET varsD

    RIGHTBRACKET    shift and go to state 145


state 105

    (61) asignacion -> variable ASSIGNOP asignacionNP1 . exp asignacionNP2
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    variable                       shift and go to state 96
    exp                            shift and go to state 146
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92

state 106

    (64) llamada -> ID llamadaNP1 LEFTPAR . loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (76) loeNP2 -> .

    LEFTPAR         reduce using rule 76 (loeNP2 -> .)
    CTI             reduce using rule 76 (loeNP2 -> .)
    CTF             reduce using rule 76 (loeNP2 -> .)
    ID              reduce using rule 76 (loeNP2 -> .)
    COMMA           reduce using rule 76 (loeNP2 -> .)
    RIGHTPAR        reduce using rule 76 (loeNP2 -> .)

    loeNP2                         shift and go to state 147

state 107

    (94) variable -> ID variableNP1 variableA .

    ASSIGNOP        reduce using rule 94 (variable -> ID variableNP1 variableA .)
    MULOP           reduce using rule 94 (variable -> ID variableNP1 variableA .)
    DIVOP           reduce using rule 94 (variable -> ID variableNP1 variableA .)
    SUMOP           reduce using rule 94 (variable -> ID variableNP1 variableA .)
    SUBOP           reduce using rule 94 (variable -> ID variableNP1 variableA .)
    LESSTHANOP      reduce using rule 94 (variable -> ID variableNP1 variableA .)
    GREATERTHANOP   reduce using rule 94 (variable -> ID variableNP1 variableA .)
    DIFFERENTOP     reduce using rule 94 (variable -> ID variableNP1 variableA .)
    EQUALOP         reduce using rule 94 (variable -> ID variableNP1 variableA .)
    ANDOP           reduce using rule 94 (variable -> ID variableNP1 variableA .)
    OROP            reduce using rule 94 (variable -> ID variableNP1 variableA .)
    ID              reduce using rule 94 (variable -> ID variableNP1 variableA .)
    READ            reduce using rule 94 (variable -> ID variableNP1 variableA .)
    WRITE           reduce using rule 94 (variable -> ID variableNP1 variableA .)
    RETURN          reduce using rule 94 (variable -> ID variableNP1 variableA .)
    IF              reduce using rule 94 (variable -> ID variableNP1 variableA .)
    FROM            reduce using rule 94 (variable -> ID variableNP1 variableA .)
    RIGHTCURLY      reduce using rule 94 (variable -> ID variableNP1 variableA .)
    TO              reduce using rule 94 (variable -> ID variableNP1 variableA .)
    RIGHTPAR        reduce using rule 94 (variable -> ID variableNP1 variableA .)
    RIGHTBRACKET    reduce using rule 94 (variable -> ID variableNP1 variableA .)
    DO              reduce using rule 94 (variable -> ID variableNP1 variableA .)
    COMMA           reduce using rule 94 (variable -> ID variableNP1 variableA .)


state 108

    (96) variableA -> LEFTBRACKET . exp RIGHTBRACKET variableB
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 148
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 109

    (97) variableA -> empty .

    ASSIGNOP        reduce using rule 97 (variableA -> empty .)
    MULOP           reduce using rule 97 (variableA -> empty .)
    DIVOP           reduce using rule 97 (variableA -> empty .)
    SUMOP           reduce using rule 97 (variableA -> empty .)
    SUBOP           reduce using rule 97 (variableA -> empty .)
    LESSTHANOP      reduce using rule 97 (variableA -> empty .)
    GREATERTHANOP   reduce using rule 97 (variableA -> empty .)
    DIFFERENTOP     reduce using rule 97 (variableA -> empty .)
    EQUALOP         reduce using rule 97 (variableA -> empty .)
    ANDOP           reduce using rule 97 (variableA -> empty .)
    OROP            reduce using rule 97 (variableA -> empty .)
    ID              reduce using rule 97 (variableA -> empty .)
    READ            reduce using rule 97 (variableA -> empty .)
    WRITE           reduce using rule 97 (variableA -> empty .)
    RETURN          reduce using rule 97 (variableA -> empty .)
    IF              reduce using rule 97 (variableA -> empty .)
    FROM            reduce using rule 97 (variableA -> empty .)
    RIGHTCURLY      reduce using rule 97 (variableA -> empty .)
    TO              reduce using rule 97 (variableA -> empty .)
    RIGHTPAR        reduce using rule 97 (variableA -> empty .)
    RIGHTBRACKET    reduce using rule 97 (variableA -> empty .)
    DO              reduce using rule 97 (variableA -> empty .)
    COMMA           reduce using rule 97 (variableA -> empty .)


state 110

    (71) read -> READ ID readNP1 .

    ID              reduce using rule 71 (read -> READ ID readNP1 .)
    READ            reduce using rule 71 (read -> READ ID readNP1 .)
    WRITE           reduce using rule 71 (read -> READ ID readNP1 .)
    RETURN          reduce using rule 71 (read -> READ ID readNP1 .)
    IF              reduce using rule 71 (read -> READ ID readNP1 .)
    FROM            reduce using rule 71 (read -> READ ID readNP1 .)
    RIGHTCURLY      reduce using rule 71 (read -> READ ID readNP1 .)


state 111

    (73) escritura -> WRITE escrituraNP1 LEFTPAR . loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3
    (76) loeNP2 -> .

    CTSTRING        reduce using rule 76 (loeNP2 -> .)
    LEFTPAR         reduce using rule 76 (loeNP2 -> .)
    CTI             reduce using rule 76 (loeNP2 -> .)
    CTF             reduce using rule 76 (loeNP2 -> .)
    ID              reduce using rule 76 (loeNP2 -> .)

    loeNP2                         shift and go to state 149

state 112

    (83) return -> RETURN exp returnNP1 .

    ID              reduce using rule 83 (return -> RETURN exp returnNP1 .)
    READ            reduce using rule 83 (return -> RETURN exp returnNP1 .)
    WRITE           reduce using rule 83 (return -> RETURN exp returnNP1 .)
    RETURN          reduce using rule 83 (return -> RETURN exp returnNP1 .)
    IF              reduce using rule 83 (return -> RETURN exp returnNP1 .)
    FROM            reduce using rule 83 (return -> RETURN exp returnNP1 .)
    RIGHTCURLY      reduce using rule 83 (return -> RETURN exp returnNP1 .)


state 113

    (100) exp -> exp1 expA .

    ID              reduce using rule 100 (exp -> exp1 expA .)
    READ            reduce using rule 100 (exp -> exp1 expA .)
    WRITE           reduce using rule 100 (exp -> exp1 expA .)
    RETURN          reduce using rule 100 (exp -> exp1 expA .)
    IF              reduce using rule 100 (exp -> exp1 expA .)
    FROM            reduce using rule 100 (exp -> exp1 expA .)
    RIGHTCURLY      reduce using rule 100 (exp -> exp1 expA .)
    TO              reduce using rule 100 (exp -> exp1 expA .)
    RIGHTPAR        reduce using rule 100 (exp -> exp1 expA .)
    RIGHTBRACKET    reduce using rule 100 (exp -> exp1 expA .)
    DO              reduce using rule 100 (exp -> exp1 expA .)
    COMMA           reduce using rule 100 (exp -> exp1 expA .)


state 114

    (102) expA -> OROP . operNP1 exp1 expNP1 expA
    (135) operNP1 -> .

    LEFTPAR         reduce using rule 135 (operNP1 -> .)
    CTI             reduce using rule 135 (operNP1 -> .)
    CTF             reduce using rule 135 (operNP1 -> .)
    ID              reduce using rule 135 (operNP1 -> .)

    operNP1                        shift and go to state 150

state 115

    (103) expA -> empty .

    ID              reduce using rule 103 (expA -> empty .)
    READ            reduce using rule 103 (expA -> empty .)
    WRITE           reduce using rule 103 (expA -> empty .)
    RETURN          reduce using rule 103 (expA -> empty .)
    IF              reduce using rule 103 (expA -> empty .)
    FROM            reduce using rule 103 (expA -> empty .)
    RIGHTCURLY      reduce using rule 103 (expA -> empty .)
    TO              reduce using rule 103 (expA -> empty .)
    RIGHTPAR        reduce using rule 103 (expA -> empty .)
    RIGHTBRACKET    reduce using rule 103 (expA -> empty .)
    DO              reduce using rule 103 (expA -> empty .)
    COMMA           reduce using rule 103 (expA -> empty .)


state 116

    (104) exp1 -> exp2 exp1A .

    OROP            reduce using rule 104 (exp1 -> exp2 exp1A .)
    ID              reduce using rule 104 (exp1 -> exp2 exp1A .)
    READ            reduce using rule 104 (exp1 -> exp2 exp1A .)
    WRITE           reduce using rule 104 (exp1 -> exp2 exp1A .)
    RETURN          reduce using rule 104 (exp1 -> exp2 exp1A .)
    IF              reduce using rule 104 (exp1 -> exp2 exp1A .)
    FROM            reduce using rule 104 (exp1 -> exp2 exp1A .)
    RIGHTCURLY      reduce using rule 104 (exp1 -> exp2 exp1A .)
    TO              reduce using rule 104 (exp1 -> exp2 exp1A .)
    RIGHTPAR        reduce using rule 104 (exp1 -> exp2 exp1A .)
    RIGHTBRACKET    reduce using rule 104 (exp1 -> exp2 exp1A .)
    DO              reduce using rule 104 (exp1 -> exp2 exp1A .)
    COMMA           reduce using rule 104 (exp1 -> exp2 exp1A .)


state 117

    (106) exp1A -> ANDOP . operNP1 exp2 exp1NP1 exp1A
    (135) operNP1 -> .

    LEFTPAR         reduce using rule 135 (operNP1 -> .)
    CTI             reduce using rule 135 (operNP1 -> .)
    CTF             reduce using rule 135 (operNP1 -> .)
    ID              reduce using rule 135 (operNP1 -> .)

    operNP1                        shift and go to state 151

state 118

    (107) exp1A -> empty .

    OROP            reduce using rule 107 (exp1A -> empty .)
    ID              reduce using rule 107 (exp1A -> empty .)
    READ            reduce using rule 107 (exp1A -> empty .)
    WRITE           reduce using rule 107 (exp1A -> empty .)
    RETURN          reduce using rule 107 (exp1A -> empty .)
    IF              reduce using rule 107 (exp1A -> empty .)
    FROM            reduce using rule 107 (exp1A -> empty .)
    RIGHTCURLY      reduce using rule 107 (exp1A -> empty .)
    TO              reduce using rule 107 (exp1A -> empty .)
    RIGHTPAR        reduce using rule 107 (exp1A -> empty .)
    RIGHTBRACKET    reduce using rule 107 (exp1A -> empty .)
    DO              reduce using rule 107 (exp1A -> empty .)
    COMMA           reduce using rule 107 (exp1A -> empty .)


state 119

    (108) exp2 -> exp3 exp2A .

    ANDOP           reduce using rule 108 (exp2 -> exp3 exp2A .)
    OROP            reduce using rule 108 (exp2 -> exp3 exp2A .)
    ID              reduce using rule 108 (exp2 -> exp3 exp2A .)
    READ            reduce using rule 108 (exp2 -> exp3 exp2A .)
    WRITE           reduce using rule 108 (exp2 -> exp3 exp2A .)
    RETURN          reduce using rule 108 (exp2 -> exp3 exp2A .)
    IF              reduce using rule 108 (exp2 -> exp3 exp2A .)
    FROM            reduce using rule 108 (exp2 -> exp3 exp2A .)
    RIGHTCURLY      reduce using rule 108 (exp2 -> exp3 exp2A .)
    TO              reduce using rule 108 (exp2 -> exp3 exp2A .)
    RIGHTPAR        reduce using rule 108 (exp2 -> exp3 exp2A .)
    RIGHTBRACKET    reduce using rule 108 (exp2 -> exp3 exp2A .)
    DO              reduce using rule 108 (exp2 -> exp3 exp2A .)
    COMMA           reduce using rule 108 (exp2 -> exp3 exp2A .)


state 120

    (109) exp2A -> exp2B . operNP1 exp3 exp2ANP1
    (135) operNP1 -> .

    LEFTPAR         reduce using rule 135 (operNP1 -> .)
    CTI             reduce using rule 135 (operNP1 -> .)
    CTF             reduce using rule 135 (operNP1 -> .)
    ID              reduce using rule 135 (operNP1 -> .)

    operNP1                        shift and go to state 152

state 121

    (110) exp2A -> empty .

    ANDOP           reduce using rule 110 (exp2A -> empty .)
    OROP            reduce using rule 110 (exp2A -> empty .)
    ID              reduce using rule 110 (exp2A -> empty .)
    READ            reduce using rule 110 (exp2A -> empty .)
    WRITE           reduce using rule 110 (exp2A -> empty .)
    RETURN          reduce using rule 110 (exp2A -> empty .)
    IF              reduce using rule 110 (exp2A -> empty .)
    FROM            reduce using rule 110 (exp2A -> empty .)
    RIGHTCURLY      reduce using rule 110 (exp2A -> empty .)
    TO              reduce using rule 110 (exp2A -> empty .)
    RIGHTPAR        reduce using rule 110 (exp2A -> empty .)
    RIGHTBRACKET    reduce using rule 110 (exp2A -> empty .)
    DO              reduce using rule 110 (exp2A -> empty .)
    COMMA           reduce using rule 110 (exp2A -> empty .)


state 122

    (112) exp2B -> LESSTHANOP .

    LEFTPAR         reduce using rule 112 (exp2B -> LESSTHANOP .)
    CTI             reduce using rule 112 (exp2B -> LESSTHANOP .)
    CTF             reduce using rule 112 (exp2B -> LESSTHANOP .)
    ID              reduce using rule 112 (exp2B -> LESSTHANOP .)


state 123

    (113) exp2B -> GREATERTHANOP .

    LEFTPAR         reduce using rule 113 (exp2B -> GREATERTHANOP .)
    CTI             reduce using rule 113 (exp2B -> GREATERTHANOP .)
    CTF             reduce using rule 113 (exp2B -> GREATERTHANOP .)
    ID              reduce using rule 113 (exp2B -> GREATERTHANOP .)


state 124

    (114) exp2B -> DIFFERENTOP .

    LEFTPAR         reduce using rule 114 (exp2B -> DIFFERENTOP .)
    CTI             reduce using rule 114 (exp2B -> DIFFERENTOP .)
    CTF             reduce using rule 114 (exp2B -> DIFFERENTOP .)
    ID              reduce using rule 114 (exp2B -> DIFFERENTOP .)


state 125

    (115) exp2B -> EQUALOP .

    LEFTPAR         reduce using rule 115 (exp2B -> EQUALOP .)
    CTI             reduce using rule 115 (exp2B -> EQUALOP .)
    CTF             reduce using rule 115 (exp2B -> EQUALOP .)
    ID              reduce using rule 115 (exp2B -> EQUALOP .)


state 126

    (116) exp3 -> termino exp3A .

    LESSTHANOP      reduce using rule 116 (exp3 -> termino exp3A .)
    GREATERTHANOP   reduce using rule 116 (exp3 -> termino exp3A .)
    DIFFERENTOP     reduce using rule 116 (exp3 -> termino exp3A .)
    EQUALOP         reduce using rule 116 (exp3 -> termino exp3A .)
    ANDOP           reduce using rule 116 (exp3 -> termino exp3A .)
    OROP            reduce using rule 116 (exp3 -> termino exp3A .)
    ID              reduce using rule 116 (exp3 -> termino exp3A .)
    READ            reduce using rule 116 (exp3 -> termino exp3A .)
    WRITE           reduce using rule 116 (exp3 -> termino exp3A .)
    RETURN          reduce using rule 116 (exp3 -> termino exp3A .)
    IF              reduce using rule 116 (exp3 -> termino exp3A .)
    FROM            reduce using rule 116 (exp3 -> termino exp3A .)
    RIGHTCURLY      reduce using rule 116 (exp3 -> termino exp3A .)
    TO              reduce using rule 116 (exp3 -> termino exp3A .)
    RIGHTPAR        reduce using rule 116 (exp3 -> termino exp3A .)
    RIGHTBRACKET    reduce using rule 116 (exp3 -> termino exp3A .)
    DO              reduce using rule 116 (exp3 -> termino exp3A .)
    COMMA           reduce using rule 116 (exp3 -> termino exp3A .)


state 127

    (118) exp3A -> exp3B . operNP1 termino exp3NP1 exp3A
    (135) operNP1 -> .

    LEFTPAR         reduce using rule 135 (operNP1 -> .)
    CTI             reduce using rule 135 (operNP1 -> .)
    CTF             reduce using rule 135 (operNP1 -> .)
    ID              reduce using rule 135 (operNP1 -> .)

    operNP1                        shift and go to state 153

state 128

    (119) exp3A -> empty .

    LESSTHANOP      reduce using rule 119 (exp3A -> empty .)
    GREATERTHANOP   reduce using rule 119 (exp3A -> empty .)
    DIFFERENTOP     reduce using rule 119 (exp3A -> empty .)
    EQUALOP         reduce using rule 119 (exp3A -> empty .)
    ANDOP           reduce using rule 119 (exp3A -> empty .)
    OROP            reduce using rule 119 (exp3A -> empty .)
    ID              reduce using rule 119 (exp3A -> empty .)
    READ            reduce using rule 119 (exp3A -> empty .)
    WRITE           reduce using rule 119 (exp3A -> empty .)
    RETURN          reduce using rule 119 (exp3A -> empty .)
    IF              reduce using rule 119 (exp3A -> empty .)
    FROM            reduce using rule 119 (exp3A -> empty .)
    RIGHTCURLY      reduce using rule 119 (exp3A -> empty .)
    TO              reduce using rule 119 (exp3A -> empty .)
    RIGHTPAR        reduce using rule 119 (exp3A -> empty .)
    RIGHTBRACKET    reduce using rule 119 (exp3A -> empty .)
    DO              reduce using rule 119 (exp3A -> empty .)
    COMMA           reduce using rule 119 (exp3A -> empty .)


state 129

    (120) exp3B -> SUMOP .

    LEFTPAR         reduce using rule 120 (exp3B -> SUMOP .)
    CTI             reduce using rule 120 (exp3B -> SUMOP .)
    CTF             reduce using rule 120 (exp3B -> SUMOP .)
    ID              reduce using rule 120 (exp3B -> SUMOP .)


state 130

    (121) exp3B -> SUBOP .

    LEFTPAR         reduce using rule 121 (exp3B -> SUBOP .)
    CTI             reduce using rule 121 (exp3B -> SUBOP .)
    CTF             reduce using rule 121 (exp3B -> SUBOP .)
    ID              reduce using rule 121 (exp3B -> SUBOP .)


state 131

    (122) termino -> terminoC terminoA .

    SUMOP           reduce using rule 122 (termino -> terminoC terminoA .)
    SUBOP           reduce using rule 122 (termino -> terminoC terminoA .)
    LESSTHANOP      reduce using rule 122 (termino -> terminoC terminoA .)
    GREATERTHANOP   reduce using rule 122 (termino -> terminoC terminoA .)
    DIFFERENTOP     reduce using rule 122 (termino -> terminoC terminoA .)
    EQUALOP         reduce using rule 122 (termino -> terminoC terminoA .)
    ANDOP           reduce using rule 122 (termino -> terminoC terminoA .)
    OROP            reduce using rule 122 (termino -> terminoC terminoA .)
    ID              reduce using rule 122 (termino -> terminoC terminoA .)
    READ            reduce using rule 122 (termino -> terminoC terminoA .)
    WRITE           reduce using rule 122 (termino -> terminoC terminoA .)
    RETURN          reduce using rule 122 (termino -> terminoC terminoA .)
    IF              reduce using rule 122 (termino -> terminoC terminoA .)
    FROM            reduce using rule 122 (termino -> terminoC terminoA .)
    RIGHTCURLY      reduce using rule 122 (termino -> terminoC terminoA .)
    TO              reduce using rule 122 (termino -> terminoC terminoA .)
    RIGHTPAR        reduce using rule 122 (termino -> terminoC terminoA .)
    RIGHTBRACKET    reduce using rule 122 (termino -> terminoC terminoA .)
    DO              reduce using rule 122 (termino -> terminoC terminoA .)
    COMMA           reduce using rule 122 (termino -> terminoC terminoA .)


state 132

    (123) terminoA -> terminoB . operNP1 terminoC terminoANP1 terminoA
    (135) operNP1 -> .

    LEFTPAR         reduce using rule 135 (operNP1 -> .)
    CTI             reduce using rule 135 (operNP1 -> .)
    CTF             reduce using rule 135 (operNP1 -> .)
    ID              reduce using rule 135 (operNP1 -> .)

    operNP1                        shift and go to state 154

state 133

    (124) terminoA -> empty .

    SUMOP           reduce using rule 124 (terminoA -> empty .)
    SUBOP           reduce using rule 124 (terminoA -> empty .)
    LESSTHANOP      reduce using rule 124 (terminoA -> empty .)
    GREATERTHANOP   reduce using rule 124 (terminoA -> empty .)
    DIFFERENTOP     reduce using rule 124 (terminoA -> empty .)
    EQUALOP         reduce using rule 124 (terminoA -> empty .)
    ANDOP           reduce using rule 124 (terminoA -> empty .)
    OROP            reduce using rule 124 (terminoA -> empty .)
    ID              reduce using rule 124 (terminoA -> empty .)
    READ            reduce using rule 124 (terminoA -> empty .)
    WRITE           reduce using rule 124 (terminoA -> empty .)
    RETURN          reduce using rule 124 (terminoA -> empty .)
    IF              reduce using rule 124 (terminoA -> empty .)
    FROM            reduce using rule 124 (terminoA -> empty .)
    RIGHTCURLY      reduce using rule 124 (terminoA -> empty .)
    TO              reduce using rule 124 (terminoA -> empty .)
    RIGHTPAR        reduce using rule 124 (terminoA -> empty .)
    RIGHTBRACKET    reduce using rule 124 (terminoA -> empty .)
    DO              reduce using rule 124 (terminoA -> empty .)
    COMMA           reduce using rule 124 (terminoA -> empty .)


state 134

    (126) terminoB -> MULOP .

    LEFTPAR         reduce using rule 126 (terminoB -> MULOP .)
    CTI             reduce using rule 126 (terminoB -> MULOP .)
    CTF             reduce using rule 126 (terminoB -> MULOP .)
    ID              reduce using rule 126 (terminoB -> MULOP .)


state 135

    (127) terminoB -> DIVOP .

    LEFTPAR         reduce using rule 127 (terminoB -> DIVOP .)
    CTI             reduce using rule 127 (terminoB -> DIVOP .)
    CTF             reduce using rule 127 (terminoB -> DIVOP .)
    ID              reduce using rule 127 (terminoB -> DIVOP .)


state 136

    (129) terminoC -> llamada checkIfNotVoid .

    MULOP           reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    DIVOP           reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    SUMOP           reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    SUBOP           reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    LESSTHANOP      reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    GREATERTHANOP   reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    DIFFERENTOP     reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    EQUALOP         reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    ANDOP           reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    OROP            reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    ID              reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    READ            reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    WRITE           reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    RETURN          reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    IF              reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    FROM            reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    RIGHTCURLY      reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    TO              reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    RIGHTPAR        reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    RIGHTBRACKET    reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    DO              reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)
    COMMA           reduce using rule 129 (terminoC -> llamada checkIfNotVoid .)


state 137

    (131) factor -> LEFTPAR operNP1 . exp RIGHTPAR factorNP1
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 155
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 138

    (132) factor -> CTI factorNP2 .

    MULOP           reduce using rule 132 (factor -> CTI factorNP2 .)
    DIVOP           reduce using rule 132 (factor -> CTI factorNP2 .)
    SUMOP           reduce using rule 132 (factor -> CTI factorNP2 .)
    SUBOP           reduce using rule 132 (factor -> CTI factorNP2 .)
    LESSTHANOP      reduce using rule 132 (factor -> CTI factorNP2 .)
    GREATERTHANOP   reduce using rule 132 (factor -> CTI factorNP2 .)
    DIFFERENTOP     reduce using rule 132 (factor -> CTI factorNP2 .)
    EQUALOP         reduce using rule 132 (factor -> CTI factorNP2 .)
    ANDOP           reduce using rule 132 (factor -> CTI factorNP2 .)
    OROP            reduce using rule 132 (factor -> CTI factorNP2 .)
    ID              reduce using rule 132 (factor -> CTI factorNP2 .)
    READ            reduce using rule 132 (factor -> CTI factorNP2 .)
    WRITE           reduce using rule 132 (factor -> CTI factorNP2 .)
    RETURN          reduce using rule 132 (factor -> CTI factorNP2 .)
    IF              reduce using rule 132 (factor -> CTI factorNP2 .)
    FROM            reduce using rule 132 (factor -> CTI factorNP2 .)
    RIGHTCURLY      reduce using rule 132 (factor -> CTI factorNP2 .)
    TO              reduce using rule 132 (factor -> CTI factorNP2 .)
    RIGHTPAR        reduce using rule 132 (factor -> CTI factorNP2 .)
    RIGHTBRACKET    reduce using rule 132 (factor -> CTI factorNP2 .)
    DO              reduce using rule 132 (factor -> CTI factorNP2 .)
    COMMA           reduce using rule 132 (factor -> CTI factorNP2 .)


state 139

    (133) factor -> CTF factorNP3 .

    MULOP           reduce using rule 133 (factor -> CTF factorNP3 .)
    DIVOP           reduce using rule 133 (factor -> CTF factorNP3 .)
    SUMOP           reduce using rule 133 (factor -> CTF factorNP3 .)
    SUBOP           reduce using rule 133 (factor -> CTF factorNP3 .)
    LESSTHANOP      reduce using rule 133 (factor -> CTF factorNP3 .)
    GREATERTHANOP   reduce using rule 133 (factor -> CTF factorNP3 .)
    DIFFERENTOP     reduce using rule 133 (factor -> CTF factorNP3 .)
    EQUALOP         reduce using rule 133 (factor -> CTF factorNP3 .)
    ANDOP           reduce using rule 133 (factor -> CTF factorNP3 .)
    OROP            reduce using rule 133 (factor -> CTF factorNP3 .)
    ID              reduce using rule 133 (factor -> CTF factorNP3 .)
    READ            reduce using rule 133 (factor -> CTF factorNP3 .)
    WRITE           reduce using rule 133 (factor -> CTF factorNP3 .)
    RETURN          reduce using rule 133 (factor -> CTF factorNP3 .)
    IF              reduce using rule 133 (factor -> CTF factorNP3 .)
    FROM            reduce using rule 133 (factor -> CTF factorNP3 .)
    RIGHTCURLY      reduce using rule 133 (factor -> CTF factorNP3 .)
    TO              reduce using rule 133 (factor -> CTF factorNP3 .)
    RIGHTPAR        reduce using rule 133 (factor -> CTF factorNP3 .)
    RIGHTBRACKET    reduce using rule 133 (factor -> CTF factorNP3 .)
    DO              reduce using rule 133 (factor -> CTF factorNP3 .)
    COMMA           reduce using rule 133 (factor -> CTF factorNP3 .)


state 140

    (85) condicion -> IF LEFTPAR exp . condicionNP1 RIGHTPAR bloque condicionA condicionANP2
    (86) condicionNP1 -> .

    RIGHTPAR        reduce using rule 86 (condicionNP1 -> .)

    condicionNP1                   shift and go to state 156

state 141

    (91) ciclo -> FROM exp TO . exp DO cicloNP1 bloque cicloNP2
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 157
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 142

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR . SEMICOLON funcionC quadStart bloque genMemReqs

    SEMICOLON       shift and go to state 158


state 143

    (43) params -> tipoSimple paramsNP1 . ID paramsNP2 paramsA

    ID              shift and go to state 159


state 144

    (20) varsE -> COMMA ID varsNP3 . varsNP6 varsE
    (13) varsNP6 -> .

    COMMA           reduce using rule 13 (varsNP6 -> .)
    SEMICOLON       reduce using rule 13 (varsNP6 -> .)

    varsNP6                        shift and go to state 160

state 145

    (14) varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET . varsD
    (17) varsD -> . LEFTBRACKET CTI varsNP5 RIGHTBRACKET
    (18) varsD -> . empty
    (139) empty -> .

    LEFTBRACKET     shift and go to state 161
    SEMICOLON       reduce using rule 139 (empty -> .)

    varsD                          shift and go to state 162
    empty                          shift and go to state 163

state 146

    (61) asignacion -> variable ASSIGNOP asignacionNP1 exp . asignacionNP2
    (63) asignacionNP2 -> .

    ID              reduce using rule 63 (asignacionNP2 -> .)
    READ            reduce using rule 63 (asignacionNP2 -> .)
    WRITE           reduce using rule 63 (asignacionNP2 -> .)
    RETURN          reduce using rule 63 (asignacionNP2 -> .)
    IF              reduce using rule 63 (asignacionNP2 -> .)
    FROM            reduce using rule 63 (asignacionNP2 -> .)
    RIGHTCURLY      reduce using rule 63 (asignacionNP2 -> .)

    asignacionNP2                  shift and go to state 164

state 147

    (64) llamada -> ID llamadaNP1 LEFTPAR loeNP2 . primerparam llamadaA RIGHTPAR llamadaNP3
    (65) primerparam -> . exp loeNP1
    (66) primerparam -> . empty
    (100) exp -> . exp1 expA
    (139) empty -> .
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    COMMA           reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    primerparam                    shift and go to state 165
    exp                            shift and go to state 166
    empty                          shift and go to state 167
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 148

    (96) variableA -> LEFTBRACKET exp . RIGHTBRACKET variableB

    RIGHTBRACKET    shift and go to state 168


state 149

    (73) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 . escrituraA escrituraB RIGHTPAR escrituraNP3
    (77) escrituraA -> . exp loeNP1
    (78) escrituraA -> . CTSTRING escrituraNP2
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    CTSTRING        shift and go to state 171
    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    escrituraA                     shift and go to state 169
    exp                            shift and go to state 170
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 150

    (102) expA -> OROP operNP1 . exp1 expNP1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp1                           shift and go to state 172
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 151

    (106) exp1A -> ANDOP operNP1 . exp2 exp1NP1 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp2                           shift and go to state 173
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 152

    (109) exp2A -> exp2B operNP1 . exp3 exp2ANP1
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp3                           shift and go to state 174
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 153

    (118) exp3A -> exp3B operNP1 . termino exp3NP1 exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    termino                        shift and go to state 175
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 154

    (123) terminoA -> terminoB operNP1 . terminoC terminoANP1 terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    terminoC                       shift and go to state 176
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 155

    (131) factor -> LEFTPAR operNP1 exp . RIGHTPAR factorNP1

    RIGHTPAR        shift and go to state 177


state 156

    (85) condicion -> IF LEFTPAR exp condicionNP1 . RIGHTPAR bloque condicionA condicionANP2

    RIGHTPAR        shift and go to state 178


state 157

    (91) ciclo -> FROM exp TO exp . DO cicloNP1 bloque cicloNP2

    DO              shift and go to state 179


state 158

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON . funcionC quadStart bloque genMemReqs
    (35) funcionC -> . vars
    (36) funcionC -> . empty
    (8) vars -> . VAR varsA
    (139) empty -> .

    VAR             shift and go to state 10
    LEFTCURLY       reduce using rule 139 (empty -> .)

    funcionC                       shift and go to state 180
    vars                           shift and go to state 181
    empty                          shift and go to state 182

state 159

    (43) params -> tipoSimple paramsNP1 ID . paramsNP2 paramsA
    (47) paramsNP2 -> .

    COMMA           reduce using rule 47 (paramsNP2 -> .)
    RIGHTPAR        reduce using rule 47 (paramsNP2 -> .)

    paramsNP2                      shift and go to state 183

state 160

    (20) varsE -> COMMA ID varsNP3 varsNP6 . varsE
    (20) varsE -> . COMMA ID varsNP3 varsNP6 varsE
    (21) varsE -> . empty
    (139) empty -> .

    COMMA           shift and go to state 75
    SEMICOLON       reduce using rule 139 (empty -> .)

    varsE                          shift and go to state 184
    empty                          shift and go to state 76

state 161

    (17) varsD -> LEFTBRACKET . CTI varsNP5 RIGHTBRACKET

    CTI             shift and go to state 185


state 162

    (14) varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD .

    SEMICOLON       reduce using rule 14 (varsC -> LEFTBRACKET CTI varsNP4 RIGHTBRACKET varsD .)


state 163

    (18) varsD -> empty .

    SEMICOLON       reduce using rule 18 (varsD -> empty .)


state 164

    (61) asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .

    ID              reduce using rule 61 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    READ            reduce using rule 61 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    WRITE           reduce using rule 61 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    RETURN          reduce using rule 61 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    IF              reduce using rule 61 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    FROM            reduce using rule 61 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)
    RIGHTCURLY      reduce using rule 61 (asignacion -> variable ASSIGNOP asignacionNP1 exp asignacionNP2 .)


state 165

    (64) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam . llamadaA RIGHTPAR llamadaNP3
    (67) llamadaA -> . COMMA exp loeNP1 llamadaA
    (68) llamadaA -> . empty
    (139) empty -> .

    COMMA           shift and go to state 187
    RIGHTPAR        reduce using rule 139 (empty -> .)

    llamadaA                       shift and go to state 186
    empty                          shift and go to state 188

state 166

    (65) primerparam -> exp . loeNP1
    (79) loeNP1 -> .

    COMMA           reduce using rule 79 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 79 (loeNP1 -> .)

    loeNP1                         shift and go to state 189

state 167

    (66) primerparam -> empty .

    COMMA           reduce using rule 66 (primerparam -> empty .)
    RIGHTPAR        reduce using rule 66 (primerparam -> empty .)


state 168

    (96) variableA -> LEFTBRACKET exp RIGHTBRACKET . variableB
    (98) variableB -> . LEFTBRACKET exp RIGHTBRACKET
    (99) variableB -> . empty
    (139) empty -> .

    LEFTBRACKET     shift and go to state 190
    ASSIGNOP        reduce using rule 139 (empty -> .)
    MULOP           reduce using rule 139 (empty -> .)
    DIVOP           reduce using rule 139 (empty -> .)
    SUMOP           reduce using rule 139 (empty -> .)
    SUBOP           reduce using rule 139 (empty -> .)
    LESSTHANOP      reduce using rule 139 (empty -> .)
    GREATERTHANOP   reduce using rule 139 (empty -> .)
    DIFFERENTOP     reduce using rule 139 (empty -> .)
    EQUALOP         reduce using rule 139 (empty -> .)
    ANDOP           reduce using rule 139 (empty -> .)
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    variableB                      shift and go to state 191
    empty                          shift and go to state 192

state 169

    (73) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA . escrituraB RIGHTPAR escrituraNP3
    (81) escrituraB -> . COMMA escrituraA escrituraB
    (82) escrituraB -> . empty
    (139) empty -> .

    COMMA           shift and go to state 194
    RIGHTPAR        reduce using rule 139 (empty -> .)

    escrituraB                     shift and go to state 193
    empty                          shift and go to state 195

state 170

    (77) escrituraA -> exp . loeNP1
    (79) loeNP1 -> .

    COMMA           reduce using rule 79 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 79 (loeNP1 -> .)

    loeNP1                         shift and go to state 196

state 171

    (78) escrituraA -> CTSTRING . escrituraNP2
    (80) escrituraNP2 -> .

    COMMA           reduce using rule 80 (escrituraNP2 -> .)
    RIGHTPAR        reduce using rule 80 (escrituraNP2 -> .)

    escrituraNP2                   shift and go to state 197

state 172

    (102) expA -> OROP operNP1 exp1 . expNP1 expA
    (101) expNP1 -> .

    OROP            reduce using rule 101 (expNP1 -> .)
    ID              reduce using rule 101 (expNP1 -> .)
    READ            reduce using rule 101 (expNP1 -> .)
    WRITE           reduce using rule 101 (expNP1 -> .)
    RETURN          reduce using rule 101 (expNP1 -> .)
    IF              reduce using rule 101 (expNP1 -> .)
    FROM            reduce using rule 101 (expNP1 -> .)
    RIGHTCURLY      reduce using rule 101 (expNP1 -> .)
    TO              reduce using rule 101 (expNP1 -> .)
    RIGHTPAR        reduce using rule 101 (expNP1 -> .)
    RIGHTBRACKET    reduce using rule 101 (expNP1 -> .)
    DO              reduce using rule 101 (expNP1 -> .)
    COMMA           reduce using rule 101 (expNP1 -> .)

    expNP1                         shift and go to state 198

state 173

    (106) exp1A -> ANDOP operNP1 exp2 . exp1NP1 exp1A
    (105) exp1NP1 -> .

    ANDOP           reduce using rule 105 (exp1NP1 -> .)
    OROP            reduce using rule 105 (exp1NP1 -> .)
    ID              reduce using rule 105 (exp1NP1 -> .)
    READ            reduce using rule 105 (exp1NP1 -> .)
    WRITE           reduce using rule 105 (exp1NP1 -> .)
    RETURN          reduce using rule 105 (exp1NP1 -> .)
    IF              reduce using rule 105 (exp1NP1 -> .)
    FROM            reduce using rule 105 (exp1NP1 -> .)
    RIGHTCURLY      reduce using rule 105 (exp1NP1 -> .)
    TO              reduce using rule 105 (exp1NP1 -> .)
    RIGHTPAR        reduce using rule 105 (exp1NP1 -> .)
    RIGHTBRACKET    reduce using rule 105 (exp1NP1 -> .)
    DO              reduce using rule 105 (exp1NP1 -> .)
    COMMA           reduce using rule 105 (exp1NP1 -> .)

    exp1NP1                        shift and go to state 199

state 174

    (109) exp2A -> exp2B operNP1 exp3 . exp2ANP1
    (111) exp2ANP1 -> .

    ANDOP           reduce using rule 111 (exp2ANP1 -> .)
    OROP            reduce using rule 111 (exp2ANP1 -> .)
    ID              reduce using rule 111 (exp2ANP1 -> .)
    READ            reduce using rule 111 (exp2ANP1 -> .)
    WRITE           reduce using rule 111 (exp2ANP1 -> .)
    RETURN          reduce using rule 111 (exp2ANP1 -> .)
    IF              reduce using rule 111 (exp2ANP1 -> .)
    FROM            reduce using rule 111 (exp2ANP1 -> .)
    RIGHTCURLY      reduce using rule 111 (exp2ANP1 -> .)
    TO              reduce using rule 111 (exp2ANP1 -> .)
    RIGHTPAR        reduce using rule 111 (exp2ANP1 -> .)
    RIGHTBRACKET    reduce using rule 111 (exp2ANP1 -> .)
    DO              reduce using rule 111 (exp2ANP1 -> .)
    COMMA           reduce using rule 111 (exp2ANP1 -> .)

    exp2ANP1                       shift and go to state 200

state 175

    (118) exp3A -> exp3B operNP1 termino . exp3NP1 exp3A
    (117) exp3NP1 -> .

    SUMOP           reduce using rule 117 (exp3NP1 -> .)
    SUBOP           reduce using rule 117 (exp3NP1 -> .)
    LESSTHANOP      reduce using rule 117 (exp3NP1 -> .)
    GREATERTHANOP   reduce using rule 117 (exp3NP1 -> .)
    DIFFERENTOP     reduce using rule 117 (exp3NP1 -> .)
    EQUALOP         reduce using rule 117 (exp3NP1 -> .)
    ANDOP           reduce using rule 117 (exp3NP1 -> .)
    OROP            reduce using rule 117 (exp3NP1 -> .)
    ID              reduce using rule 117 (exp3NP1 -> .)
    READ            reduce using rule 117 (exp3NP1 -> .)
    WRITE           reduce using rule 117 (exp3NP1 -> .)
    RETURN          reduce using rule 117 (exp3NP1 -> .)
    IF              reduce using rule 117 (exp3NP1 -> .)
    FROM            reduce using rule 117 (exp3NP1 -> .)
    RIGHTCURLY      reduce using rule 117 (exp3NP1 -> .)
    TO              reduce using rule 117 (exp3NP1 -> .)
    RIGHTPAR        reduce using rule 117 (exp3NP1 -> .)
    RIGHTBRACKET    reduce using rule 117 (exp3NP1 -> .)
    DO              reduce using rule 117 (exp3NP1 -> .)
    COMMA           reduce using rule 117 (exp3NP1 -> .)

    exp3NP1                        shift and go to state 201

state 176

    (123) terminoA -> terminoB operNP1 terminoC . terminoANP1 terminoA
    (125) terminoANP1 -> .

    MULOP           reduce using rule 125 (terminoANP1 -> .)
    DIVOP           reduce using rule 125 (terminoANP1 -> .)
    SUMOP           reduce using rule 125 (terminoANP1 -> .)
    SUBOP           reduce using rule 125 (terminoANP1 -> .)
    LESSTHANOP      reduce using rule 125 (terminoANP1 -> .)
    GREATERTHANOP   reduce using rule 125 (terminoANP1 -> .)
    DIFFERENTOP     reduce using rule 125 (terminoANP1 -> .)
    EQUALOP         reduce using rule 125 (terminoANP1 -> .)
    ANDOP           reduce using rule 125 (terminoANP1 -> .)
    OROP            reduce using rule 125 (terminoANP1 -> .)
    ID              reduce using rule 125 (terminoANP1 -> .)
    READ            reduce using rule 125 (terminoANP1 -> .)
    WRITE           reduce using rule 125 (terminoANP1 -> .)
    RETURN          reduce using rule 125 (terminoANP1 -> .)
    IF              reduce using rule 125 (terminoANP1 -> .)
    FROM            reduce using rule 125 (terminoANP1 -> .)
    RIGHTCURLY      reduce using rule 125 (terminoANP1 -> .)
    TO              reduce using rule 125 (terminoANP1 -> .)
    RIGHTPAR        reduce using rule 125 (terminoANP1 -> .)
    RIGHTBRACKET    reduce using rule 125 (terminoANP1 -> .)
    DO              reduce using rule 125 (terminoANP1 -> .)
    COMMA           reduce using rule 125 (terminoANP1 -> .)

    terminoANP1                    shift and go to state 202

state 177

    (131) factor -> LEFTPAR operNP1 exp RIGHTPAR . factorNP1
    (136) factorNP1 -> .

    MULOP           reduce using rule 136 (factorNP1 -> .)
    DIVOP           reduce using rule 136 (factorNP1 -> .)
    SUMOP           reduce using rule 136 (factorNP1 -> .)
    SUBOP           reduce using rule 136 (factorNP1 -> .)
    LESSTHANOP      reduce using rule 136 (factorNP1 -> .)
    GREATERTHANOP   reduce using rule 136 (factorNP1 -> .)
    DIFFERENTOP     reduce using rule 136 (factorNP1 -> .)
    EQUALOP         reduce using rule 136 (factorNP1 -> .)
    ANDOP           reduce using rule 136 (factorNP1 -> .)
    OROP            reduce using rule 136 (factorNP1 -> .)
    ID              reduce using rule 136 (factorNP1 -> .)
    READ            reduce using rule 136 (factorNP1 -> .)
    WRITE           reduce using rule 136 (factorNP1 -> .)
    RETURN          reduce using rule 136 (factorNP1 -> .)
    IF              reduce using rule 136 (factorNP1 -> .)
    FROM            reduce using rule 136 (factorNP1 -> .)
    RIGHTCURLY      reduce using rule 136 (factorNP1 -> .)
    TO              reduce using rule 136 (factorNP1 -> .)
    RIGHTPAR        reduce using rule 136 (factorNP1 -> .)
    RIGHTBRACKET    reduce using rule 136 (factorNP1 -> .)
    DO              reduce using rule 136 (factorNP1 -> .)
    COMMA           reduce using rule 136 (factorNP1 -> .)

    factorNP1                      shift and go to state 203

state 178

    (85) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR . bloque condicionA condicionANP2
    (48) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 204

state 179

    (91) ciclo -> FROM exp TO exp DO . cicloNP1 bloque cicloNP2
    (92) cicloNP1 -> .

    LEFTCURLY       reduce using rule 92 (cicloNP1 -> .)

    cicloNP1                       shift and go to state 205

state 180

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC . quadStart bloque genMemReqs
    (26) quadStart -> .

    LEFTCURLY       reduce using rule 26 (quadStart -> .)

    quadStart                      shift and go to state 206

state 181

    (35) funcionC -> vars .

    LEFTCURLY       reduce using rule 35 (funcionC -> vars .)


state 182

    (36) funcionC -> empty .

    LEFTCURLY       reduce using rule 36 (funcionC -> empty .)


state 183

    (43) params -> tipoSimple paramsNP1 ID paramsNP2 . paramsA
    (44) paramsA -> . COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
    (45) paramsA -> . empty
    (139) empty -> .

    COMMA           shift and go to state 208
    RIGHTPAR        reduce using rule 139 (empty -> .)

    paramsA                        shift and go to state 207
    empty                          shift and go to state 209

state 184

    (20) varsE -> COMMA ID varsNP3 varsNP6 varsE .

    SEMICOLON       reduce using rule 20 (varsE -> COMMA ID varsNP3 varsNP6 varsE .)


state 185

    (17) varsD -> LEFTBRACKET CTI . varsNP5 RIGHTBRACKET
    (19) varsNP5 -> .

    RIGHTBRACKET    reduce using rule 19 (varsNP5 -> .)

    varsNP5                        shift and go to state 210

state 186

    (64) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA . RIGHTPAR llamadaNP3

    RIGHTPAR        shift and go to state 211


state 187

    (67) llamadaA -> COMMA . exp loeNP1 llamadaA
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 212
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 188

    (68) llamadaA -> empty .

    RIGHTPAR        reduce using rule 68 (llamadaA -> empty .)


state 189

    (65) primerparam -> exp loeNP1 .

    COMMA           reduce using rule 65 (primerparam -> exp loeNP1 .)
    RIGHTPAR        reduce using rule 65 (primerparam -> exp loeNP1 .)


state 190

    (98) variableB -> LEFTBRACKET . exp RIGHTBRACKET
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    exp                            shift and go to state 213
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 191

    (96) variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .

    ASSIGNOP        reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    MULOP           reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DIVOP           reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    SUMOP           reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    SUBOP           reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    LESSTHANOP      reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    GREATERTHANOP   reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DIFFERENTOP     reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    EQUALOP         reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    ANDOP           reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    OROP            reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    ID              reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    READ            reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    WRITE           reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RETURN          reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    IF              reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    FROM            reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTCURLY      reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    TO              reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTPAR        reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    RIGHTBRACKET    reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    DO              reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)
    COMMA           reduce using rule 96 (variableA -> LEFTBRACKET exp RIGHTBRACKET variableB .)


state 192

    (99) variableB -> empty .

    ASSIGNOP        reduce using rule 99 (variableB -> empty .)
    MULOP           reduce using rule 99 (variableB -> empty .)
    DIVOP           reduce using rule 99 (variableB -> empty .)
    SUMOP           reduce using rule 99 (variableB -> empty .)
    SUBOP           reduce using rule 99 (variableB -> empty .)
    LESSTHANOP      reduce using rule 99 (variableB -> empty .)
    GREATERTHANOP   reduce using rule 99 (variableB -> empty .)
    DIFFERENTOP     reduce using rule 99 (variableB -> empty .)
    EQUALOP         reduce using rule 99 (variableB -> empty .)
    ANDOP           reduce using rule 99 (variableB -> empty .)
    OROP            reduce using rule 99 (variableB -> empty .)
    ID              reduce using rule 99 (variableB -> empty .)
    READ            reduce using rule 99 (variableB -> empty .)
    WRITE           reduce using rule 99 (variableB -> empty .)
    RETURN          reduce using rule 99 (variableB -> empty .)
    IF              reduce using rule 99 (variableB -> empty .)
    FROM            reduce using rule 99 (variableB -> empty .)
    RIGHTCURLY      reduce using rule 99 (variableB -> empty .)
    TO              reduce using rule 99 (variableB -> empty .)
    RIGHTPAR        reduce using rule 99 (variableB -> empty .)
    RIGHTBRACKET    reduce using rule 99 (variableB -> empty .)
    DO              reduce using rule 99 (variableB -> empty .)
    COMMA           reduce using rule 99 (variableB -> empty .)


state 193

    (73) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB . RIGHTPAR escrituraNP3

    RIGHTPAR        shift and go to state 214


state 194

    (81) escrituraB -> COMMA . escrituraA escrituraB
    (77) escrituraA -> . exp loeNP1
    (78) escrituraA -> . CTSTRING escrituraNP2
    (100) exp -> . exp1 expA
    (104) exp1 -> . exp2 exp1A
    (108) exp2 -> . exp3 exp2A
    (116) exp3 -> . termino exp3A
    (122) termino -> . terminoC terminoA
    (128) terminoC -> . factor
    (129) terminoC -> . llamada checkIfNotVoid
    (131) factor -> . LEFTPAR operNP1 exp RIGHTPAR factorNP1
    (132) factor -> . CTI factorNP2
    (133) factor -> . CTF factorNP3
    (134) factor -> . variable
    (64) llamada -> . ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3
    (94) variable -> . ID variableNP1 variableA

    CTSTRING        shift and go to state 171
    LEFTPAR         shift and go to state 93
    CTI             shift and go to state 94
    CTF             shift and go to state 95
    ID              shift and go to state 67

    escrituraA                     shift and go to state 215
    exp                            shift and go to state 170
    exp1                           shift and go to state 86
    exp2                           shift and go to state 87
    exp3                           shift and go to state 88
    termino                        shift and go to state 89
    terminoC                       shift and go to state 90
    factor                         shift and go to state 91
    llamada                        shift and go to state 92
    variable                       shift and go to state 96

state 195

    (82) escrituraB -> empty .

    RIGHTPAR        reduce using rule 82 (escrituraB -> empty .)


state 196

    (77) escrituraA -> exp loeNP1 .

    COMMA           reduce using rule 77 (escrituraA -> exp loeNP1 .)
    RIGHTPAR        reduce using rule 77 (escrituraA -> exp loeNP1 .)


state 197

    (78) escrituraA -> CTSTRING escrituraNP2 .

    COMMA           reduce using rule 78 (escrituraA -> CTSTRING escrituraNP2 .)
    RIGHTPAR        reduce using rule 78 (escrituraA -> CTSTRING escrituraNP2 .)


state 198

    (102) expA -> OROP operNP1 exp1 expNP1 . expA
    (102) expA -> . OROP operNP1 exp1 expNP1 expA
    (103) expA -> . empty
    (139) empty -> .

    OROP            shift and go to state 114
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    expA                           shift and go to state 216
    empty                          shift and go to state 115

state 199

    (106) exp1A -> ANDOP operNP1 exp2 exp1NP1 . exp1A
    (106) exp1A -> . ANDOP operNP1 exp2 exp1NP1 exp1A
    (107) exp1A -> . empty
    (139) empty -> .

    ANDOP           shift and go to state 117
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    exp1A                          shift and go to state 217
    empty                          shift and go to state 118

state 200

    (109) exp2A -> exp2B operNP1 exp3 exp2ANP1 .

    ANDOP           reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    OROP            reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    ID              reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    READ            reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    WRITE           reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RETURN          reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    IF              reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    FROM            reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTCURLY      reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    TO              reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTPAR        reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    RIGHTBRACKET    reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    DO              reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)
    COMMA           reduce using rule 109 (exp2A -> exp2B operNP1 exp3 exp2ANP1 .)


state 201

    (118) exp3A -> exp3B operNP1 termino exp3NP1 . exp3A
    (118) exp3A -> . exp3B operNP1 termino exp3NP1 exp3A
    (119) exp3A -> . empty
    (120) exp3B -> . SUMOP
    (121) exp3B -> . SUBOP
    (139) empty -> .

    SUMOP           shift and go to state 129
    SUBOP           shift and go to state 130
    LESSTHANOP      reduce using rule 139 (empty -> .)
    GREATERTHANOP   reduce using rule 139 (empty -> .)
    DIFFERENTOP     reduce using rule 139 (empty -> .)
    EQUALOP         reduce using rule 139 (empty -> .)
    ANDOP           reduce using rule 139 (empty -> .)
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    exp3B                          shift and go to state 127
    exp3A                          shift and go to state 218
    empty                          shift and go to state 128

state 202

    (123) terminoA -> terminoB operNP1 terminoC terminoANP1 . terminoA
    (123) terminoA -> . terminoB operNP1 terminoC terminoANP1 terminoA
    (124) terminoA -> . empty
    (126) terminoB -> . MULOP
    (127) terminoB -> . DIVOP
    (139) empty -> .

    MULOP           shift and go to state 134
    DIVOP           shift and go to state 135
    SUMOP           reduce using rule 139 (empty -> .)
    SUBOP           reduce using rule 139 (empty -> .)
    LESSTHANOP      reduce using rule 139 (empty -> .)
    GREATERTHANOP   reduce using rule 139 (empty -> .)
    DIFFERENTOP     reduce using rule 139 (empty -> .)
    EQUALOP         reduce using rule 139 (empty -> .)
    ANDOP           reduce using rule 139 (empty -> .)
    OROP            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    RIGHTPAR        reduce using rule 139 (empty -> .)
    RIGHTBRACKET    reduce using rule 139 (empty -> .)
    DO              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)

    terminoB                       shift and go to state 132
    terminoA                       shift and go to state 219
    empty                          shift and go to state 133

state 203

    (131) factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .

    MULOP           reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DIVOP           reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    SUMOP           reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    SUBOP           reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    LESSTHANOP      reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    GREATERTHANOP   reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DIFFERENTOP     reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    EQUALOP         reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    ANDOP           reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    OROP            reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    ID              reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    READ            reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    WRITE           reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RETURN          reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    IF              reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    FROM            reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTCURLY      reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    TO              reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTPAR        reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    RIGHTBRACKET    reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    DO              reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)
    COMMA           reduce using rule 131 (factor -> LEFTPAR operNP1 exp RIGHTPAR factorNP1 .)


state 204

    (85) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque . condicionA condicionANP2
    (87) condicionA -> . ELSE condicionANP1 bloque
    (88) condicionA -> . empty
    (139) empty -> .

    ELSE            shift and go to state 221
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    FROM            reduce using rule 139 (empty -> .)
    RIGHTCURLY      reduce using rule 139 (empty -> .)

    condicionA                     shift and go to state 220
    empty                          shift and go to state 222

state 205

    (91) ciclo -> FROM exp TO exp DO cicloNP1 . bloque cicloNP2
    (48) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 223

state 206

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart . bloque genMemReqs
    (48) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 224

state 207

    (43) params -> tipoSimple paramsNP1 ID paramsNP2 paramsA .

    RIGHTPAR        reduce using rule 43 (params -> tipoSimple paramsNP1 ID paramsNP2 paramsA .)


state 208

    (44) paramsA -> COMMA . tipoSimple paramsNP1 ID paramsNP2 paramsA
    (40) tipoSimple -> . INT tipoSimpleNP1
    (41) tipoSimple -> . FLOAT tipoSimpleNP1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    tipoSimple                     shift and go to state 225

state 209

    (45) paramsA -> empty .

    RIGHTPAR        reduce using rule 45 (paramsA -> empty .)


state 210

    (17) varsD -> LEFTBRACKET CTI varsNP5 . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 226


state 211

    (64) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR . llamadaNP3
    (70) llamadaNP3 -> .

    ID              reduce using rule 70 (llamadaNP3 -> .)
    READ            reduce using rule 70 (llamadaNP3 -> .)
    WRITE           reduce using rule 70 (llamadaNP3 -> .)
    RETURN          reduce using rule 70 (llamadaNP3 -> .)
    IF              reduce using rule 70 (llamadaNP3 -> .)
    FROM            reduce using rule 70 (llamadaNP3 -> .)
    RIGHTCURLY      reduce using rule 70 (llamadaNP3 -> .)
    MULOP           reduce using rule 70 (llamadaNP3 -> .)
    DIVOP           reduce using rule 70 (llamadaNP3 -> .)
    SUMOP           reduce using rule 70 (llamadaNP3 -> .)
    SUBOP           reduce using rule 70 (llamadaNP3 -> .)
    LESSTHANOP      reduce using rule 70 (llamadaNP3 -> .)
    GREATERTHANOP   reduce using rule 70 (llamadaNP3 -> .)
    DIFFERENTOP     reduce using rule 70 (llamadaNP3 -> .)
    EQUALOP         reduce using rule 70 (llamadaNP3 -> .)
    ANDOP           reduce using rule 70 (llamadaNP3 -> .)
    OROP            reduce using rule 70 (llamadaNP3 -> .)
    TO              reduce using rule 70 (llamadaNP3 -> .)
    RIGHTPAR        reduce using rule 70 (llamadaNP3 -> .)
    RIGHTBRACKET    reduce using rule 70 (llamadaNP3 -> .)
    DO              reduce using rule 70 (llamadaNP3 -> .)
    COMMA           reduce using rule 70 (llamadaNP3 -> .)

    llamadaNP3                     shift and go to state 227

state 212

    (67) llamadaA -> COMMA exp . loeNP1 llamadaA
    (79) loeNP1 -> .

    COMMA           reduce using rule 79 (loeNP1 -> .)
    RIGHTPAR        reduce using rule 79 (loeNP1 -> .)

    loeNP1                         shift and go to state 228

state 213

    (98) variableB -> LEFTBRACKET exp . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 229


state 214

    (73) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR . escrituraNP3
    (75) escrituraNP3 -> .

    ID              reduce using rule 75 (escrituraNP3 -> .)
    READ            reduce using rule 75 (escrituraNP3 -> .)
    WRITE           reduce using rule 75 (escrituraNP3 -> .)
    RETURN          reduce using rule 75 (escrituraNP3 -> .)
    IF              reduce using rule 75 (escrituraNP3 -> .)
    FROM            reduce using rule 75 (escrituraNP3 -> .)
    RIGHTCURLY      reduce using rule 75 (escrituraNP3 -> .)

    escrituraNP3                   shift and go to state 230

state 215

    (81) escrituraB -> COMMA escrituraA . escrituraB
    (81) escrituraB -> . COMMA escrituraA escrituraB
    (82) escrituraB -> . empty
    (139) empty -> .

    COMMA           shift and go to state 194
    RIGHTPAR        reduce using rule 139 (empty -> .)

    escrituraB                     shift and go to state 231
    empty                          shift and go to state 195

state 216

    (102) expA -> OROP operNP1 exp1 expNP1 expA .

    ID              reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    READ            reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    WRITE           reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RETURN          reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    IF              reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    FROM            reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTCURLY      reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    TO              reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTPAR        reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    RIGHTBRACKET    reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    DO              reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)
    COMMA           reduce using rule 102 (expA -> OROP operNP1 exp1 expNP1 expA .)


state 217

    (106) exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .

    OROP            reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    ID              reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    READ            reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    WRITE           reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RETURN          reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    IF              reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    FROM            reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTCURLY      reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    TO              reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTPAR        reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    RIGHTBRACKET    reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    DO              reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)
    COMMA           reduce using rule 106 (exp1A -> ANDOP operNP1 exp2 exp1NP1 exp1A .)


state 218

    (118) exp3A -> exp3B operNP1 termino exp3NP1 exp3A .

    LESSTHANOP      reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    GREATERTHANOP   reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    DIFFERENTOP     reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    EQUALOP         reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    ANDOP           reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    OROP            reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    ID              reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    READ            reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    WRITE           reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RETURN          reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    IF              reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    FROM            reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTCURLY      reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    TO              reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTPAR        reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    RIGHTBRACKET    reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    DO              reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)
    COMMA           reduce using rule 118 (exp3A -> exp3B operNP1 termino exp3NP1 exp3A .)


state 219

    (123) terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .

    SUMOP           reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    SUBOP           reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    LESSTHANOP      reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    GREATERTHANOP   reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    DIFFERENTOP     reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    EQUALOP         reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    ANDOP           reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    OROP            reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    ID              reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    READ            reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    WRITE           reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RETURN          reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    IF              reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    FROM            reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTCURLY      reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    TO              reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTPAR        reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    RIGHTBRACKET    reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    DO              reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)
    COMMA           reduce using rule 123 (terminoA -> terminoB operNP1 terminoC terminoANP1 terminoA .)


state 220

    (85) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA . condicionANP2
    (90) condicionANP2 -> .

    ID              reduce using rule 90 (condicionANP2 -> .)
    READ            reduce using rule 90 (condicionANP2 -> .)
    WRITE           reduce using rule 90 (condicionANP2 -> .)
    RETURN          reduce using rule 90 (condicionANP2 -> .)
    IF              reduce using rule 90 (condicionANP2 -> .)
    FROM            reduce using rule 90 (condicionANP2 -> .)
    RIGHTCURLY      reduce using rule 90 (condicionANP2 -> .)

    condicionANP2                  shift and go to state 232

state 221

    (87) condicionA -> ELSE . condicionANP1 bloque
    (89) condicionANP1 -> .

    LEFTCURLY       reduce using rule 89 (condicionANP1 -> .)

    condicionANP1                  shift and go to state 233

state 222

    (88) condicionA -> empty .

    ID              reduce using rule 88 (condicionA -> empty .)
    READ            reduce using rule 88 (condicionA -> empty .)
    WRITE           reduce using rule 88 (condicionA -> empty .)
    RETURN          reduce using rule 88 (condicionA -> empty .)
    IF              reduce using rule 88 (condicionA -> empty .)
    FROM            reduce using rule 88 (condicionA -> empty .)
    RIGHTCURLY      reduce using rule 88 (condicionA -> empty .)


state 223

    (91) ciclo -> FROM exp TO exp DO cicloNP1 bloque . cicloNP2
    (93) cicloNP2 -> .

    ID              reduce using rule 93 (cicloNP2 -> .)
    READ            reduce using rule 93 (cicloNP2 -> .)
    WRITE           reduce using rule 93 (cicloNP2 -> .)
    RETURN          reduce using rule 93 (cicloNP2 -> .)
    IF              reduce using rule 93 (cicloNP2 -> .)
    FROM            reduce using rule 93 (cicloNP2 -> .)
    RIGHTCURLY      reduce using rule 93 (cicloNP2 -> .)

    cicloNP2                       shift and go to state 234

state 224

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque . genMemReqs
    (27) genMemReqs -> .

    FUNC            reduce using rule 27 (genMemReqs -> .)
    MAINSTART       reduce using rule 27 (genMemReqs -> .)

    genMemReqs                     shift and go to state 235

state 225

    (44) paramsA -> COMMA tipoSimple . paramsNP1 ID paramsNP2 paramsA
    (46) paramsNP1 -> .

    ID              reduce using rule 46 (paramsNP1 -> .)

    paramsNP1                      shift and go to state 236

state 226

    (17) varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET .

    SEMICOLON       reduce using rule 17 (varsD -> LEFTBRACKET CTI varsNP5 RIGHTBRACKET .)


state 227

    (64) llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .

    ID              reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    READ            reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    WRITE           reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RETURN          reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    IF              reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    FROM            reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTCURLY      reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    MULOP           reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DIVOP           reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    SUMOP           reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    SUBOP           reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    LESSTHANOP      reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    GREATERTHANOP   reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DIFFERENTOP     reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    EQUALOP         reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    ANDOP           reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    OROP            reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    TO              reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTPAR        reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    RIGHTBRACKET    reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    DO              reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)
    COMMA           reduce using rule 64 (llamada -> ID llamadaNP1 LEFTPAR loeNP2 primerparam llamadaA RIGHTPAR llamadaNP3 .)


state 228

    (67) llamadaA -> COMMA exp loeNP1 . llamadaA
    (67) llamadaA -> . COMMA exp loeNP1 llamadaA
    (68) llamadaA -> . empty
    (139) empty -> .

    COMMA           shift and go to state 187
    RIGHTPAR        reduce using rule 139 (empty -> .)

    llamadaA                       shift and go to state 237
    empty                          shift and go to state 188

state 229

    (98) variableB -> LEFTBRACKET exp RIGHTBRACKET .

    ASSIGNOP        reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    MULOP           reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DIVOP           reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    SUMOP           reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    SUBOP           reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    LESSTHANOP      reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    GREATERTHANOP   reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DIFFERENTOP     reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    EQUALOP         reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    ANDOP           reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    OROP            reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    ID              reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    READ            reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    WRITE           reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RETURN          reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    IF              reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    FROM            reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTCURLY      reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    TO              reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    DO              reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)
    COMMA           reduce using rule 98 (variableB -> LEFTBRACKET exp RIGHTBRACKET .)


state 230

    (73) escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .

    ID              reduce using rule 73 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    READ            reduce using rule 73 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    WRITE           reduce using rule 73 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    RETURN          reduce using rule 73 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    IF              reduce using rule 73 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    FROM            reduce using rule 73 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)
    RIGHTCURLY      reduce using rule 73 (escritura -> WRITE escrituraNP1 LEFTPAR loeNP2 escrituraA escrituraB RIGHTPAR escrituraNP3 .)


state 231

    (81) escrituraB -> COMMA escrituraA escrituraB .

    RIGHTPAR        reduce using rule 81 (escrituraB -> COMMA escrituraA escrituraB .)


state 232

    (85) condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .

    ID              reduce using rule 85 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    READ            reduce using rule 85 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    WRITE           reduce using rule 85 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    RETURN          reduce using rule 85 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    IF              reduce using rule 85 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    FROM            reduce using rule 85 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)
    RIGHTCURLY      reduce using rule 85 (condicion -> IF LEFTPAR exp condicionNP1 RIGHTPAR bloque condicionA condicionANP2 .)


state 233

    (87) condicionA -> ELSE condicionANP1 . bloque
    (48) bloque -> . LEFTCURLY bloqueA RIGHTCURLY

    LEFTCURLY       shift and go to state 42

    bloque                         shift and go to state 238

state 234

    (91) ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .

    ID              reduce using rule 91 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    READ            reduce using rule 91 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    WRITE           reduce using rule 91 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    RETURN          reduce using rule 91 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    IF              reduce using rule 91 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    FROM            reduce using rule 91 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)
    RIGHTCURLY      reduce using rule 91 (ciclo -> FROM exp TO exp DO cicloNP1 bloque cicloNP2 .)


state 235

    (25) funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .

    FUNC            reduce using rule 25 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .)
    MAINSTART       reduce using rule 25 (funcion -> FUNC funcionA funcionNP1 ID funcionNP2 LEFTPAR funcionB RIGHTPAR SEMICOLON funcionC quadStart bloque genMemReqs .)


state 236

    (44) paramsA -> COMMA tipoSimple paramsNP1 . ID paramsNP2 paramsA

    ID              shift and go to state 239


state 237

    (67) llamadaA -> COMMA exp loeNP1 llamadaA .

    RIGHTPAR        reduce using rule 67 (llamadaA -> COMMA exp loeNP1 llamadaA .)


state 238

    (87) condicionA -> ELSE condicionANP1 bloque .

    ID              reduce using rule 87 (condicionA -> ELSE condicionANP1 bloque .)
    READ            reduce using rule 87 (condicionA -> ELSE condicionANP1 bloque .)
    WRITE           reduce using rule 87 (condicionA -> ELSE condicionANP1 bloque .)
    RETURN          reduce using rule 87 (condicionA -> ELSE condicionANP1 bloque .)
    IF              reduce using rule 87 (condicionA -> ELSE condicionANP1 bloque .)
    FROM            reduce using rule 87 (condicionA -> ELSE condicionANP1 bloque .)
    RIGHTCURLY      reduce using rule 87 (condicionA -> ELSE condicionANP1 bloque .)


state 239

    (44) paramsA -> COMMA tipoSimple paramsNP1 ID . paramsNP2 paramsA
    (47) paramsNP2 -> .

    COMMA           reduce using rule 47 (paramsNP2 -> .)
    RIGHTPAR        reduce using rule 47 (paramsNP2 -> .)

    paramsNP2                      shift and go to state 240

state 240

    (44) paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 . paramsA
    (44) paramsA -> . COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA
    (45) paramsA -> . empty
    (139) empty -> .

    COMMA           shift and go to state 208
    RIGHTPAR        reduce using rule 139 (empty -> .)

    paramsA                        shift and go to state 241
    empty                          shift and go to state 209

state 241

    (44) paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA .

    RIGHTPAR        reduce using rule 44 (paramsA -> COMMA tipoSimple paramsNP1 ID paramsNP2 paramsA .)

